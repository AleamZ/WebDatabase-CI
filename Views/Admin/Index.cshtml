@model List<CIResearch.Models.ALLDATA>

<!DOCTYPE html>
<html lang="en">

<head>
    <link href="~/adminpanel/css/style.css" rel="stylesheet" />
    <script src="~/adminpanel/js/script.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'>
    <!-- site metas -->
    <title>4uhost</title>
    <meta name="keywords" content="">
    <meta name="description" content="">
    <meta name="author" content="">
    <!-- bootstrap css -->

    <link href="~/css(4u)/bootstrap.min.css" rel="stylesheet" />
    <!-- style css -->

    <link href="~/css(4u)/style.css" rel="stylesheet" />
    <!-- Responsive-->
    <link href="~/css(4u)/responsive.css" rel="stylesheet" />

    <!-- fevicon -->
    <!-- Tweaks for older IEs-->

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <style>
        .table-container {
            border: 1px solid #ddd;
            padding: 10px;
            max-height: 400px;
            /* Giới hạn chiều cao nếu bảng quá dài */
            overflow-y: auto;
            /* Thêm thanh cuộn dọc nếu bảng quá dài */
        }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

        .table-bordered {
            border: 1px solid #ddd;
        }

        .table th,
        .table td {
            padding: 8px;
            text-align: left;
            border: 1px solid #ddd;
        }

        <style>

        /* Thêm CSS tùy chỉnh cho giao diện */
        .admin-page {
            display: flex;
        }

        .sidebar {
            width: 200px;
            background-color: #f4f4f4;
            padding: 20px;
        }

        .content {
            flex: 1;
            padding: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th,
        td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
        }

        .filter-select {
            width: 100%;
            padding: 5px;
            box-sizing: border-box;
            margin-bottom: 10px;
            /* Thêm khoảng cách giữa các dropdown */
        }

        .filter-form {
            margin-bottom: 20px;
        }

        .custom-multi-select {
            position: relative;
            width: 215px;
            margin: 0 auto;
        }

        .select-box {
            padding: 10px;
            border: 1px solid #ccc;
            cursor: pointer;
            background-color: #fff;
            position: relative;
        }

        .selected-options {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .arrow {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            border: solid #666;
            border-width: 0 2px 2px 0;
            padding: 3px;
            transform: rotate(45deg);
        }

        .dropdown-options {
            display: none;
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background-color: #fff;
            border: 1px solid #ccc;
            max-height: 150px;
            overflow-y: auto;
            z-index: 1;
        }


        .selected-options {
            width: 100%;
            /* Đặt độ rộng tối đa cho ô hiển thị */
            overflow: hidden;
            /* Ẩn phần văn bản bị tràn */
            text-overflow: ellipsis;
            /* Hiển thị dấu ... khi văn bản quá dài */
            white-space: nowrap;
            /* Ngăn không cho văn bản xuống dòng */
        }



        .dropdown-options label {
            display: block;
            padding: 5px;
            cursor: pointer;
        }

        .dropdown-options label:hover {
            background-color: #f0f0f0;
        }
    </style>



    <title>CI RESEARCH - Dashboard</title>
    <!-- Add Leaflet CSS -->
    <!-- Add Leaflet JS -->
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@3.0.0"></script>
    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css">
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@1.0.1/dist/chartjs-plugin-zoom.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- Custom fonts for this template-->
    <link href="~/trangadmin/accses/vendor/fontawesome-free/css/all.min.css" rel="stylesheet" />
    @*   <link href="vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css"> *@
    <link
        href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i"
        rel="stylesheet">
    <link href="~/trangadmin/accses/css/sb-admin-2.css" rel="stylesheet" />
    <link href="~/trangadmin/accses/css/sb-admin-2.min.css" rel="stylesheet" />


    <!-- Custom styles for this template-->
    @*  <link href="css/sb-admin-2.min.css" rel="stylesheet"> *@

</head>


<body id="page-top">
    <a href="@Url.Action("SearchPhoneNumber", "Admin")" class="btn btn-primary" style="margin-bottom: 20px;">Tìm kiếm số điện thoại</a>
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h5 class="m-0 font-weight-bold text-primary">Tìm kiếm</h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">


                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">



                    <form method="get" action="@Url.Action("Index", "Admin")" class="filter-form">
                        <div style="display: flex; flex-wrap: wrap; gap: 16px; row-gap: 16px;">
                            <!-- Hàng 1 -->
                            <div style="width: 200px;">
                                <select name="code" id="code" class="form-control" style="width: 100%;">
                                    <option value="">-- Chọn mã dự án --</option>
                                    @foreach (var code in (ViewBag.CodeList as List<string>) ?? new List<string>())
                                    {
                                        if (ViewBag.Code?.Contains(code) == true)
                                        {
                                            <option value="@code" selected>@code</option>
                                        }
                                        else
                                        {
                                            <option value="@code">@code</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div style="width: 200px;">
                                <select name="projectName" id="projectName" class="form-control" style="width: 100%;">
                                    <option value="">-- Chọn tên dự án --</option>
                                    @foreach (var pn in (ViewBag.ProjectNameList as List<string>) ?? new List<string>())
                                    {
                                        if (ViewBag.Projectname?.Contains(pn) == true)
                                        {
                                            <option value="@pn" selected>@pn</option>
                                        }
                                        else
                                        {
                                            <option value="@pn">@pn</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div style="width: 200px;">
                                <select name="year" id="year" class="form-control" style="width: 100%;">
                                    <option value="">-- Chọn năm --</option>
                                    @foreach (var year in (ViewBag.YearList as List<string>) ?? new List<string>())
                                    {
                                        if (ViewBag.Year?.Contains(year) == true)
                                        {
                                            <option value="@year" selected>@year</option>
                                        }
                                        else
                                        {
                                            <option value="@year">@year</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div style="width: 200px;">
                                <select name="khuvuc" id="khuvuc" class="form-control" style="width: 100%;">
                                    <option value="">-- Chọn vùng miền --</option>
                                    @foreach (var kv in (ViewBag.KhuvucList as List<string>) ?? new List<string>())
                                    {
                                        if (ViewBag.Khuvuc?.Contains(kv) == true)
                                        {
                                            <option value="@kv" selected>@kv</option>
                                        }
                                        else
                                        {
                                            <option value="@kv">@kv</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div style="width: 200px;">
                                <select name="city" id="city" class="form-control" style="width: 100%;">
                                    <option value="">-- Chọn tỉnh --</option>
                                    @foreach (var city in (ViewBag.CityList as List<string>) ?? new List<string>())
                                    {
                                        if (ViewBag.City?.Contains(city) == true)
                                        {
                                            <option value="@city" selected>@city</option>
                                        }
                                        else
                                        {
                                            <option value="@city">@city</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div style="width: 200px;">
                                <select name="sex" id="sex" class="form-control" style="width: 100%;">
                                    <option value="">-- Chọn giới tính --</option>
                                    @foreach (var sex in (ViewBag.SexList as List<string>) ?? new List<string>())
                                    {
                                        if (ViewBag.Sex?.Contains(sex) == true)
                                        {
                                            <option value="@sex" selected>@sex</option>
                                        }
                                        else
                                        {
                                            <option value="@sex">@sex</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div style="width: 200px;">
                                <select name="age" id="age" class="form-control" style="width: 100%;">
                                    <option value="">-- Chọn tuổi --</option>
                                    @foreach (var age in (ViewBag.AgeList as IEnumerable<object>) ??
                                                                        Enumerable.Range(10, 91).Cast<object>())
                                    {
                                        var ageStr = age.ToString();
                                        if (ViewBag.Age?.Contains(ageStr) == true)
                                        {
                                            <option value="@ageStr" selected>@ageStr</option>
                                        }
                                        else
                                        {
                                            <option value="@ageStr">@ageStr</option>
                                        }
                                    }
                                </select>
                            </div>
                            <!-- Hàng 2 -->
                            <div style="width: 200px;">
                                <select name="job" id="job" class="form-control" style="width: 100%;">
                                    <option value="">-- Chọn nghề nghiệp --</option>
                                    @foreach (var job in (ViewBag.JobList as List<string>) ?? new List<string>())
                                    {
                                        if (ViewBag.Job?.Contains(job) == true)
                                        {
                                            <option value="@job" selected>@job</option>
                                        }
                                        else
                                        {
                                            <option value="@job">@job</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div style="width: 200px;">
                                <select name="chuyenKhoa" id="chuyenKhoa" class="form-control" style="width: 100%;">
                                    <option value="">-- Chọn chuyên ngành --</option>
                                    @foreach (var ck in (ViewBag.ChuyenKhoaList as List<string>) ?? new List<string>())
                                    {
                                        if (ViewBag.ChuyenKhoa?.Contains(ck) == true)
                                        {
                                            <option value="@ck" selected>@ck</option>
                                        }
                                        else
                                        {
                                            <option value="@ck">@ck</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div style="width: 200px;">
                                <select name="className" id="className" class="form-control" style="width: 100%;">
                                    <option value="">-- Chọn thành phần --</option>
                                    @foreach (var cl in (ViewBag.ClassList as List<string>) ?? new List<string>())
                                    {
                                        if (ViewBag.Classname?.Contains(cl) == true)
                                        {
                                            <option value="@cl" selected>@cl</option>
                                        }
                                        else
                                        {
                                            <option value="@cl">@cl</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div style="width: 200px;">
                                <select name="Nganhhang" id="nganhhang" class="form-control" style="width: 100%;">
                                    <option value="">-- Chọn ngành hàng --</option>
                                    @foreach (var nh in (ViewBag.NganhhangList as List<string>) ?? new List<string>())
                                    {
                                        if (ViewBag.Nganhhang?.Contains(nh) == true)
                                        {
                                            <option value="@nh" selected>@nh</option>
                                        }
                                        else
                                        {
                                            <option value="@nh">@nh</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div style="width: 200px;">
                                <select name="maritalStatus" id="maritalStatus" class="form-control"
                                    style="width: 100%;">
                                    <option value="">-- Chọn tình trạng --</option>
                                    @foreach (var ms in (ViewBag.MaritalStatusList as List<string>) ?? new
                                                                        List<string>())
                                    {
                                        if (ViewBag.MaritalStatus?.Contains(ms) == true)
                                        {
                                            <option value="@ms" selected>@ms</option>
                                        }
                                        else
                                        {
                                            <option value="@ms">@ms</option>
                                        }
                                    }
                                </select>
                            </div>
                            @* Xóa ô filter nhập số điện thoại (input filter số điện thoại) khỏi form filter *@
                        </div>
                        <P> &nbsp </P>

                        <button type="submit" class="btn btn-primary"> Lọc</button>
                        <button type="button" class="btn btn-danger"
                            onclick="window.location.href='@Url.Action("Index", "Admin")'">
                            Xóa bộ lọc
                        </button>



                    </form>

                </div>
            </div>
        </div>
    </div>

    <!-- Content Row -->
    <div class="row">


        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left shadow h-100 py-2" style="background-color:rgb(136,146,214);">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <h5 class="m-0 font-weight-bold text-white ">Tổng dự án</h5>

                            <div class="h3 mb-0 font-weight text-white"> <span style="font-size: 0.55em;">Số dự
                                    án</span> @ViewBag.TotalProjects</div>

                        </div>
                        <div class="col-auto">
                            <i class="fas fa-database fa-2x text-white"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <!-- tổng số lượng mẫu -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left shadow h-100 py-2" style="background-color:rgb(69,187,224);">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <h5 class="m-0 font-weight-bold text-white">Tổng số lượng</h5>
                            <div class="h3 mb-0 font-weight text-white"><span style="font-size: 0.55em;">Số mẫu</span>
                                @ViewBag.TotalRows </div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-users fa-2x text-white"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- tổng số lượng mẫu -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left shadow h-100 py-2" style="background-color:rgb(240,98,146);">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <h5 class="m-0 font-weight-bold text-white">Tổng số mẫu khu vực</h5>
                            <div class="h3 mb-0 font-weight text-white">
                                <span style="font-size: 0.55em;">Miền Bắc</span> @ViewBag.mienbac <span
                                    style="font-size: 0.55em;"></span>
                            </div>
                            <div class="h3 mb-0 font-weight text-white">
                                <span style="font-size: 0.55em;">Miền Trung</span> @ViewBag.mientrung <span
                                    style="font-size: 0.55em;"></span>
                            </div>
                            <div class="h3 mb-0 font-weight text-white">
                                <span style="font-size: 0.55em;">Miền Nam</span> @ViewBag.miennam <span
                                    style="font-size: 0.55em;"></span>
                            </div>

                        </div>
                        <div class="col-auto">
                            <i class="fas fa-compass fa-2x text-white" style="vertical-align: 60px;"></i>

                        </div>
                    </div>
                </div>
            </div>
        </div>



        <!-- Tổng số mẫu ở -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left shadow h-100 py-2" style="background-color:rgb(120,195,80);">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <h5 class="m-0 font-weight-bold text-white">Số lượng nam nữ</h5>
                            <div class="h3 mb-0 font-weight text-white">
                                <span style="font-size: 0.55em;">Nam</span> @ViewBag.namCount <span
                                    style="font-size: 0.55em;"></span>
                            </div>
                            <div class="h3 mb-0 font-weight text-white">
                                <span style="font-size: 0.55em;">Nữ</span> @ViewBag.nuCount <span
                                    style="font-size: 0.55em;"></span>
                            </div>
                            <div class="h3 mb-0 font-weight text-white">
                                <span style="font-size: 0.55em;">Không xác định</span> @ViewBag.KXDCount <span
                                    style="font-size: 0.55em;"></span>
                            </div>

                        </div>
                        <div class="col-auto">
                            <i class="fas fa-venus-mars fa-2x text-white" style="vertical-align: 60px;"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>


    </div>

    <!-- Content Row -->



    <div class="row">

        <!-- Biểu đồ 1 -->
        <div class="col-xl-4 col-lg-4">
            <div class="card shadow mb-4">
                <!-- Card Header - Dropdown -->
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Số mẫu các vùng miền</h6>
                </div>
                <!-- Card Body -->
                <div class="card-body">
                    <div class="chart-pie pt-4 pb-2">
                        <canvas id="regionDoughnutChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Biểu đồ 2 -->
        <div class="col-xl-4 col-lg-4">
            <div class="card shadow mb-4">
                <!-- Card Header - Dropdown -->
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Số mẫu theo giới tính</h6>
                </div>
                <!-- Card Body -->
                <div class="card-body">
                    <div class="chart-pie pt-4 pb-2">
                        <canvas id="myPieChart"></canvas>
                    </div>

                </div>
            </div>
        </div>

        <!-- Biểu đồ 3 -->
        <div class="col-xl-4 col-lg-4">
            <div class="card shadow mb-4">
                <!-- Card Header - Dropdown -->
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Tình trạng hôn nhân</h6>
                </div>
                <!-- Card Body -->
                <div class="card-body">
                    <div class="chart-pie pt-4 pb-2">
                        <canvas id="maritalStatusDoughnutChart"></canvas>
                    </div>
                </div>
            </div>
        </div>



    </div>





    <div class="row">
        <!-- Cột chứa hai biểu đồ bên trái (chiếm 70% màn hình) -->
        <div class="col-md-8">
            <!-- Biểu đồ số dự án qua từng năm (biểu đồ đầu tiên) -->
            <div class="card shadow mb-4">
                <!-- Card Header - Dropdown -->
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Tổng số dự án qua từng năm</h6>
                </div>
                <!-- Card Body -->
                <div class="card-body">
                    <div class="chart-area">
                        <canvas id="myAreaChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Biểu đồ số lượng nam nữ (biểu đồ thứ hai) -->
            <div class="card shadow mb-4">
                <!-- Card Header - Dropdown -->
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Tổng số mẫu qua từng năm</h6>
                </div>
                <!-- Card Body -->
                <div class="card-body">
                    <div class="chart-pie pt-4 pb-2">
                        <canvas id="yearlyChart"></canvas>
                    </div>
                    <p>&emsp;</p>
                </div>
            </div>


        </div>

        <!-- Cột chứa bản đồ bên phải (chiếm 30% màn hình) -->
        <div class="col-md-4">
            <div class="card shadow mb-4" style="height: 100%;">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Bản đồ</h6>
                </div>
                <div class="card-body">
                    <!-- Chỗ để nhúng bản đồ của bạn ở đây -->
                    <div id="map" style="height: 100%;"></div>
                </div>
            </div>
            <p>&emsp;</p>
        </div>
        <p>&emsp;</p>
    </div>




    <div class="row">

        <!-- SL dự án qua từng năm  -->
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <!-- Card Header - Dropdown -->
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Độ tuổi đáp viên</h6>

                </div>
                <!-- Card Body -->
                <div class="card-body">
                    <div class="chart-area">
                        <canvas id="ageBarChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Số lượng nam nữ -->
        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4">
                <!-- Card Header - Dropdown -->
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Thành phần kinh tế</h6>

                </div>
                <!-- Card Body -->
                <div class="card-body">
                    <div class="chart-pie pt-4 pb-2">
                        <canvas id="classDoughnutChart"></canvas>
                    </div>
                    <p>&emsp;</p>
                </div>
            </div>
        </div>
    </div>


    <div class="row">
        <div class="col-12">
            <div class="card shadow mb-12">
                <!-- Card Header - Dropdown -->
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Các ngành hàng hiện có</h6>
                </div>
                <!-- Card Body -->
                <div class="card-body">
                    <div class="chart-area">
                        <canvas id="nganhhangSectorChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>










    <!-- Bootstrap core JavaScript-->




    <script src="~/trangadmin/accses/vendor/jquery/jquery.js"></script>
    <script src="~/trangadmin/accses/vendor/jquery/jquery.min.js"></script>
    <script src="~/trangadmin/accses/vendor/jquery/jquery.slim.js"></script>
    <script src="~/trangadmin/accses/vendor/jquery/jquery.slim.min.js"></script>


    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <!-- Core plugin JavaScript-->
    <script src="vendor/jquery-easing/jquery.easing.min.js"></script>
    <script src="~/trangadmin/accses/vendor/jquery-easing/jquery.easing.compatibility.js"></script>
    <script src="~/trangadmin/accses/vendor/jquery-easing/jquery.easing.js"></script>
    <script src="~/trangadmin/accses/vendor/jquery-easing/jquery.easing.min.js"></script>
    <!-- Custom scripts for all pages-->
    <script src="js/sb-admin-2.min.js"></script>
    <script src="~/trangadmin/accses/js/sb-admin-2.js"></script>
    <script src="~/trangadmin/accses/js/sb-admin-2.min.js"></script>
    <!-- Page level plugins -->
    <script src="vendor/chart.js/Chart.min.js"></script>
    <script src="~/trangadmin/accses/vendor/chart.js/chart.min.js"></script>
    <!-- Page level custom scripts -->
    <!-- Thêm thư viện html2image.js -->
    <!-- Đoạn mã JavaScript của bạn -->










    <script>




        // Đóng dropdown khi click bên ngoài
        document.addEventListener('click', function (event) {
            const isClickInside = event.target.closest('.custom-multi-select');
            if (!isClickInside) {
                document.querySelectorAll('.dropdown-options').forEach(dropdown => {
                    dropdown.style.display = 'none';
                });
            }
        });

        // Thêm sự kiện thay đổi cho các checkbox trong mỗi dropdown
        document.querySelectorAll('.custom-multi-select').forEach(container => {
            container.querySelectorAll('.dropdown-options input[type="checkbox"]').forEach(checkbox => {
                checkbox.addEventListener('change', function () {
                    const selectedCheckboxes = Array.from(container.querySelectorAll('input[type="checkbox"]:checked'));
                    const selectedOptions = selectedCheckboxes.map(input => input.value);

                    // Đặt giới hạn hiển thị
                    const displayText = selectedOptions.length > 1
                        ? `${selectedOptions.length} mục được chọn`
                        : selectedOptions.join(', ');

                    container.querySelector('.selected-options').textContent = displayText || container.querySelector('.selected-options').dataset.placeholder;
                });
            });
        });


        function toggleDropdown(element) {
            const dropdown = element.nextElementSibling;
            dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
        }


        function Bac() {
            toggleCheckbox('idBacGiang');
            toggleCheckbox('idBacKan');
            toggleCheckbox('idBacNinh');
            toggleCheckbox('idCaoBang');
            toggleCheckbox('idDienBien');
            toggleCheckbox('idHaGiang');
            toggleCheckbox('idHaNam');
            toggleCheckbox('idHaNoi');
            toggleCheckbox('idHaiDuong');
            toggleCheckbox('idHaiPhong');
            toggleCheckbox('idHoaBinh');
            toggleCheckbox('idHungYen');
            toggleCheckbox('idLaiChau');
            toggleCheckbox('idLaoCai');
            toggleCheckbox('idNamDinh');
            toggleCheckbox('idNinhBinh');
            toggleCheckbox('idPhuTho');
            toggleCheckbox('idQuangNinh');
            toggleCheckbox('idSonLa');
            toggleCheckbox('idThaiBinh');
            toggleCheckbox('idThaiNguyen');
            toggleCheckbox('idTuyenQuang');
            toggleCheckbox('idVinhPhuc');
            toggleCheckbox('idLangSon');
            toggleCheckbox('idYenBai');

        }

        function Trung() {
            toggleCheckbox('idBinhDinh');
            toggleCheckbox('idDaNang');
            toggleCheckbox('idDakLak');
            toggleCheckbox('idDakNong');
            toggleCheckbox('idGiaLai');
            toggleCheckbox('idHaTinh');
            toggleCheckbox('idKhanhHoa');
            toggleCheckbox('idKonTum');
            toggleCheckbox('idNgheAn');
            toggleCheckbox('idPhuYen');
            toggleCheckbox('idThanhHoa');
            toggleCheckbox('idQuangBinh');
            toggleCheckbox('idQuangNam');
            toggleCheckbox('idQuangNgai');
            toggleCheckbox('idQuangTri');
            toggleCheckbox('idThuaThienHue');
        }

        function Nam() {
            toggleCheckbox('idAnGiang');
            toggleCheckbox('idBaRiaVungTau');
            toggleCheckbox('idBacLieu');
            toggleCheckbox('idBenTre');
            toggleCheckbox('idBinhDuong');
            toggleCheckbox('idBinhPhuoc');
            toggleCheckbox('idBinhThuan');
            toggleCheckbox('idCaMau');
            toggleCheckbox('idCanTho');
            toggleCheckbox('idDongNai');
            toggleCheckbox('idDongThap');
            toggleCheckbox('idHauGiang');
            toggleCheckbox('idHoChiMinh');
            toggleCheckbox('idKienGiang');
            toggleCheckbox('idLamDong');
            toggleCheckbox('idLongAn');
            toggleCheckbox('idNinhThuan');
            toggleCheckbox('idSocTrang');
            toggleCheckbox('idTayNinh');
            toggleCheckbox('idTienGiang');
            toggleCheckbox('idTraVinh');
            toggleCheckbox('idVinhLong');
        }

        // Hàm để kiểm tra và thay đổi trạng thái của checkbox
        function toggleCheckbox(id) {
            var checkbox = document.getElementById(id);
            checkbox.checked = !checkbox.checked;  // Đảo ngược trạng thái của checkbox
        }

        function toggleAgeSelection(groupCheckbox) {
            const startAge = parseInt(groupCheckbox.getAttribute('data-start-age'));
            const endAge = parseInt(groupCheckbox.getAttribute('data-end-age'));

            // Lấy tất cả các checkbox trong nhóm tuổi này
            const ageCheckboxes = document.querySelectorAll(`input[name="age"]`);

            ageCheckboxes.forEach(checkbox => {
                const age = parseInt(checkbox.value);
                if (age >= startAge && age <= endAge) {
                    checkbox.checked = groupCheckbox.checked; // Đánh dấu tất cả các checkbox trong nhóm
                }
            });
        }

        // Khi form được gửi, thu thập tất cả các giá trị đã chọn
        document.querySelectorAll('form').forEach(form => {
            form.addEventListener('submit', function () {
                const selectedAges = [];

                // Lấy tất cả các checkbox đã chọn và thu thập giá trị
                document.querySelectorAll('input[name="age"]:checked').forEach(checkedCheckbox => {
                    selectedAges.push(checkedCheckbox.value);
                });

                // Gửi các giá trị đã chọn qua form
                console.log(selectedAges); // selectedAges chứa các giá trị tuổi đã chọn, ví dụ: [10, 11, 12, 13, 14, 15]
            });
        });



        Chart.defaults.global.defaultFontFamily = 'Nunito', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
        Chart.defaults.global.defaultFontColor = '#858796';

        function number_format(number, decimals, dec_point, thousands_sep) {
            number = (number + '').replace(',', '').replace(' ', '');
            var n = !isFinite(+number) ? 0 : +number,
                prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
                sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
                dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
                s = '',
                toFixedFix = function (n, prec) {
                    var k = Math.pow(10, prec);
                    return '' + Math.round(n * k) / k;
                };
            s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
            if (s[0].length > 3) {
                s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
            }
            if ((s[1] || '').length < prec) {
                s[1] = s[1] || '';
                s[1] += new Array(prec - s[1].length + 1).join('0');
            }
            return s.join(dec);
        }



        var yearLabels = @Html.Raw(Json.Serialize(ViewBag.YearLabels));
        var yearData = @Html.Raw(Json.Serialize(ViewBag.YearData));

        // Tạo biểu đồ cột (Bar chart)
        var ctx = document.getElementById('yearlyChart').getContext('2d');
        var yearlyChart = new Chart(ctx, {
            type: 'line', // Loại biểu đồ: đường
            data: {
                labels: yearLabels, // Sử dụng nhãn từ ViewBag.YearLabels
                datasets: [{
                    label: "Tổng số mẫu qua từng năm", // Tiêu đề
                    lineTension: 0.3,
                    backgroundColor: "rgba(255, 140, 0, 0.1)", // Màu nền cam đậm hơn với độ trong suốt
                    borderColor: "rgba(255, 140, 0, 1)", // Màu đường kẻ cam đậm
                    pointRadius: 3,
                    pointBackgroundColor: "rgba(255, 140, 0, 1)", // Màu nền của điểm cam đậm
                    pointBorderColor: "rgba(255, 140, 0, 1)", // Màu viền của điểm cam đậm
                    pointHoverRadius: 3,
                    pointHoverBackgroundColor: "rgba(255, 140, 0, 1)", // Màu nền khi hover cam đậm
                    pointHoverBorderColor: "rgba(255, 140, 0, 1)", // Màu viền khi hover cam đậm
                    pointHitRadius: 10,
                    pointBorderWidth: 2,

                    data: yearData, // Sử dụng dữ liệu từ ViewBag.YearDataProject
                }],
            },
            options: {
                maintainAspectRatio: false,
                layout: {
                    padding: {
                        left: 10,
                        right: 25,
                        top: 25,
                        bottom: 0
                    }
                },
                scales: {
                    xAxes: [{
                        time: {
                            unit: 'year'
                        },
                        gridLines: {
                            display: true,
                            drawBorder: true
                        },
                        ticks: {
                            maxTicksLimit: 100
                        }
                    }],
                    yAxes: [{
                        ticks: {
                            maxTicksLimit: 5,
                            padding: 10,
                            callback: function (value, index, values) {
                                return number_format(value);
                            }
                        },
                        gridLines: {
                            color: "rgb(234, 236, 244)",
                            zeroLineColor: "rgb(234, 236, 244)",
                            drawBorder: false,
                            borderDash: [2],
                            zeroLineBorderDash: [2]
                        }
                    }],
                },
                legend: {
                    display: false
                },
                tooltips: {
                    backgroundColor: "rgb(255,255,255)",
                    bodyFontColor: "#858796",
                    titleMarginBottom: 10,
                    titleFontColor: '#6e707e',
                    titleFontSize: 14,
                    borderColor: '#dddfeb',
                    borderWidth: 1,
                    xPadding: 15,
                    yPadding: 15,
                    displayColors: false,
                    intersect: false,
                    mode: 'index',
                    caretPadding: 10,
                    callbacks: {
                        label: function (tooltipItem, chart) {
                            var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
                            return datasetLabel + ': ' + number_format(tooltipItem.yLabel);
                        }
                    }
                }
            }
        });
        //tổng số dự án theo năm
        // Lấy dữ liệu từ ViewBag
        // Tùy chỉnh font mặc định và màu sắc theo Bootstrap
        Chart.defaults.global.defaultFontFamily = 'Nunito', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
        Chart.defaults.global.defaultFontColor = '#858796';

        function number_format(number, decimals, dec_point, thousands_sep) {
            number = (number + '').replace(',', '').replace(' ', '');
            var n = !isFinite(+number) ? 0 : +number,
                prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
                sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
                dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
                s = '',
                toFixedFix = function (n, prec) {
                    var k = Math.pow(10, prec);
                    return '' + Math.round(n * k) / k;
                };
            s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
            if (s[0].length > 3) {
                s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
            }
            if ((s[1] || '').length < prec) {
                s[1] = s[1] || '';
                s[1] += new Array(prec - s[1].length + 1).join('0');
            }
            return s.join(dec);
        }

        // Area Chart Example (Tích hợp dữ liệu từ chart đầu tiên)
        var yearLabels1 = @Html.Raw(Json.Serialize(ViewBag.YearLabelsProject)); // Dữ liệu nhãn (từng năm)
        var yearData1 = @Html.Raw(Json.Serialize(ViewBag.YearDataProject)); // Dữ liệu số lượng dự án riêng biệt theo năm

        var ctx = document.getElementById("myAreaChart");
        var myLineChart = new Chart(ctx, {
            type: 'line', // Loại biểu đồ: đường
            data: {
                labels: yearLabels1, // Sử dụng nhãn từ ViewBag.YearLabelsProject
                datasets: [{
                    label: "Tổng số dự án qua từng năm", // Tiêu đề
                    lineTension: 0.3,
                    backgroundColor: "rgba(78, 115, 223, 0.05)", // Màu nền
                    borderColor: "rgba(78, 115, 223, 1)", // Màu đường kẻ
                    pointRadius: 3,
                    pointBackgroundColor: "rgba(78, 115, 223, 1)",
                    pointBorderColor: "rgba(78, 115, 223, 1)",
                    pointHoverRadius: 3,
                    pointHoverBackgroundColor: "rgba(78, 115, 223, 1)",
                    pointHoverBorderColor: "rgba(78, 115, 223, 1)",
                    pointHitRadius: 10,
                    pointBorderWidth: 2,
                    data: yearData1, // Sử dụng dữ liệu từ ViewBag.YearDataProject
                }],
            },
            options: {
                maintainAspectRatio: false,
                layout: {
                    padding: {
                        left: 10,
                        right: 25,
                        top: 25,
                        bottom: 0
                    }
                },
                scales: {
                    xAxes: [{
                        time: {
                            unit: 'year'
                        },
                        gridLines: {
                            display: true,
                            drawBorder: true
                        },
                        ticks: {
                            maxTicksLimit: 100
                        }
                    }],
                    yAxes: [{
                        ticks: {
                            maxTicksLimit: 5,
                            padding: 10,
                            callback: function (value, index, values) {
                                return number_format(value);
                            }
                        },
                        gridLines: {
                            color: "rgb(234, 236, 244)",
                            zeroLineColor: "rgb(234, 236, 244)",
                            drawBorder: false,
                            borderDash: [2],
                            zeroLineBorderDash: [2]
                        }
                    }],
                },
                legend: {
                    display: false
                },
                tooltips: {
                    backgroundColor: "rgb(255,255,255)",
                    bodyFontColor: "#858796",
                    titleMarginBottom: 10,
                    titleFontColor: '#6e707e',
                    titleFontSize: 14,
                    borderColor: '#dddfeb',
                    borderWidth: 1,
                    xPadding: 15,
                    yPadding: 15,
                    displayColors: false,
                    intersect: false,
                    mode: 'index',
                    caretPadding: 10,
                    callbacks: {
                        label: function (tooltipItem, chart) {
                            var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
                            return datasetLabel + ': ' + number_format(tooltipItem.yLabel);
                        }
                    }
                }
            }
        });


        //gender
        Chart.defaults.global.defaultFontFamily = 'Nunito, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif';
        Chart.defaults.global.defaultFontColor = '#858796';


        // Lấy dữ liệu từ ViewBag
        var maleCount = @ViewBag.MaleCount;
        var femaleCount = @ViewBag.FemaleCount;
        var undefinedCount = @ViewBag.UndefinedCount;

        // Tính tổng số mẫu
        var totalCount = maleCount + femaleCount + undefinedCount;

        // Tính tỷ lệ phần trăm cho từng nhóm
        var malePercent = ((maleCount / totalCount) * 100).toFixed(2);
        var femalePercent = ((femaleCount / totalCount) * 100).toFixed(2);
        var undefinedPercent = ((undefinedCount / totalCount) * 100).toFixed(2);

        // Cấu hình biểu đồ Doughnut
        var ctx2 = document.getElementById('myPieChart').getContext('2d');
        var genderDoughnutChart = new Chart(ctx2, {
            type: 'doughnut',
            data: {
                labels: ['Nam (' + malePercent + '%)', 'Nữ (' + femalePercent + '%)', 'Không xác định (' + undefinedPercent + '%)'],
                datasets: [{
                    label: 'Giới tính',
                    data: [maleCount, femaleCount, undefinedCount],
                    backgroundColor: ['#4e73df', '#1cc88a', '#36b9cc'],
                    hoverBackgroundColor: ['#2e59d9', '#17a673', '#2c9faf'],
                    hoverBorderColor: "rgba(234, 236, 244, 1)",
                }]
            },
            options: {
                maintainAspectRatio: false,
                responsive: true,
                tooltips: {
                    backgroundColor: "rgb(255,255,255)",
                    bodyFontColor: "#858796",
                    borderColor: '#dddfeb',
                    borderWidth: 1,
                    xPadding: 15,
                    yPadding: 15,
                    displayColors: false,
                    caretPadding: 10,
                    callbacks: {
                        label: function (tooltipItem, data) {
                            var value = data.datasets[0].data[tooltipItem.index]; // Lấy giá trị
                            var percentage = ((value / totalCount) * 100).toFixed(2); // Tính tỷ lệ phần trăm
                            return data.labels[tooltipItem.index] + ': ' + value + ' mẫu (' + percentage + '%)';
                        }
                    }
                },
                legend: {
                    display: true, // Hiển thị chú thích
                    position: 'top' // Đặt ở trên cùng
                },
                cutoutPercentage: 60, // Phần rỗng ở giữa biểu đồ
            },
        });

        //tổng số mẫu 3 miền
        // Lấy dữ liệu từ ViewBag
        var northernCount = @ViewBag.NorthernSampleCount;
        var centralCount = @ViewBag.CentralSampleCount;
        var southernCount = @ViewBag.SouthernSampleCount;

        // Tính tổng số mẫu
        var totalCount = northernCount + centralCount + southernCount;

        // Tính tỷ lệ phần trăm cho từng khu vực
        var northernPercent = ((northernCount / totalCount) * 100).toFixed(2);
        var centralPercent = ((centralCount / totalCount) * 100).toFixed(2);
        var southernPercent = ((southernCount / totalCount) * 100).toFixed(2);

        // Cấu hình biểu đồ Doughnut
        // Cấu hình biểu đồ Doughnut
        var ctx = document.getElementById('regionDoughnutChart').getContext('2d');
        var regionDoughnutChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: [
                    'Miền Bắc (' + northernPercent + '%)',
                    'Miền Trung (' + centralPercent + '%)',
                    'Miền Nam (' + southernPercent + '%)'
                ],
                datasets: [{
                    label: 'Mẫu theo khu vực',
                    data: [northernCount, centralCount, southernCount],
                    backgroundColor: ['#4e73df', '#1cc88a', '#36b9cc', '#a885f5', '#ffe082', '#6ed5e0'],
                    hoverBackgroundColor: ['#2e59d9', '#17a673', '#2c9faf', '#9570eb', '#ffd452', '#4dbcc7'],

                    hoverOffset: 4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                var value = tooltipItem.raw;
                                var percentage = ((value / totalCount) * 100).toFixed(2);
                                return tooltipItem.label + ': ' + value + ' (' + percentage + '%)';
                            }
                        }
                    }
                },
                cutoutPercentage: 60, // Điều chỉnh phần rỗng (60% chiều rộng biểu đồ)
            }
        });






        var nganhhangLabels = @Html.Raw(Json.Serialize(ViewBag.nganhLabels));
        var nganhhangData = @Html.Raw(Json.Serialize(ViewBag.nganhData));

        var ctx = document.getElementById('nganhhangSectorChart').getContext('2d');
        var nganhhangSectorChart = new Chart(ctx, {
            type: 'line',  // Giữ kiểu Line
            data: {
                labels: nganhhangLabels,
                datasets: [{
                    label: 'Số lượng mẫu của các ngành hàng',
                    data: nganhhangData,
                    fill: true,  // Bật chế độ fill để tạo thành diện tích
                    backgroundColor: "rgba(255, 140, 0, 0.1)", // Màu nền cam đậm hơn với độ trong suốt
                    borderColor: "rgba(255, 140, 0, 1)", // Màu đường kẻ cam đậm
                    pointRadius: 3,
                    pointBackgroundColor: "rgba(255, 140, 0, 1)", // Màu nền của điểm cam đậm
                    pointBorderColor: "rgba(255, 140, 0, 1)", // Màu viền của điểm cam đậm
                    pointHoverRadius: 3,
                    pointHoverBackgroundColor: "rgba(255, 140, 0, 1)", // Màu nền khi hover cam đậm
                    pointHoverBorderColor: "rgba(255, 140, 0, 1)", // Màu viền khi hover cam đậm
                    pointHitRadius: 10,
                    pointBorderWidth: 2,  // Điều chỉnh độ cong của đường
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {

                        beginAtZero: true,
                        ticks: {
                            autoSkip: true,  // Tự động bỏ qua nhãn nếu quá nhiều
                        }
                    },
                    y: {
                        beginAtZero: true,  // Đảm bảo trục Y bắt đầu từ 0
                        ticks: {
                            stepSize: 10  // Đặt bước nhảy cho trục Y để làm rõ hơn sự thay đổi
                        }
                    }
                },
                elements: {
                    line: {
                        tension: 0.4,  // Điều chỉnh độ cong đường, tạo cảm giác mượt mà hơn
                    }
                }
            }
        });















        var maritalStatusLabels = @Html.Raw(Json.Serialize(ViewBag.MaritalStatusLabels));
        var maritalStatusData = @Html.Raw(Json.Serialize(ViewBag.MaritalStatusData));

        // Tính tổng số mẫu
        var totalCount = maritalStatusData.reduce(function (sum, value) {
            return sum + value;
        }, 0);

        // Cấu hình biểu đồ Doughnut
        var ctx = document.getElementById('maritalStatusDoughnutChart').getContext('2d');
        var maritalStatusDoughnutChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: maritalStatusLabels.map(function (label, index) {
                    // Tính tỷ lệ phần trăm cho từng phần và thêm vào nhãn
                    var percentage = ((maritalStatusData[index] / totalCount) * 100).toFixed(2);
                    return label + ' (' + percentage + '%)';
                }),
                datasets: [{
                    data: maritalStatusData,
                    backgroundColor: ['#f66d9b', '#f6c23e', '#6f42c1', '#36b9cc'],
                    hoverBackgroundColor: ['#e34d7e', '#f4b000', '#5a33a0', '#36b9cc'],
                }]
            },
            options: {
                maintainAspectRatio: false,
                responsive: true,
                cutoutPercentage: 60, // Thêm phần cắt giữa biểu đồ (tạo vòng tròn)
                plugins: {
                    legend: {
                        position: 'top',
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                var value = tooltipItem.raw;
                                // Tính phần trăm trong tooltip
                                var percentage = ((value / totalCount) * 100).toFixed(2);
                                return tooltipItem.label + ': ' + value + ' (' + percentage + '%)';
                            }
                        }
                    },
                    datalabels: {
                        // Hàm tính phần trăm cho từng phần của biểu đồ
                        formatter: function (value, ctx) {
                            var percentage = ((value / totalCount) * 100).toFixed(2); // Tính phần trăm
                            return percentage + '%'; // Trả về phần trăm
                        },
                        color: '#fff', // Màu chữ của phần trăm
                        font: {
                            weight: 'bold',
                            size: 14
                        }
                    }
                }
            }
        });











        var ageLabels = @Html.Raw(Json.Serialize(ViewBag.ageLabels)); // Nhãn trục
        var ageData = @Html.Raw(Json.Serialize(ViewBag.ageData)); // Dữ liệu

        // Biểu đồ thứ hai
        var ctx2 = document.getElementById("ageBarChart").getContext('2d');
        var myBarChart = new Chart(ctx2, {
            type: 'bar', // Dạng biểu đồ (cột dọc)
            data: {
                labels: ageLabels, // Sử dụng nhãn từ chart 1
                datasets: [{
                    label: 'Số lượng mẫu theo khoảng tuổi ', // Tiêu đề khác
                    backgroundColor: "#4e73df", // Màu nền
                    hoverBackgroundColor: "#2e59d9", // Màu hover
                    borderColor: "#4e73df", // Màu viền
                    data: ageData // Sử dụng dữ liệu từ chart 1
                }]
            },
            options: {
                maintainAspectRatio: false,
                layout: {
                    padding: {
                        left: 10,
                        right: 25,
                        top: 25,
                        bottom: 0
                    }
                },
                scales: {
                    xAxes: [{
                        gridLines: {
                            display: false,
                            drawBorder: false
                        },
                        ticks: {
                            maxTicksLimit: 100,
                        },
                        maxBarThickness: 25,
                    }],
                    yAxes: [{
                        ticks: {
                            min: 0,
                            max: Math.max(...ageData) + 5, // Đặt giá trị tối đa lớn hơn một chút
                            maxTicksLimit: 7,
                            padding: 10,
                            callback: function (value, index, values) {
                                return value; // Không cần định dạng đặc biệt
                            }
                        },
                        gridLines: {
                            color: "rgb(234, 236, 244)",
                            zeroLineColor: "rgb(234, 236, 244)",
                            drawBorder: false,
                            borderDash: [2],
                            zeroLineBorderDash: [2]
                        }
                    }],
                },
                legend: {
                    display: true // Hiển thị chú thích
                },
                tooltips: {
                    titleMarginBottom: 10,
                    titleFontColor: '#6e707e',
                    titleFontSize: 14,
                    backgroundColor: "rgb(255,255,255)",
                    bodyFontColor: "#858796",
                    borderColor: '#dddfeb',
                    borderWidth: 1,
                    xPadding: 15,
                    yPadding: 15,
                    displayColors: false,
                    caretPadding: 10,
                    callbacks: {
                        label: function (tooltipItem, chart) {
                            var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
                            return datasetLabel + ': ' + tooltipItem.yLabel;
                        }
                    }
                }
            }
        });


        var classLabels = @Html.Raw(Json.Serialize(ViewBag.classLabels));
        var classData = @Html.Raw(Json.Serialize(ViewBag.classData));



        // Lấy ngữ cảnh của canvas
        var ctx = document.getElementById('classDoughnutChart').getContext('2d');

        // Tạo biểu đồ Doughnut
        var classDoughnutChart = new Chart(ctx, {
            type: 'doughnut',  // Chọn loại biểu đồ Doughnut
            data: {
                labels: classLabels,  // Nhãn từ ViewBag.classLabels
                datasets: [{
                    label: 'Số lượng theo nghề nghiệp',  // Tiêu đề cho biểu đồ
                    data: classData,  // Dữ liệu từ ViewBag.classData
                    backgroundColor: ['#4e73df', '#1cc88a', '#36b9cc', '#a885f5', '#ffe082', '#6ed5e0', '#f66d9b', '#f6c23e', '#6f42c1'],
                    hoverBackgroundColor: ['#2e59d9', '#17a673', '#2c9faf', '#9570eb', '#ffd452', '#4dbcc7', '#e34d7e', '#f4b000', '#5a33a0'],

                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutoutPercentage: 60,// Làm cho biểu đồ phản hồi linh hoạt với kích thước màn hình
                plugins: {
                    legend: {
                        position: 'top',  // Đặt vị trí legend (chú thích)
                    },
                    tooltip: {
                        enabled: true,  // Kích hoạt tooltip khi hover vào phần tử
                        callbacks: {
                            // Cập nhật tooltip để hiển thị phần trăm
                            label: function (tooltipItem) {
                                var dataset = tooltipItem.dataset;
                                var data = dataset.data[tooltipItem.dataIndex];
                                var percentage = Math.round((data / total) * 100);  // Tính phần trăm
                                return classLabels[tooltipItem.dataIndex] + ': ' + data + ' (' + percentage + '%)';
                            }
                        }
                    },
                    datalabels: {
                        // Hiển thị phần trăm trên biểu đồ
                        formatter: function (value, context) {
                            var percentage = Math.round((value / total) * 100);  // Tính phần trăm
                            return percentage + '%';  // Hiển thị phần trăm
                        },
                        color: 'white',  // Màu chữ của phần trăm
                        font: {
                            weight: 'bold',
                            size: 14
                        },
                        display: function (context) {
                            return context.dataset.data[context.dataIndex] !== 0;  // Chỉ hiển thị phần trăm nếu giá trị không phải là 0
                        }
                    }
                }
            }
        });




        // Dữ liệu tỉnh và số mẫu từ ViewBag


        var provinceData = @Html.Raw(ViewBag.ProvinceData);

        // Tạo bản đồ với trung tâm là Hà Nội
        var map = L.map('map').setView([21.0285, 105.8542], 6);

        // Thêm TileLayer từ OpenStreetMap
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // Tọa độ các tỉnh
        var provinceLocations = {
            'HÀ NỘI': [21.023901883570478, 105.83329023830339],
            'HỒ CHÍ MINH': [10.8231, 106.6297],
            'AN GIANG': [10.521583, 105.125896],
            'BÀ RỊA VŨNG TÀU': [10.541739, 107.242997],
            'BẮC GIANG': [21.273737, 106.194465],
            'BẮC KẠN': [22.145647, 105.834159],
            'BẠC LIÊU': [9.294054, 105.724421],
            'BẮC NINH': [21.186080, 106.076431],
            'BẾN TRE': [10.23345, 106.37539],
            'BÌNH ĐỊNH': [14.167448, 108.902576],
            'BÌNH DƯƠNG': [11.159952, 106.676430],
            'BÌNH PHƯỚC': [11.751189, 106.723463],
            'BÌNH THUẬN': [10.980746, 108.261477],
            'CÀ MAU': [9.152498, 105.196428],
            'CẦN THƠ': [10.045162, 105.746857],
            'CAO BẰNG': [22.665741, 106.257194],
            'ĐÀ NẴNG': [16.054407, 108.202167],
            'ĐẮK LẮK': [12.710011, 108.237751],
            'ĐẮK NÔNG': [12.264648, 107.609809],
            'ĐIỆN BIÊN': [21.386020, 103.023052],
            'ĐỒNG NAI': [11.058834, 107.042191],
            'ĐỒNG THÁP': [10.499997, 105.632644],
            'GIA LAI': [13.965614, 108.017035],
            'HÀ GIANG': [22.802558, 104.978449],
            'HÀ NAM': [20.583519, 105.92299],
            'HÀ TĨNH': [18.355931, 105.887749],
            'HẢI DƯƠNG': [20.940990, 106.333017],
            'HẢI PHÒNG': [20.844911, 106.688084],
            'HẬU GIANG': [9.784312, 105.470163],
            'HÒA BÌNH': [20.857262, 105.337327],
            'HƯNG YÊN': [20.646369, 106.051053],
            'KHÁNH HÒA': [12.227246, 109.192765],
            'KIÊN GIANG': [10.015092, 105.080169],
            'KON TUM': [14.354524, 108.007732],
            'LAI CHÂU': [22.380029, 103.470507],
            'LÂM ĐỒNG': [11.575279, 107.722743],
            'LẠNG SƠN': [21.845741, 106.757996],
            'LÀO CAI': [22.338086, 103.978455],
            'LONG AN': [10.535865, 106.438030],
            'NAM ĐỊNH': [20.438822, 106.162106],
            'NGHỆ AN': [19.333333, 104.883333],
            'NINH BÌNH': [20.254060, 105.975296],
            'NINH THUẬN': [11.564636, 108.988579],
            'PHÚ THỌ': [21.320636, 105.199561],
            'PHÚ YÊN': [13.088186, 109.092876],
            'QUẢNG BÌNH': [17.610271, 106.348747],
            'QUẢNG NAM': [15.573436, 108.474098],
            'QUẢNG NGÃI': [15.120471, 108.792318],
            'QUẢNG NINH': [21.006382, 107.292514],
            'QUẢNG TRỊ': [16.750351, 107.190225],
            'SÓC TRĂNG': [9.603215, 105.973678],
            'SƠN LA': [21.328545, 103.914387],
            'TÂY NINH': [11.335225, 106.142896],
            'THÁI BÌNH': [20.446348, 106.337803],
            'THÁI NGUYÊN': [21.592820, 105.848034],
            'THANH HÓA': [19.806692, 105.777763],
            'THỪA THIÊN HUẾ': [16.449800, 107.562350],
            'TIỀN GIANG': [10.449332, 106.342050],
            'TRÀ VINH': [9.934870, 106.345151],
            'TUYÊN QUANG': [21.823870, 105.214046],
            'VĨNH LONG': [10.253928, 105.972516],
            'VĨNH PHÚC': [21.355380, 105.549573],
            'YÊN BÁI': [21.722880, 104.911116]

        };

        // Thêm marker cho từng tỉnh
        provinceData.forEach(function (item) {
            var province = item.City;
            var count = item.SampleCount;

            if (provinceLocations[province]) {
                // Đánh dấu vị trí tỉnh và thêm thông tin số mẫu
                var marker = L.marker(provinceLocations[province]).addTo(map);
                marker.bindPopup("<strong>" + province + "</strong><br>Số mẫu: " + count);
            } else {
                console.log("Không tìm thấy tọa độ cho tỉnh: " + province);
            }
        });
        //dropdown search trong multi box

        function filterOptions(input) {
            const filter = input.value.toLowerCase();
            const dropdown = input.closest('.dropdown-options'); // Tìm dropdown chứa ô input
            const options = dropdown.querySelectorAll('label'); // Lấy tất cả các label trong dropdown

            options.forEach(option => {
                const text = option.textContent || option.innerText;
                if (text.toLowerCase().indexOf(filter) > -1) {
                    option.style.display = ""; // Hiển thị nếu khớp
                } else {
                    option.style.display = "none"; // Ẩn nếu không khớp
                }
            });
        }















    </script>








</body>

</html>