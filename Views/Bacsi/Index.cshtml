@model IEnumerable<CIResearch.Models.ALLDATA>
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";



}




<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel</title>
    <meta name="keywords" content="">
    <meta name="description" content="">
    <meta name="author" content="">
    <!-- bootstrap css -->
    <link href="~/css(4u)/bootstrap.min.css" rel="stylesheet" />
    <!-- style css -->

    <link href="~/css(4u)/style.css" rel="stylesheet" />
    <!-- Responsive-->
    <link href="~/css(4u)/responsive.css" rel="stylesheet" />
    <!-- fevicon -->
    <link rel="icon" href="images/fevicon.png" type="image/gif" />
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css">

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom"></script>
    <script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>



    <link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'>
    <style>
        .table td, .table th {
            white-space: nowrap;
            text-align: center;
            vertical-align: middle;
        }

        .table-responsive {
            overflow-x: auto;
        }

        .admin-page {
            display: flex;
        }

        .sidebar {
            width: 200px;
            background-color: #f4f4f4;
            padding: 20px;
        }

        .content {
            flex: 1;
            padding: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
        }

        .filter-select {
            width: 100%;
            padding: 5px;
            box-sizing: border-box;
            margin-bottom: 10px; /* Thêm khoảng cách giữa các dropdown */
        }

        .filter-form {
            margin-bottom: 20px;
        }

        .custom-multi-select {
            position: relative;
            width: 190px;
        }

        .select-box {
            padding: 10px;
            border: 1px solid #ccc;
            cursor: pointer;
            background-color: #fff;
            position: relative;
        }

        .selected-options {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .arrow {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            border: solid #666;
            border-width: 0 2px 2px 0;
            padding: 3px;
            transform: rotate(45deg);
        }

        .dropdown-options {
            display: none;
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background-color: #fff;
            border: 1px solid #ccc;
            max-height: 150px;
            overflow-y: auto;
            z-index: 1;
        }

        .filter-select {
            width: 100%;
            padding: 5px;
            box-sizing: border-box;
            margin-bottom: 10px; /* Thêm khoảng cách giữa các dropdown */
        }

        .filter-form {
            margin-bottom: 20px;
        }

        .custom-multi-select {
            position: relative;
            width: 215px;
            margin: 0 auto;
        }

        .select-box {
            padding: 10px;
            border: 1px solid #ccc;
            cursor: pointer;
            background-color: #fff;
            position: relative;
        }



        .selected-options {
            width: 100%; /* Đặt độ rộng tối đa cho ô hiển thị */
            overflow: hidden; /* Ẩn phần văn bản bị tràn */
            text-overflow: ellipsis; /* Hiển thị dấu ... khi văn bản quá dài */
            white-space: nowrap; /* Ngăn không cho văn bản xuống dòng */
        }



        .dropdown-options label {
            display: block;
            padding: 5px;
            cursor: pointer;
        }

            .dropdown-options label:hover {
                background-color: #f0f0f0;
            }
    </style>
</head>
<body>



    @if (TempData["ErrorMessage"] != null)
    {
        <div style="color: red; background-color: #ffebee; padding: 10px;">
            @TempData["ErrorMessage"]
        </div>
    }




    @if (TempData["SuccessMessage"] != null)
    {
        <div style="color: green; font-weight: bold;">
            @TempData["SuccessMessage"]
        </div>
    }




    <h1>Danh sách thông tin dự án</h1>
    <P>        &nbsp     </P>


    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h5 class="m-0 font-weight-bold text-primary">
                Tìm kiếm <button class="btn btn-link toggle-button" onclick="toggleForm()">&#9660;</button>
            </h5>
        </div>
        <div class="card-body" id="formContent" style="display: none;">
            <div class="table-responsive">


                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">

                    <!-- Google Translate -->
                    <div id="google_translate_element"></div>
                    <script type="text/javascript">
                        function googleTranslateElementInit() {
                            new google.translate.TranslateElement({
                                pageLanguage: 'vi',
                                includedLanguages: 'vi,en,fr,es,de,ja',
                                layout: google.translate.TranslateElement.InlineLayout.SIMPLE
                            }, 'google_translate_element');
                        }
                    </script>
                    <script src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>

                    <form method="get" action="@Url.Action("Index", "Bacsi")" class="filter-form">
                        <div style="display: flex; flex-wrap: wrap; gap: 10px;">

                            <div class="custom-multi-select">
                                <div class="select-box" onclick="toggleDropdown(this)">
                                    <span class="selected-options" data-placeholder="Mã dự án">Mã dự án</span>
                                    <i class="arrow"></i>
                                </div>
                                <div class="dropdown-options" onchange="limitSelection(this, 10)">
                                    <input type="text" class="search-box" placeholder="Tìm kiếm dự án" oninput="filterOptions(this)">
                                    @foreach (var code in ViewBag.CodeList as List<string>)
                                    {
                                        <label>
                                            <input type="checkbox" name="code" value="@code" @(ViewBag.Code?.Contains(code) == true ? "checked" : "") /> @code
                                        </label>
                                    }
                                </div>
                            </div>


                            <!-- Project Name Multi-select -->
                            <div class="custom-multi-select">
                                <div class="select-box" onclick="toggleDropdown(this)">
                                    <span class="selected-options" data-placeholder="Tên dự án">Tên dự án</span>
                                    <i class="arrow"></i>
                                </div>
                                <div class="dropdown-options" onchange="limitSelection(this, 10)">
                                    <input type="text" class="search-box" placeholder="Tìm kiếm dự án" oninput="filterOptions(this)">
                                    @foreach (var projectName in ViewBag.ProjectNameList as List<string>)
                                    {
                                        <label>
                                            <input type="checkbox" name="projectName" value="@projectName" @(ViewBag.Projectname?.Contains(projectName) == true ? "checked" : "") /> @projectName
                                        </label>
                                    }
                                </div>
                            </div>

                            <!-- Year Multi-select đây là số năm , của dự án -->
                            <!-- Year Multi-select -->
                            <div class="custom-multi-select">
                                <div class="select-box" onclick="toggleDropdown(this)">
                                    <span class="selected-options" data-placeholder="Năm">Năm</span>
                                    <i class="arrow"></i>
                                </div>
                                <div class="dropdown-options" onchange="limitSelection(this, 5)">
                                    <input type="text" class="search-box" placeholder="Tìm kiếm năm" oninput="filterOptions(this)">
                                    @foreach (var year in ViewBag.YearList as List<string>)
                                    {
                                        <label><input type="checkbox" name="year" value="@year" @(ViewBag.Year?.Contains(year) == true ? "checked" : "") /> @year</label>
                                    }
                                </div>
                            </div>

                      @*       <div class="custom-multi-select">
                                <div class="select-box" onclick="toggleDropdown(this)">
                                    <span class="selected-options" data-placeholder="Chọn vùng miền">Chọn vùng miền</span>
                                    <i class="arrow"></i>
                                </div>
                                <div class="dropdown-options" onchange="limitSelection(this, 10)">
                                    <label><input type="checkbox" name="region" value="Các tỉnh miền Bắc" onclick="Bac()" /> Các tỉnh miền Bắc</label>
                                    <label><input type="checkbox" name="region" value="Các tỉnh miền Trung" onclick="Trung()" /> Các tỉnh miền Trung</label>
                                    <label><input type="checkbox" name="region" value="Các tỉnh miền Nam" onclick="Nam()" /> Các tỉnh miền Nam</label>
                                </div>
                            </div> *@


                            <div class="custom-multi-select">
                                <div class="select-box" onclick="toggleDropdown(this)">
                                    <span class="selected-options" data-placeholder="Chọn tỉnh">Chọn tỉnh</span>
                                    <i class="arrow"></i>
                                </div>
                                <div class="dropdown-options" onchange="limitSelection(this, 10)">
                                    <input type="text" class="search-box" placeholder="Tìm kiếm thành phố" oninput="filterOptions(this)">
                                    @foreach (var city in ViewBag.CityList as List<string>)
                                    {
                                        <label><input type="checkbox" name="city" value="@city" @(ViewBag.City?.Contains(city) == true ? "checked" : "") /> @city</label>
                                    }
                                </div>
                            </div>

                       
                            <!-- Age Multi-select -->
                            <div class="custom-multi-select">
                                <div class="select-box" onclick="toggleDropdown(this)">
                                    <span class="selected-options" data-placeholder="Chọn tuổi">Chọn tuổi</span>
                                    <i class="arrow"></i>
                                </div>
                                <div class="dropdown-options">
                                    <input type="text" class="search-box" placeholder="Tìm kiếm tuổi" oninput="filterOptions(this)">
                                    @for (int startAge = 10; startAge <= 80; startAge += 6)
                                    {
                                        <label>
                                            <input type="checkbox" class="age-group-checkbox"
                                                   data-start-age="@startAge"
                                                   data-end-age="@Math.Min(startAge + 5, 80)"
                                                   onclick="toggleAgeSelection(this)"
                                            @(ViewBag.Age?.Contains(startAge.ToString()) == true ? "checked" : "") />
                                            Từ @startAge đến @Math.Min(startAge + 5, 80) tuổi
                                        </label>
                                        @for (int age = startAge; age <= Math.Min(startAge + 5, 80); age++)
                                        {
                                            <label>
                                                <input type="checkbox" name="age" value="@age"
                                                @(ViewBag.Age?.Contains(age.ToString()) == true ? "checked" : "") />
                                                @age tuổi
                                            </label>
                                        }
                                    }
                                </div>
                            </div>

                            <!-- Nghề nghiệp -->
                            <div class="custom-multi-select">
                                <div class="select-box" onclick="toggleDropdown(this)">
                                    <span class="selected-options" data-placeholder="Chọn nghề nghiệp">Chọn nghề nghiệp</span>
                                    <i class="arrow"></i>
                                </div>
                                <div class="dropdown-options" onchange="limitSelection(this, 10)">
                                    <input type="text" class="search-box" placeholder="Tìm kiếm nghề nghiệp" oninput="filterOptions(this)">
                                    @foreach (var job in ViewBag.JobList as List<string>)
                                    {
                                        <label><input type="checkbox" name="job" value="@job" @(ViewBag.Job?.Contains(job) == true ? "checked" : "") /> @job</label>
                                    }
                                </div>
                            </div>


@* 
                            <!-- Sex Multi-select -->
                            <div class="custom-multi-select">
                                <div class="select-box" onclick="toggleDropdown(this)">
                                    <span class="selected-options" data-placeholder="Chọn giới tính">Bệnh viện</span>
                                    <i class="arrow"></i>
                                </div>
                                <div class="dropdown-options" onchange="limitSelection(this, 10)">
                                    <label><input type="checkbox" name="qc" value="Không có dữ liệu" @(ViewBag.Sex?.Contains("Không có dữ liệu") == true ? "checked" : "") /> không có lữ liệu</label>
                                 
                                </div>
                            </div> *@



                            <!-- Sex Multi-select -->
                            <div class="custom-multi-select">
                                <div class="select-box" onclick="toggleDropdown(this)">
                                    <span class="selected-options" data-placeholder="Chọn giới tính">Loại hình bệnh viện</span>
                                    <i class="arrow"></i>
                                </div>
                                <div class="dropdown-options" onchange="limitSelection(this, 10)">
                                    @foreach (var education in ViewBag.EducationList as List<string>)
                                    {
                                        <label><input type="checkbox" name="education" value="@education" @(ViewBag.Education?.Contains(education) == true ? "checked" : "") /> @education</label>
                                    }
                                </div>
                            </div>



                        





                            <div class="custom-multi-select">
                                <div class="select-box" onclick="toggleDropdown(this)">
                                    <span class="selected-options" data-placeholder="Chọn Sbjnum">Khác</span>
                                    <i class="arrow"></i>
                                </div>
                                <div class="dropdown-options" onchange="limitSelection(this, 10)">
                                    <label>
                                        <input type="textbox" name="sbjnum" value="@(ViewBag.Sbjnum ?? string.Empty)" placeholder="Nhập Sbjnum" />
                                    </label>
                                </div>
                            </div>
                            <!-- Ô lọc Số điện thoại (input thường) -->
                            <div style="display: flex; flex-direction: column; justify-content: flex-end;">
                                <input type="text" id="phoneNumber" name="phoneNumber" value="@(ViewBag.Phonenumber ?? string.Empty)" placeholder="Nhập số điện thoại" style="width: 180px; padding: 8px; border: 1px solid #ccc; border-radius: 4px;" />
                            </div>
                            <!-- Ô lọc Chuyên Khoa -->
                            <div class="custom-multi-select">
                                <div class="select-box" onclick="toggleDropdown(this)">
                                    <span class="selected-options" data-placeholder="Chuyên Khoa">Chuyên Khoa</span>
                                    <i class="arrow"></i>
                                </div>
                                <div class="dropdown-options" onchange="limitSelection(this, 10)">
                                    <input type="text" class="search-box" placeholder="Tìm kiếm chuyên khoa" oninput="filterOptions(this)">
                                    @foreach (var ck in ViewBag.ChuyenKhoaList as List<string>)
                                    {
                                        <label><input type="checkbox" name="chuyenKhoa" value="@ck" @(ViewBag.ChuyenKhoa?.Contains(ck) == true ? "checked" : "") /> @ck</label>
                                    }
                                </div>
                            </div>
                        </div>
                        <P>        &nbsp     </P>

                        <button type="submit" class="btn btn-primary">  Lọc</button>



                         @{
                            var userRole = Context.Session.GetString("Role");
                        }


                        @if (userRole == "Admin" ||   userRole == "Execute")    
                        {
                            <button type="submit" class="btn btn-success" formaction="@Url.Action("ExportToExcel", "Bacsi")">Xuất Excel</button>
                        } 

                        <button type="button" class="btn btn-danger" onclick="window.location.href='@Url.Action("Index", "Bacsi")'">
                            Xóa bộ lọc
                        </button>




                    @*     <button type="button" class="btn btn-danger" onclick="window.location.href='@Url.Action("Index", "Bacsi")'">
                            Xóa bộ lọc
                        </button>


                        <button type="submit" class="btn btn-success" formaction="@Url.Action("ExportToExcel", "Bacsi")">Xuất Excel</button> *@



                    @*     @{
                            var userRole = Context.Session.GetString("Role");
                        }

                        @if (userRole == "Admin" || userRole == "Manager")
                        {
                            <button type="submit" class="btn btn-success" formaction="@Url.Action("ExportToExcel", "Manhinhchinh")">Xuất Excel</button>
                        } *@




                    </form>

                </div>
            </div>
        </div>


        <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>







        <button id="toggleChartsButton" class="btn btn-success">Xem biểu đồ</button>

        <div id="chartsContainer" style="display: none; border: 2px solid #ccc; padding: 20px; border-radius: 10px; margin-top: 20px;">
            <div style="display: flex; justify-content: space-around; align-items: center; margin-top: 20px;">
                <!-- Nút để xem từng biểu đồ -->
                <button class="btn btn-info" onclick="toggleChartVisibility(['yearlyProjectChart','pieChart'])">Dự án và số lượng mẫu</button>
                <button class="btn btn-info" onclick="toggleChartVisibility(['personalIncomeChart','maritalStatusChart','lineChart', 'sexChart' ])">Thông tin cá nhân</button>
                <button class="btn btn-info" onclick="toggleChartVisibility(['barChart','districtChart'])">Thành phố/ Quận huyện</button>



            </div>
            <!-- linechart=  so luong mau/do tuoi, pie chart= so du an -->
            <!-- barchart=  so luong mau theo tinh, personalImcome= So luong mau theo thu nhap ca nhan -->
            <!-- Marital status chart= Tinh trang hon nhan, Distric chart= So luong mau theo quan huyen -->
            <!-- Các biểu đồ, mỗi hàng có 2 biểu đồ -->












            <div style="display: flex; justify-content: space-around; align-items: center; margin-top: 20px;">
                <!--bieu do theo noi cu tru -->
                <div style="width: 90%; border: 1px solid #ddd; padding: 10px; border-radius: 8px; display: none;" id="lineChartContainer">
                    <canvas id="lineChart" width="2500" height="1000"></canvas>
                </div>
            </div>


            <div style="display: flex; justify-content: space-around; align-items: center; margin-top: 20px;">
                <div style="width: 90%; border: 1px solid #ddd; padding: 10px; border-radius: 8px; display: none;" id="pieChartContainer">
                    <canvas id="pieChart" width="2500" height="1000"></canvas>
                </div>

            </div>


            <!-- barchart=  so luong mau theo tinh, personalImcome= So luong mau theo thu nhap ca nhan -->
            <div style="display: flex; justify-content: space-around; align-items: center; margin-top: 20px;">
                <div style="width: 90%; border: 1px solid #ddd; padding: 10px; border-radius: 8px; display: none;" id="barChartContainer">
                    <canvas id="barChart" width="2500" height="1000"></canvas>

                </div>
            </div>


            <div style="display: flex; justify-content: space-around; align-items: center; margin-top: 20px;">
                <div style="width: 90%; border: 1px solid #ddd; padding: 10px; border-radius: 8px; display: none;" id="personalIncomeChartContainer">
                    <canvas id="personalIncomeChart" width="2500" height="1000"></canvas>
                </div>
            </div>


            <!-- Marital status chart= Tinh trang hon nhan, Distric chart= So luong mau theo quan huyen -->
            <div style="display: flex; justify-content: space-around; align-items: center; margin-top: 20px;">
                <div style="width: 90%; border: 1px solid #ddd; padding: 10px; border-radius: 8px; display: none;" id="maritalStatusChartContainer">
                    <canvas id="maritalStatusChart" width="2500" height="1000"></canvas>
                </div>
            </div>


            <div style="display: flex; justify-content: space-around; align-items: center; margin-top: 20px;">
                <div style="width: 90%; border: 1px solid #ddd; padding: 10px; border-radius: 8px; display: none;" id="districtChartContainer">
                    <canvas id="districtChart" width="2500" height="1000"></canvas>

                </div>
            </div>


            <div style="display: flex; justify-content: space-around; align-items: center; margin-top: 20px;">
                <div style="width: 90%; border: 1px solid #ddd; padding: 10px; border-radius: 8px; display: none;" id="yearlyProjectChartContainer">
                    <canvas id="yearlyProjectChart" width="2500" height="1000"></canvas>
                </div>
            </div>


            <div style="display: flex; justify-content: space-around; align-items: center; margin-top: 20px;">
                <div style="width: 90%; border: 1px solid #ddd; padding: 10px; border-radius: 8px; display: none;" id="contactObjectChartContainer">
                    <canvas id="contactObjectChart" width="2500" height="1000"></canvas>
                </div>
            </div>


            <div style="display: flex; justify-content: space-around; align-items: center; margin-top: 20px;">
                <div style="width: 30%; border: 1px solid #ddd; padding: 10px; border-radius: 8px; display: none;" id="sexChartContainer">
                    <canvas id="sexChart" width="500" height="500"></canvas>

                </div>
            </div>

            <p>Tổng số mẫu đếm được: @ViewBag.TotalSamples</p>
            <p>@ViewBag.Cacduanduocloc</p>
            <p>@ViewBag.GenderSummary</p>

            <p>@ViewBag.AgeGroupSummary</p>
        </div>



        <script>



            // Đóng dropdown khi click bên ngoài
            document.addEventListener('click', function (event) {
                const isClickInside = event.target.closest('.custom-multi-select');
                if (!isClickInside) {
                    document.querySelectorAll('.dropdown-options').forEach(dropdown => {
                        dropdown.style.display = 'none';
                    });
                }
            });

            // Thêm sự kiện thay đổi cho các checkbox trong mỗi dropdown
            document.querySelectorAll('.custom-multi-select').forEach(container => {
                container.querySelectorAll('.dropdown-options input[type="checkbox"]').forEach(checkbox => {
                    checkbox.addEventListener('change', function () {
                        const selectedCheckboxes = Array.from(container.querySelectorAll('input[type="checkbox"]:checked'));
                        const selectedOptions = selectedCheckboxes.map(input => input.value);

                        // Đặt giới hạn hiển thị
                        const displayText = selectedOptions.length > 1
                            ? `${selectedOptions.length} mục được chọn`
                            : selectedOptions.join(', ');

                        container.querySelector('.selected-options').textContent = displayText || container.querySelector('.selected-options').dataset.placeholder;
                    });
                });
            });


            function toggleDropdown(element) {
                const dropdown = element.nextElementSibling;
                dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
            }


            function Bac() {
                toggleCheckbox('idBacGiang');
                toggleCheckbox('idBacKan');
                toggleCheckbox('idBacNinh');
                toggleCheckbox('idCaoBang');
                toggleCheckbox('idDienBien');
                toggleCheckbox('idHaGiang');
                toggleCheckbox('idHaNam');
                toggleCheckbox('idHaNoi');
                toggleCheckbox('idHaiDuong');
                toggleCheckbox('idHaiPhong');
                toggleCheckbox('idHoaBinh');
                toggleCheckbox('idHungYen');
                toggleCheckbox('idLaiChau');
                toggleCheckbox('idLaoCai');
                toggleCheckbox('idNamDinh');
                toggleCheckbox('idNinhBinh');
                toggleCheckbox('idPhuTho');
                toggleCheckbox('idQuangNinh');
                toggleCheckbox('idSonLa');
                toggleCheckbox('idThaiBinh');
                toggleCheckbox('idThaiNguyen');
                toggleCheckbox('idTuyenQuang');
                toggleCheckbox('idVinhPhuc');
                toggleCheckbox('idLangSon');
                toggleCheckbox('idYenBai');

            }

            function Trung() {
                toggleCheckbox('idBinhDinh');
                toggleCheckbox('idDaNang');
                toggleCheckbox('idDakLak');
                toggleCheckbox('idDakNong');
                toggleCheckbox('idGiaLai');
                toggleCheckbox('idHaTinh');
                toggleCheckbox('idKhanhHoa');
                toggleCheckbox('idKonTum');
                toggleCheckbox('idNgheAn');
                toggleCheckbox('idPhuYen');
                toggleCheckbox('idThanhHoa');
                toggleCheckbox('idQuangBinh');
                toggleCheckbox('idQuangNam');
                toggleCheckbox('idQuangNgai');
                toggleCheckbox('idQuangTri');
                toggleCheckbox('idThuaThienHue');
            }

            function Nam() {
                toggleCheckbox('idAnGiang');
                toggleCheckbox('idBaRiaVungTau');
                toggleCheckbox('idBacLieu');
                toggleCheckbox('idBenTre');
                toggleCheckbox('idBinhDuong');
                toggleCheckbox('idBinhPhuoc');
                toggleCheckbox('idBinhThuan');
                toggleCheckbox('idCaMau');
                toggleCheckbox('idCanTho');
                toggleCheckbox('idDongNai');
                toggleCheckbox('idDongThap');
                toggleCheckbox('idHauGiang');
                toggleCheckbox('idHoChiMinh');
                toggleCheckbox('idKienGiang');
                toggleCheckbox('idLamDong');
                toggleCheckbox('idLongAn');
                toggleCheckbox('idNinhThuan');
                toggleCheckbox('idSocTrang');
                toggleCheckbox('idTayNinh');
                toggleCheckbox('idTienGiang');
                toggleCheckbox('idTraVinh');
                toggleCheckbox('idVinhLong');
            }

            // Hàm để kiểm tra và thay đổi trạng thái của checkbox
            function toggleCheckbox(id) {
                var checkbox = document.getElementById(id);
                checkbox.checked = !checkbox.checked;  // Đảo ngược trạng thái của checkbox
            }

            function toggleAgeSelection(groupCheckbox) {
                const startAge = parseInt(groupCheckbox.getAttribute('data-start-age'));
                const endAge = parseInt(groupCheckbox.getAttribute('data-end-age'));

                // Lấy tất cả các checkbox trong nhóm tuổi này
                const ageCheckboxes = document.querySelectorAll(`input[name="age"]`);

                ageCheckboxes.forEach(checkbox => {
                    const age = parseInt(checkbox.value);
                    if (age >= startAge && age <= endAge) {
                        checkbox.checked = groupCheckbox.checked; // Đánh dấu tất cả các checkbox trong nhóm
                    }
                });
            }

            // Khi form được gửi, thu thập tất cả các giá trị đã chọn
            document.querySelectorAll('form').forEach(form => {
                form.addEventListener('submit', function () {
                    const selectedAges = [];

                    // Lấy tất cả các checkbox đã chọn và thu thập giá trị
                    document.querySelectorAll('input[name="age"]:checked').forEach(checkedCheckbox => {
                        selectedAges.push(checkedCheckbox.value);
                    });

                    // Gửi các giá trị đã chọn qua form
                    console.log(selectedAges); // selectedAges chứa các giá trị tuổi đã chọn, ví dụ: [10, 11, 12, 13, 14, 15]
                });
            });





            document.getElementById("toggleChartsButton").addEventListener("click", function () {
                var chartsContainer = document.getElementById("chartsContainer");
                if (chartsContainer.style.display === "none") {
                    chartsContainer.style.display = "block";
                    this.textContent = "Ẩn biểu đồ";
                } else {
                    chartsContainer.style.display = "none";
                    this.textContent = "Xem biểu đồ";
                }
            });

            function toggleChartVisibility(chartIds) {
                // Ẩn tất cả các biểu đồ trước khi hiển thị các biểu đồ được chọn
                const allCharts = ['lineChartContainer', 'pieChartContainer', 'barChartContainer', 'personalIncomeChartContainer', 'maritalStatusChartContainer', 'districtChartContainer', 'yearlyProjectChartContainer', 'contactObjectChartContainer', 'sexChartContainer'];
                allCharts.forEach(chartId => {
                    document.getElementById(chartId).style.display = 'none';
                });

                // Hiển thị các biểu đồ trong mảng chartIds
                chartIds.forEach(chartId => {
                    const chartContainer = document.getElementById(chartId + 'Container');
                    if (chartContainer) {
                        chartContainer.style.display = 'block';
                    }
                });
            }






            // Cấu hình Biểu Đồ Đường
            var ctxLine = document.getElementById('lineChart').getContext('2d');
            var lineChart = new Chart(ctxLine, {
                type: 'bar',
                data: {
                    labels: @Html.Raw(Json.Serialize(ViewBag.LineLabels)),
                    datasets: [{
                        label: 'Số lượng mẫu theo độ tuổi',
                        data: @Html.Raw(Json.Serialize(ViewBag.LineData)),
                        backgroundColor: 'rgba(255, 140, 0, 0.6)', // Màu nền cam đối lập với xanh
                        borderColor: 'rgba(255, 140, 0, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'Độ Tuổi Dựa Trên Số Lượng Mẫu'
                        },
                        zoom: {
                            pan: {
                                enabled: true,
                                mode: 'x'
                            },
                            zoom: {
                                wheel: {
                                    enabled: true,
                                },
                                pinch: {
                                    enabled: true
                                },
                                mode: 'x',
                                limits: {
                                    x: { min: 'original', max: 'original' }, // Ngăn zoom-out quá mức mặc định trên trục x
                                    y: { min: 'original', max: 'original' }  // Ngăn zoom-out quá mức mặc định trên trục y
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Độ tuổi'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Số lượng mẫu'
                            },
                            beginAtZero: true
                        }
                    }
                }
            });



            // Cấu hình Biểu Đồ với chức năng Zoom và hiển thị giá trị trục
            var ctxPie = document.getElementById('pieChart').getContext('2d');
            var pieChart = new Chart(ctxPie, {
                type: 'bar',
                data: {
                    labels: @Html.Raw(Json.Serialize(ViewBag.PieLabels)),
                    datasets: [{
                        label: 'Số lượng mẫu',
                        data: @Html.Raw(Json.Serialize(ViewBag.PieData)),
                        backgroundColor: 'rgba(255, 140, 0, 0.6)', // Màu nền cam đối lập với xanh
                        borderColor: 'rgba(255, 140, 0, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'Số lượng mẫu của từng dự án'
                        },
                        zoom: {
                            pan: {
                                enabled: true,
                                mode: 'x'
                            },
                            zoom: {
                                wheel: {
                                    enabled: true
                                },
                                pinch: {
                                    enabled: true
                                },
                                mode: 'x',
                                limits: {
                                    x: { min: 'original', max: 'original' }, // Ngăn zoom-out quá mức mặc định trên trục x
                                    y: { min: 'original', max: 'original' }  // Ngăn zoom-out quá mức mặc định trên trục y
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Tên Dự Án'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Số lượng mẫu'
                            },
                            beginAtZero: true
                        }
                    }
                }
            });



            var ctx = document.getElementById('barChart').getContext('2d');
            var barChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: @Html.Raw(Json.Serialize(ViewBag.BarLabels)), // Nhãn từ ViewBag
                    datasets: [{
                        label: 'Số lượng mẫu theo tỉnh',
                        data: @Html.Raw(Json.Serialize(ViewBag.BarData)), // Dữ liệu từ ViewBag
                        backgroundColor: 'rgba(255, 140, 0, 0.6)', // Màu nền cam đối lập với xanh
                        borderColor: 'rgba(255, 140, 0, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {

                        zoom: {
                            pan: {
                                enabled: true,
                                mode: 'x'
                            },
                            zoom: {
                                wheel: {
                                    enabled: true
                                },
                                pinch: {
                                    enabled: true
                                },
                                mode: 'x',
                                limits: {
                                    x: { min: 'original', max: 'original' }, // Ngăn zoom-out quá mức mặc định trên trục x
                                    y: { min: 'original', max: 'original' }  // Ngăn zoom-out quá mức mặc định trên trục y
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Tên tỉnh'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Số lượng mẫu'
                            }
                        }
                    }
                }
            });




            var maritalStatusLabels = @Html.Raw(Json.Serialize(ViewBag.MaritalStatusLabels));
            var maritalStatusData = @Html.Raw(Json.Serialize(ViewBag.MaritalStatusData));

            var ctx = document.getElementById('maritalStatusChart').getContext('2d');
            var maritalStatusChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: maritalStatusLabels,
                    datasets: [{
                        label: 'Tình trạng hôn nhân',
                        data: maritalStatusData,
                        backgroundColor: 'rgba(255, 140, 0, 0.6)', // Màu nền cam đối lập với xanh
                        borderColor: 'rgba(255, 140, 0, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'Biểu đồ Tình trạng Hôn nhân' // Đây là tiêu đề của biểu đồ
                        },
                        tooltip: {
                            callbacks: {
                                label: function (tooltipItem) {
                                    return tooltipItem.label + ': ' + tooltipItem.raw + ' mẫu';
                                }
                            }
                        },
                        zoom: {
                            pan: {
                                enabled: true,
                                mode: 'x', // Cho phép pan theo cả hai chiều
                            },
                            zoom: {
                                wheel: {
                                    enabled: true, // Cho phép zoom bằng con lăn chuột
                                },
                                pinch: {
                                    enabled: true // Cho phép zoom bằng pinch trên thiết bị cảm ứng
                                },
                                mode: 'x', // Zoom theo cả hai chiều
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Tình trạng hôn nhân'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Số lượng mẫu'
                            }
                        }
                    }
                }
            });


            var districtLabels = @Html.Raw(Json.Serialize(ViewBag.DistrictLabels));
            var districtData = @Html.Raw(Json.Serialize(ViewBag.DistrictData));

            var ctx2 = document.getElementById('districtChart').getContext('2d');
            var districtChart = new Chart(ctx2, {
                type: 'bar',
                data: {
                    labels: districtLabels,
                    datasets: [{
                        label: 'Số lượng mẫu theo quận',
                        data: districtData,
                        backgroundColor: 'rgba(0, 51, 153, 0.6)', // Màu nền cột xanh đậm hơn
                        borderColor: 'rgba(0, 51, 153, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Tên Quận' // Tiêu đề cho trục hoành
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Số lượng mẫu' // Tiêu đề cho trục tung
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function (tooltipItem) {
                                    return tooltipItem.label + ': ' + tooltipItem.raw + ' mẫu';
                                }
                            }
                        },
                        zoom: {
                            pan: {
                                enabled: true,
                                mode: 'x' // Kích hoạt pan chỉ trên trục hoành
                            },
                            zoom: {
                                wheel: {
                                    enabled: true
                                },
                                pinch: {
                                    enabled: true
                                },
                                mode: 'x' // Kích hoạt zoom chỉ trên trục hoành
                            }
                        }
                    }
                }
            });













            var personalIncomeLabels = @Html.Raw(Json.Serialize(ViewBag.PersonalIncomeLabels));
            var personalIncomeData = @Html.Raw(Json.Serialize(ViewBag.PersonalIncomeData));

            var ctx3 = document.getElementById('personalIncomeChart').getContext('2d');
            var personalIncomeChart = new Chart(ctx3, {
                type: 'bar',
                data: {
                    labels: personalIncomeLabels,
                    datasets: [{
                        label: 'Số lượng mẫu theo thu nhập cá nhân',
                        data: personalIncomeData,
                        fill: false,
                        backgroundColor: 'rgba(0, 51, 153, 0.6)', // Màu nền cột xanh đậm hơn
                        borderColor: 'rgba(0, 51, 153, 1)', // Màu sắc cho đường
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Thu nhập cá nhân của khách hàng trên số lượng mẫu'
                        },
                        tooltip: {
                            callbacks: {
                                label: function (tooltipItem) {
                                    return tooltipItem.label + ': ' + tooltipItem.raw + ' Mẫu';
                                }
                            }
                        },
                        zoom: {
                            pan: {
                                enabled: true,
                                mode: 'x' // Kích hoạt pan chỉ trên trục hoành
                            },
                            zoom: {
                                wheel: {
                                    enabled: true
                                },
                                pinch: {
                                    enabled: true
                                },
                                mode: 'x' // Kích hoạt zoom chỉ trên trục hoành
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Dữ liệu thu nhập cá nhân', // Tiêu đề cho trục hoành
                                font: {
                                    size: 14
                                }
                            },
                            ticks: {
                                font: {
                                    size: 10, // Kích thước chữ ở trục hoành
                                }
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Số lượng mẫu', // Tiêu đề cho trục tung
                                font: {
                                    size: 14
                                }
                            },
                            ticks: {
                                font: {
                                    size: 10, // Kích thước chữ ở trục tung
                                }
                            }
                        }
                    }
                }
            });






            var ctxYearly = document.getElementById('yearlyProjectChart').getContext('2d');

            var yearlyProjectChart = new Chart(ctxYearly, {
                type: 'bar',
                data: {
                    labels: @Html.Raw(Json.Serialize(ViewBag.YearLabels)),
                    datasets: [{
                        label: 'Số lượng mẫu qua các năm',
                        data: @Html.Raw(Json.Serialize(ViewBag.YearData)),
                        backgroundColor: 'rgba(0, 51, 153, 0.6)', // Màu nền cột xanh đậm hơn
                        borderColor: 'rgba(0, 51, 153, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,

                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Năm' // Tiêu đề cho trục hoành
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Số lượng mẫu' // Tiêu đề cho trục tung
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'Số lượng mẫu qua các năm'
                        }
                    }
                }
            });




            var ctxSex = document.getElementById('sexChart').getContext('2d');
            var sexChart = new Chart(ctxSex, {
                type: 'doughnut', // Loại biểu đồ tròn
                data: {
                    labels: @Html.Raw(Json.Serialize(ViewBag.SexLabels)), // Nhãn cho các phần của biểu đồ
                    datasets: [{
                        label: 'Tỷ lệ giới tính',
                        data: @Html.Raw(Json.Serialize(ViewBag.SexData)), // Dữ liệu cho biểu đồ
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            callbacks: {
                                label: function (tooltipItem) {
                                    return tooltipItem.label + ': ' + tooltipItem.raw + ' mẫu';
                                }
                            }
                        }
                    }
                }
            });
            //Code này để không bị xuất file excel sai yêu cầu
            document.querySelector('.filter-form').addEventListener('submit', function (e) {
                // Lấy tất cả các input trong form
                const inputs = this.querySelectorAll('input, select');
                inputs.forEach(input => {
                    // Nếu input có giá trị rỗng, xóa nó
                    if (!input.value.trim()) {
                        input.name = ''; // Xóa name để không gửi tham số
                    }
                });
            });






        </script>





        <table id="dataTable">
            <thead>
                <tr>
                    <th>SBJNUM</th>
                    <th>CODE</th>
                    <th>TÊN DỰ ÁN</th>
                    <th>NĂM DỰ ÁN</th>
                    <th>NĂM SINH</th>
                    <th>TUỔI</th>
                    <th>HỌ VÀ TÊN</th>
                    <th>PHƯỜNG</th>
                    <th>QUẬN</th>
                    <th>THÀNH PHỐ</th>
              
                    <th>EMAIL</th>
                    <th>GIỚI TÍNH</th>
                    <th>TP. KINH TẾ</th>
                    <th>NGÀNH HÀNG</th>
                    <th>NGHỀ NGHIỆP</th>
                    <th>THU NHẬP GIA ĐÌNH</th>
                    <th>THU NHẬP CÁ NHÂN</th>
                    <th>TÌNH TRẠNG HÔN NHÂN</th>




                </tr>
            </thead>
            <tbody>
                @foreach (var ALLDATA in Model)
                {
                    <tr>

                        <td>@ALLDATA.Sbjnum</td>
                        <td>@ALLDATA.Code</td>
                        <td>@ALLDATA.ProjectName</td>
                        <td>@ALLDATA.Year</td>
                        <td>@ALLDATA.DateOfBirth</td>
                        <td>@ALLDATA.Age</td>
                        <td>@ALLDATA.Fullname</td>
                        <td>@ALLDATA.Ward</td>

                        <td>@ALLDATA.District</td>
                        <td>@ALLDATA.City</td>
                     
                        <td>@ALLDATA.Email</td>
                        <td>@ALLDATA.Sex</td>
                        <td>@ALLDATA.Class</td>
                        <td>@ALLDATA.Nganhhang</td>
                        <td>@ALLDATA.Job</td>
                        <td>@ALLDATA.HouseholdIncome</td>
                        <td>@ALLDATA.PersonalIncome</td>
                        <td>@ALLDATA.MaritalStatus</td>


                    </tr>
                }
            </tbody>
        </table>
    </div>


    <script>

        const pageSize = 3000;
        let currentIndex = pageSize;
        const rows = document.querySelectorAll("#dataTable tbody tr");

        // Ẩn các hàng vượt quá pageSize ban đầu
        rows.forEach((row, index) => {
            if (index >= pageSize) row.style.display = "none";
        });

        // Hàm để hiển thị thêm dữ liệu
        function loadMoreData() {
            for (let i = currentIndex; i < currentIndex + pageSize && i < rows.length; i++) {
                rows[i].style.display = "";
            }
            currentIndex += pageSize;
        }

        // Lắng nghe sự kiện cuộn trên cửa sổ
        window.addEventListener('scroll', function () {
            if (window.innerHeight + window.scrollY >= document.body.scrollHeight) {
                loadMoreData();
            }
        });


        function limitSelection(dropdown, maxSelections) {
            const checkboxes = dropdown.querySelectorAll('input[type="checkbox"]');
            const checkedCheckboxes = Array.from(checkboxes).filter(checkbox => checkbox.checked);

            if (checkedCheckboxes.length > maxSelections) {
                alert(`Vui lòng chỉ chọn tối đa ${maxSelections} giá trị.`);
                checkedCheckboxes[checkedCheckboxes.length - 1].checked = false; // Bỏ chọn checkbox cuối cùng
            }
        }

        function toggleDropdown(element) {
            const dropdown = element.nextElementSibling;
            dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
        }

        document.addEventListener('click', function (event) {
            const isClickInside = event.target.closest('.custom-multi-select');
            if (!isClickInside) {
                document.querySelectorAll('.dropdown-options').forEach(dropdown => {
                    dropdown.style.display = 'none';
                });
            }
        });

        document.querySelectorAll('.custom-multi-select .dropdown-options input[type="checkbox"]').forEach(checkbox => {
            checkbox.addEventListener('change', function () {
                const container = this.closest('.custom-multi-select');
                const selectedCheckboxes = Array.from(container.querySelectorAll('input[type="checkbox"]:checked'));
                const selectedOptions = selectedCheckboxes.map(input => input.value);

                // Đặt giới hạn hiển thị (ví dụ: hiển thị tên hoặc số lượng mục nếu có nhiều hơn 1 mục)
                const displayText = selectedOptions.length > 1
                    ? `${selectedOptions.length} mục được chọn`
                    : selectedOptions.join(', ');

                container.querySelector('.selected-options').textContent = displayText || container.querySelector('.selected-options').dataset.placeholder;
            });
        });




        //dropdown search trong multi box

        function filterOptions(input) {
            const filter = input.value.toLowerCase();
            const dropdown = input.closest('.dropdown-options'); // Tìm dropdown chứa ô input
            const options = dropdown.querySelectorAll('label'); // Lấy tất cả các label trong dropdown

            options.forEach(option => {
                const text = option.textContent || option.innerText;
                if (text.toLowerCase().indexOf(filter) > -1) {
                    option.style.display = ""; // Hiển thị nếu khớp
                } else {
                    option.style.display = "none"; // Ẩn nếu không khớp
                }
            });
        }


        function toggleForm() {
            var formContent = document.getElementById("formContent");
            var toggleButton = document.querySelector(".toggle-button");

            if (formContent.style.display === "none" || formContent.style.display === "") {
                formContent.style.display = "block"; // Hiện form
                toggleButton.innerHTML = "&#9650;"; // Đổi biểu tượng (mũi tên lên)
            } else {
                formContent.style.display = "none"; // Ẩn form
                toggleButton.innerHTML = "&#9660;"; // Đổi biểu tượng (mũi tên xuống)
            }
        }
    </script>
</body>
</html>