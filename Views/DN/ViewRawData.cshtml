@model List<CIResearch.Models.QLKH>

@{
    ViewData["Title"] = "Dữ liệu thô - CI Research";
    Layout = null;
}

<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- DataTables CSS -->
    <link href="https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css" rel="stylesheet">
    <link href="https://cdn.datatables.net/responsive/2.5.0/css/responsive.bootstrap5.min.css" rel="stylesheet">

    <style>
        /* Reset và Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background-image: url('/IMG(4UU)/STOREAUDIT.jpg');
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center center;
            background-attachment: fixed;
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
        }

        /* Header Navigation */
        .top-nav {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 1rem 0;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 1000;
            transition: all 0.3s ease;
        }

        /* Navigation Filter Styles */
        .filter-toggle-btn {
            border-color: rgba(255, 255, 255, 0.5) !important;
            color: white !important;
            transition: all 0.3s ease;
            font-size: 0.875rem;
            padding: 0.375rem 0.75rem;
        }

        .filter-toggle-btn:hover {
            background-color: rgba(255, 255, 255, 0.1) !important;
            border-color: white !important;
            color: white !important;
            transform: translateY(-1px);
        }

        .filter-toggle-btn:focus {
            box-shadow: 0 0 0 0.2rem rgba(255, 255, 255, 0.25) !important;
            color: white !important;
        }

        #navigationFilterSection {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 0 0 15px 15px;
            border-top: 1px solid rgba(255, 255, 255, 0.2);
            animation: slideDown 0.3s ease-out;
        }

        @@keyframes slideDown
        {
                from {
                    opacity: 0;
                    transform: translateY(-20px);
                }

                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }

            .nav-filter-container {
                padding: 1rem;
                border-radius: 10px;
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid rgba(255, 255, 255, 0.1);
            }

            .nav-filter-header {
                margin-bottom: 1rem;
                padding-bottom: 0.5rem;
                border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            }

            .nav-filter-body .custom-multi-select {
                width: 100%;
                margin: 0;
            }

            .nav-filter-body .select-box {
                background-color: rgba(255, 255, 255, 0.9);
                border: 1px solid rgba(255, 255, 255, 0.3);
                border-radius: 6px;
                color: #333;
                font-size: 0.875rem;
                padding: 0.5rem;
            }

            .nav-filter-body .select-box:hover {
                background-color: white;
                border-color: #007bff;
            }

            .nav-filter-body .dropdown-options {
                background-color: white;
                border: 1px solid rgba(0, 0, 0, 0.1);
                border-radius: 6px;
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
                z-index: 10000;
            }

            .nav-filter-body .btn {
                font-size: 0.875rem;
                padding: 0.4rem 0.8rem;
                border-radius: 6px;
                transition: all 0.2s ease;
            }

            .nav-filter-body .btn-outline-light {
                border-color: rgba(255, 255, 255, 0.5);
                color: white;
            }

            .nav-filter-body .btn-outline-light:hover {
                background-color: white;
                color: #333;
                border-color: white;
            }

            .nav-filter-body .btn-light {
                background-color: white;
                color: #333;
                border-color: white;
            }

            .nav-filter-body .btn-light:hover {
                background-color: #f8f9fa;
                transform: translateY(-1px);
            }

            .nav-filter-body .btn-success {
                background-color: #28a745;
                border-color: #28a745;
            }

            .nav-filter-body .btn-success:hover {
                background-color: #218838;
                transform: translateY(-1px);
            }

            .nav-filter-body .btn-info {
                background-color: #17a2b8;
                border-color: #17a2b8;
            }

            .nav-filter-body .btn-info:hover {
                background-color: #138496;
                transform: translateY(-1px);
            }

            .nav-filter-body .btn-warning {
                background-color: #ffc107;
                border-color: #ffc107;
                color: #333;
            }

            .nav-filter-body .btn-warning:hover {
                background-color: #e0a800;
                transform: translateY(-1px);
            }

            /* Chevron animation */
            #filterChevron {
                transition: transform 0.3s ease;
            }

            #filterChevron.rotated {
                transform: rotate(180deg);
            }

            /* Mobile responsiveness for navigation filter */
            @@media (max-width: 768px) {
                    .nav-filter-body .row .col-lg-2 {
                        margin-bottom: 0.5rem;
                    }

                    .filter-toggle-btn {
                        font-size: 0.75rem;
                        padding: 0.25rem 0.5rem;
                    }

                    .filter-toggle-btn span {
                        display: none;
                    }

                    .nav-filter-container {
                        padding: 0.75rem;
                    }

                    .nav-filter-body .btn {
                        font-size: 0.75rem;
                        padding: 0.3rem 0.6rem;
                    }
                }

                @@media(max - width: 576px) {
                        .top-nav {
                            padding: 0.75rem 0;
                        }

                        .nav-brand {
                            font-size: 1.2rem;
                        }

                        .user-info {
                            font-size: 0.8rem;
                        }
                    }

                    .nav-brand {
                        color: white;
                        font-size: 1.5rem;
                        font-weight: 700;
                        text-decoration: none;
                        display: flex;
                        align-items: center;
                    }

                    .nav-brand:hover {
                        color: #f8f9fa;
                        text-decoration: none;
                    }

                    .nav-brand i {
                        margin-right: 0.5rem;
                    }

                    .user-info {
                        color: white;
                        font-weight: 500;
                    }

                    /* Filter styles */
                    .custom-multi-select {
                        position: relative;
                        width: 100%;
                        margin: 0 auto;
                    }

                    .select-box {
                        padding: 10px;
                        border: 1px solid #ccc;
                        cursor: pointer;
                        background-color: #fff;
                        position: relative;
                        border-radius: 8px;
                    }

                    .selected-options {
                        white-space: nowrap;
                        overflow: hidden;
                        text-overflow: ellipsis;
                        width: 100%;
                    }

                    .arrow {
                        position: absolute;
                        right: 10px;
                        top: 50%;
                        transform: translateY(-50%) rotate(45deg);
                        border: solid #666;
                        border-width: 0 2px 2px 0;
                        padding: 3px;
                    }

                    .dropdown-options {
                        display: none;
                        position: absolute;
                        top: 100%;
                        left: 0;
                        right: 0;
                        background-color: #fff;
                        border: 1px solid #ccc;
                        max-height: 200px;
                        overflow-y: auto;
                        z-index: 9999;
                        border-radius: 8px;
                        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
                    }

                    .custom-multi-select.active {
                        z-index: 10000;
                    }

                    .dropdown-options label {
                        display: block;
                        padding: 8px;
                        cursor: pointer;
                        transition: background-color 0.2s;
                    }

                    .dropdown-options label:hover {
                        background-color: #f0f0f0;
                    }

                    .search-box {
                        width: 100%;
                        padding: 8px;
                        border: 1px solid #ddd;
                        border-bottom: 2px solid #007bff;
                        font-size: 14px;
                        outline: none;
                        border-radius: 8px 8px 0 0;
                    }

                    .search-box:focus {
                        border-color: #007bff;
                        box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
                    }

                    /* Container chính */
                    .main-container {
                        width: 100%;
                        min-height: calc(100vh - 80px);
                        padding: 0;
                        margin: 0;
                    }

                    /* Content wrapper */
                    .content-wrapper {
                        width: 100%;
                        padding: 2rem;
                        background: rgba(255, 255, 255, 0.95);
                        backdrop-filter: blur(10px);
                        min-height: calc(100vh - 80px);
                    }

                    /* DataTable custom styles */
                    .table-container {
                        background: white;
                        border-radius: 15px;
                        padding: 20px;
                        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                        margin-top: 20px;
                    }

                    .dataTables_wrapper .dataTables_length,
                    .dataTables_wrapper .dataTables_filter,
                    .dataTables_wrapper .dataTables_info,
                    .dataTables_wrapper .dataTables_paginate {
                        margin-bottom: 10px;
                    }

                    .dataTables_wrapper .dataTables_paginate .paginate_button {
                        border-radius: 6px;
                        margin: 0 2px;
                    }

                    .table-striped>tbody>tr:nth-child(odd)>td {
                        background-color: rgba(0, 0, 0, 0.02);
                    }

                    /* Limit options styles */
                    .limit-options {
                        background: white;
                        border-radius: 12px;
                        padding: 20px;
                        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                        margin-bottom: 20px;
                        border: 1px solid #e5e7eb;
                    }

                    .limit-option {
                        display: flex;
                        align-items: center;
                        margin-bottom: 10px;
                        padding: 8px;
                        border-radius: 6px;
                        transition: background-color 0.2s;
                    }

                    .limit-option:hover {
                        background-color: #f8f9fa;
                    }

                    .limit-option input[type="radio"] {
                        margin-right: 10px;
                    }

                    .custom-range-inputs {
                        display: none;
                        margin-top: 10px;
                        padding: 10px;
                        background-color: #f8f9fa;
                        border-radius: 6px;
                        border: 1px solid #dee2e6;
                    }

                    .custom-range-inputs.show {
                        display: block;
                    }

                    .form-control-sm {
                        font-size: 0.875rem;
                    }

                    /* Error message styles */
                    .alert {
                        border-radius: 8px;
                        border: none;
                        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
                    }

                    .alert-danger {
                        background: linear-gradient(45deg, #dc3545, #c82333);
                        color: white;
                    }

                    .alert-success {
                        background: linear-gradient(45deg, #28a745, #218838);
                        color: white;
                    }

                    .alert-info {
                        background: linear-gradient(45deg, #17a2b8, #138496);
                        color: white;
                    }

                    /* Button styles */
                    .btn {
                        border-radius: 8px;
                        transition: all 0.3s ease;
                        font-weight: 500;
                    }

                    .btn:hover {
                        transform: translateY(-1px);
                        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
                    }

                    /* Statistics section */
                    .statistics-section {
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        border-radius: 12px;
                        padding: 20px;
                        margin-bottom: 20px;
                        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                    }

                    .stat-item {
                        text-align: center;
                        padding: 10px;
                    }

                    .stat-number {
                        font-size: 2rem;
                        font-weight: 700;
                        margin-bottom: 5px;
                    }

                    .stat-label {
                        font-size: 0.9rem;
                        opacity: 0.9;
                    }
                </style>
            </head>

            <body>
                <!-- Top Navigation -->
                <nav class="top-nav">
                    <div class="container-fluid px-3">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <a href="@Url.Action("Index", "DN")" class="nav-brand">
                                    <i class="fas fa-table"></i>
                                    ViewRawData - Dữ liệu thô
                                </a>
                            </div>
                            <div class="col-md-6 text-end">
                                <div class="d-flex align-items-center justify-content-end gap-3">
                                    <div class="user-info">
                                        <i class="fas fa-calendar-alt me-2"></i>
                                        @DateTime.Now.ToString("dd/MM/yyyy HH:mm")
                                    </div>

                                    <!-- Filter Toggle Button -->
                                    <button class="btn btn-outline-light btn-sm filter-toggle-btn"
                                        onclick="toggleNavigationFilter()" id="filterToggleBtn">
                                        <i class="fas fa-filter me-1" id="filterToggleIcon"></i>
                                        <span id="filterToggleText">Bộ lọc</span>
                                        <i class="fas fa-chevron-down ms-1" id="filterChevron"></i>
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Collapsible Filter Section -->
                        <div class="row mt-3" id="navigationFilterSection" style="display: none;">
                            <div class="col-12">
                                <div class="nav-filter-container">
                                    <div class="nav-filter-header">
                                        <h6 class="mb-0 text-white">
                                            <i class="fas fa-filter me-2"></i>
                                            Bộ lọc dữ liệu doanh nghiệp
                                        </h6>
                                    </div>
                                    <div class="nav-filter-body">
                                        <form method="get" action="@Url.Action("ViewRawData", "DN")" class="filter-form">
                                            <div class="row g-2">
                                                <!-- Năm Multi-select -->
                                                <div class="col-lg-2 col-md-4 col-sm-6">
                                                    <div class="custom-multi-select" id="yearFilter">
                                                        <div class="select-box" onclick="toggleDropdown(this)">
                                                            <span class="selected-options" data-placeholder="Năm">Năm</span>
                                                            <i class="arrow"></i>
                                                        </div>
                                                        <div class="dropdown-options">
                                                            <input type="text" class="search-box" placeholder="Tìm kiếm năm"
                                                                oninput="filterOptions(this)">
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Tỉnh/Thành phố Multi-select -->
                                                <div class="col-lg-2 col-md-4 col-sm-6">
                                                    <div class="custom-multi-select" id="provinceFilter">
                                                        <div class="select-box" onclick="toggleDropdown(this)">
                                                            <span class="selected-options"
                                                                data-placeholder="Tỉnh/Thành phố">Tỉnh/Thành phố</span>
                                                            <i class="arrow"></i>
                                                        </div>
                                                        <div class="dropdown-options">
                                                            <input type="text" class="search-box" placeholder="Tìm kiếm tỉnh thành"
                                                                oninput="filterOptions(this)">
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Loại hình kinh tế Multi-select -->
                                                <div class="col-lg-2 col-md-4 col-sm-6">
                                                    <div class="custom-multi-select" id="businessTypeFilter">
                                                        <div class="select-box" onclick="toggleDropdown(this)">
                                                            <span class="selected-options" data-placeholder="Loại hình kinh tế">Loại
                                                                hình kinh tế</span>
                                                            <i class="arrow"></i>
                                                        </div>
                                                        <div class="dropdown-options">
                                                            <input type="text" class="search-box" placeholder="Tìm kiếm loại hình"
                                                                oninput="filterOptions(this)">
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Vùng kinh tế Multi-select -->
                                                <div class="col-lg-2 col-md-4 col-sm-6">
                                                    <div class="custom-multi-select" id="economicZoneFilter">
                                                        <div class="select-box" onclick="toggleDropdown(this)">
                                                            <span class="selected-options" data-placeholder="Vùng kinh tế">Vùng kinh
                                                                tế</span>
                                                            <i class="arrow"></i>
                                                        </div>
                                                        <div class="dropdown-options">
                                                            <input type="text" class="search-box"
                                                                placeholder="Tìm kiếm vùng kinh tế" oninput="filterOptions(this)">
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Giới hạn dữ liệu - Custom dropdown -->
                                                <div class="col-lg-2 col-md-4 col-sm-6">
                                                    <div class="custom-multi-select" id="limitTypeFilter">
                                                        <div class="select-box" onclick="toggleDropdown(this)">
                                                            <span class="selected-options" data-placeholder="Giới hạn">Giới
                                                                hạn</span>
                                                            <i class="arrow"></i>
                                                        </div>
                                                        <div class="dropdown-options">
                                                            <!-- No search box for limit options -->
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Quick Actions -->
                                                <div class="col-lg-2 col-md-4 col-sm-6">
                                                    <div class="d-flex gap-1">
                                                        <button type="button" class="btn btn-outline-light btn-sm flex-fill"
                                                            onclick="clearAllFilters()" title="Xóa bộ lọc">
                                                            <i class="fas fa-times"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-outline-light btn-sm flex-fill"
                                                            onclick="debugFilters()" title="Debug filters">
                                                            <i class="fas fa-bug"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-outline-light btn-sm flex-fill"
                                                            onclick="testExportExcel()" title="Test Export Excel">
                                                            <i class="fas fa-file-excel"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Action Buttons Row -->
                                            <div class="row mt-2">
                                                <div class="col-12">
                                                    <div class="d-flex flex-wrap gap-1 justify-content-center">
                                                        <button type="submit" class="btn btn-light btn-sm">
                                                            <i class="fas fa-search me-1"></i>
                                                            Áp dụng bộ lọc
                                                        </button>
                                                        <a href="@Url.Action("Index", "DN")" class="btn btn-success btn-sm">
                                                            <i class="fas fa-chart-bar me-1"></i>
                                                            Dashboard
                                                        </a>
                                                        <button type="button" class="btn btn-info btn-sm" onclick="exportToExcel()">
                                                            <i class="fas fa-file-excel me-1"></i>
                                                            Export Excel
                                                        </button>
                                                        <button type="button" class="btn btn-warning btn-sm"
                                                            onclick="showFilterGuide()">
                                                            <i class="fas fa-question-circle me-1"></i>
                                                            Hướng dẫn
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Hidden inputs for limit options -->
                                            <input type="hidden" name="limitType" id="limitTypeInput"
                                                value="@ViewBag.CurrentLimitType">
                                            <input type="hidden" name="customStart" id="customStartInput"
                                                value="@ViewBag.CurrentCustomStart">
                                            <input type="hidden" name="customEnd" id="customEndInput"
                                                value="@ViewBag.CurrentCustomEnd">
                                            <input type="hidden" name="customFilter" id="customFilterInput"
                                                value="@ViewBag.CurrentCustomFilter">
                                            <input type="hidden" name="evenStart" id="evenStartInput"
                                                value="@ViewBag.CurrentEvenStart">
                                            <input type="hidden" name="evenEnd" id="evenEndInput" value="@ViewBag.CurrentEvenEnd">
                                            <input type="hidden" name="oddStart" id="oddStartInput"
                                                value="@ViewBag.CurrentOddStart">
                                            <input type="hidden" name="oddEnd" id="oddEndInput" value="@ViewBag.CurrentOddEnd">
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </nav>

                <!-- Main Container -->
                <div class="main-container">
                    <div class="content-wrapper">

                        <!-- Page Header -->
                        <div class="statistics-section">
                            <div class="row text-center">
                                <div class="col-md-3">
                                    <div class="stat-item">
                                        <div class="stat-number">@String.Format("{0:N0}", ViewBag.TotalRecords ?? 0)</div>
                                        <div class="stat-label">Tổng records</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="stat-item">
                                        <div class="stat-number">@String.Format("{0:N0}", ViewBag.FilteredRecords ?? 0)</div>
                                        <div class="stat-label">Sau lọc</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="stat-item">
                                        <div class="stat-number">@String.Format("{0:N0}", ViewBag.DisplayedRecords ?? 0)</div>
                                        <div class="stat-label">Hiển thị</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="stat-item">
                                        <div class="stat-number">
                                            @{
                                                var currentLimitType = ViewBag.CurrentLimitType?.ToString() ?? "first1000";
                                                var limitDisplayText = currentLimitType switch
                                                {
                                                    "first1000" => "1000 đầu",
                                                    "last1000" => "1000 cuối",
                                                    "even" => "STT chẵn",
                                                    "odd" => "STT lẻ",
                                                    "random" => "Random",
                                                    "custom" => "Tự chọn",
                                                    "all" => "Tất cả",
                                                    _ => "1000 đầu"
                                                };
                                            }
                                            @limitDisplayText
                                        </div>
                                        <div class="stat-label">Giới hạn</div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Error Message -->
                        @if (!string.IsNullOrEmpty(ViewBag.Error?.ToString()))
                        {
                            <div class="alert alert-danger">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                @ViewBag.Error
                            </div>
                        }

                        <!-- Success Message -->
                        @if (TempData["SuccessMessage"] != null)
                        {
                            <div class="alert alert-success">
                                <i class="fas fa-check-circle me-2"></i>
                                @TempData["SuccessMessage"]
                            </div>
                        }

                        <!-- Data Table -->
                        <div class="table-container">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5 class="mb-0">
                                    <i class="fas fa-table me-2"></i>
                                    Bảng dữ liệu doanh nghiệp
                                </h5>
                                <div class="d-flex gap-2">
                                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="refreshTable()">
                                        <i class="fas fa-sync-alt me-1"></i>
                                        Làm mới
                                    </button>
                                                            <button type="button" class="btn btn-outline-success btn-sm" onclick="exportToExcel()" title="Tải về file Excel với dữ liệu hiện tại">
                            <i class="fas fa-file-excel me-1"></i>
                            Export Excel
                        </button>
                                </div>
                            </div>

                            <div class="table-responsive">
                                <table id="dataTable" class="table table-striped table-hover">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>STT</th>
                                            <th>Năm</th>
                                            <th>Mã số thuế</th>
                                            <th>Tên DN</th>
                                            <th>Loại hình KT</th>
                                            <th>Mã tỉnh</th>
                                            <th>Mã huyện</th>
                                            <th>Mã xã</th>
                                            <th>Địa chỉ</th>
                                            <th>Điện thoại</th>
                                            <th>Email</th>
                                            <th>Vùng KT</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model)
                                        {
                                            <tr>
                                                <td>@item.STT</td>
                                                <td>@item.Nam</td>
                                                <td>@(item.Masothue ?? "N/A")</td>
                                                <td>@(item.TenDN ?? "N/A")</td>
                                                <td>@(item.Loaihinhkte ?? "N/A")</td>
                                                <td>@(item.MaTinh_Dieutra ?? "N/A")</td>
                                                <td>@(item.MaHuyen_Dieutra ?? "N/A")</td>
                                                <td>@(item.MaXa_Dieutra ?? "N/A")</td>
                                                <td>@(item.Diachi ?? "N/A")</td>
                                                <td>@(item.Dienthoai ?? "N/A")</td>
                                                <td>@(item.Email ?? "N/A")</td>
                                                <td>@(item.Region ?? "N/A")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>

                    </div>
                </div>

                <!-- Bootstrap JS Bundle -->
                <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
                <!-- jQuery -->
                <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
                <!-- DataTables JS -->
                <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
                <script src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>
                <script src="https://cdn.datatables.net/responsive/2.5.0/js/dataTables.responsive.min.js"></script>
                <script src="https://cdn.datatables.net/responsive/2.5.0/js/responsive.bootstrap5.min.js"></script>

                <!-- Navigation Filter JavaScript Functions -->
                <script>
                    // Navigation Filter Toggle Function
                    function toggleNavigationFilter() {
                        const filterSection = document.getElementById('navigationFilterSection');
                        const filterChevron = document.getElementById('filterChevron');
                        const toggleText = document.getElementById('filterToggleText');
                        const toggleIcon = document.getElementById('filterToggleIcon');

                        if (filterSection.style.display === 'none' || !filterSection.style.display) {
                            // Show filter
                            filterSection.style.display = 'block';
                            filterChevron.classList.add('rotated');
                            toggleText.textContent = 'Thu gọn';
                            toggleIcon.className = 'fas fa-chevron-up me-1';

                            // Save state to localStorage
                            localStorage.setItem('navigationFilterExpanded', 'true');

                            console.log('📖 Navigation filter expanded');
                        } else {
                            // Hide filter
                            filterSection.style.display = 'none';
                            filterChevron.classList.remove('rotated');
                            toggleText.textContent = 'Bộ lọc';
                            toggleIcon.className = 'fas fa-filter me-1';

                            // Save state to localStorage
                            localStorage.setItem('navigationFilterExpanded', 'false');

                            // Close any open dropdowns when hiding
                            document.querySelectorAll('.dropdown-options').forEach(dropdown => {
                                dropdown.style.display = 'none';
                            });

                            console.log('📝 Navigation filter collapsed');
                        }
                    }

                    // Toggle dropdown visibility
                    function toggleDropdown(element) {
                        const dropdown = element.nextElementSibling;
                        const isVisible = dropdown.style.display === 'block';

                        // Close all other dropdowns first
                        document.querySelectorAll('.dropdown-options').forEach(d => {
                            if (d !== dropdown) d.style.display = 'none';
                        });

                        // Toggle current dropdown
                        dropdown.style.display = isVisible ? 'none' : 'block';

                        // Update selected display
                        updateSelectedDisplay(element);
                    }

                    // Filter options based on search input
                    function filterOptions(searchInput) {
                        const filter = searchInput.value.toLowerCase();
                        const dropdown = searchInput.parentElement;
                        const labels = dropdown.querySelectorAll('label');

                        labels.forEach(label => {
                            const text = label.textContent.toLowerCase();
                            if (text.includes(filter)) {
                                label.style.display = 'block';
                            } else {
                                label.style.display = 'none';
                            }
                        });
                    }

                    // Update selected options display
                    function updateSelectedDisplay(selectBox) {
                        const dropdown = selectBox.nextElementSibling;
                        const selectedSpan = selectBox.querySelector('.selected-options');
                        const checkedInputs = dropdown.querySelectorAll('input[type="checkbox"]:checked, input[type="radio"]:checked');
                        const placeholder = selectedSpan.getAttribute('data-placeholder');

                        if (checkedInputs.length === 0) {
                            selectedSpan.textContent = placeholder;
                        } else if (checkedInputs.length === 1) {
                            selectedSpan.textContent = checkedInputs[0].nextSibling.textContent.trim();
                        } else {
                            selectedSpan.textContent = `${checkedInputs.length} mục đã chọn`;
                        }
                    }

                    // Clear all filters
                    function clearAllFilters() {
                        // Uncheck all checkboxes and radio buttons
                        document.querySelectorAll('input[type="checkbox"], input[type="radio"]').forEach(input => {
                            input.checked = false;
                        });

                        // Reset all select displays
                        document.querySelectorAll('.select-box').forEach(selectBox => {
                            updateSelectedDisplay(selectBox);
                        });

                        // Clear hidden inputs
                        document.querySelectorAll('input[type="hidden"]').forEach(input => {
                            input.value = '';
                        });

                        console.log('🧹 All filters cleared');
                    }

                    // Close dropdowns when clicking outside
                    document.addEventListener('click', function (event) {
                        if (!event.target.closest('.custom-multi-select')) {
                            document.querySelectorAll('.dropdown-options').forEach(dropdown => {
                                dropdown.style.display = 'none';
                            });
                        }
                    });

                    // Initialize filter UI and load dynamic data
                    document.addEventListener('DOMContentLoaded', function () {
                        console.log('🔧 Initializing ViewRawData filter UI...');

                        // Check saved state
                        const isExpanded = localStorage.getItem('navigationFilterExpanded') === 'true';

                        if (isExpanded) {
                            // Expand filter if it was previously expanded
                            setTimeout(() => {
                                toggleNavigationFilter();
                            }, 100);
                        }

                        // Load dynamic filter options from database
                        loadDynamicFilterOptions();

                        // Initialize DataTable
                        initializeDataTable();

                        document.querySelectorAll('.select-box').forEach(selectBox => {
                            updateSelectedDisplay(selectBox);
                        });
                    });

                    // Load dynamic filter options from database
                    function loadDynamicFilterOptions() {
                        console.log('📡 Loading dynamic filter options from database...');

                        fetch('/DN/GetFilterOptions')
                            .then(response => {
                                console.log('📡 Filter options response status:', response.status);
                                return response.json();
                            })
                            .then(data => {
                                console.log('📊 Filter options data:', data);

                                if (data.success) {
                                    console.log('✅ Filter options loaded successfully');

                                    // Populate each filter dropdown
                                    populateFilterDropdown('yearFilter', data.filters.years, 'Nam', @Html.Raw(Json.Serialize(ViewBag.CurrentNam ?? new List<string>())));
                                    populateFilterDropdown('businessTypeFilter', data.filters.businessTypes, 'Loaihinhkte', @Html.Raw(Json.Serialize(ViewBag.CurrentLoaihinhkte ?? new List<string>())));
                                    populateFilterDropdown('provinceFilter', data.filters.provinces, 'MaTinh_Dieutra', @Html.Raw(Json.Serialize(ViewBag.CurrentMaTinh ?? new List<string>())));
                                    populateFilterDropdown('economicZoneFilter', data.filters.economicZones, 'Vungkinhte', @Html.Raw(Json.Serialize(ViewBag.CurrentVungkinhte ?? new List<string>())));

                                    // Populate limit type filter (different structure)
                                    populateLimitTypeFilter();

                                    // Initialize event listeners after options are loaded
                                    initializeFilterEventListeners();

                                    // Update display for all filters
                                    document.querySelectorAll('.select-box').forEach(selectBox => {
                                        updateSelectedDisplay(selectBox);
                                    });

                                    console.log('✅ All filters populated successfully');
                                } else {
                                    console.error('❌ Failed to load filter options:', data.message);
                                    console.log('⚠️ Using fallback options');
                                    loadFallbackFilterOptions();
                                }
                            })
                            .catch(error => {
                                console.error('❌ Error loading filter options:', error);
                                console.log('⚠️ Using fallback options');
                                loadFallbackFilterOptions();
                            });
                    }

                    // Populate individual filter dropdown
                    function populateFilterDropdown(filterId, options, fieldName, currentValues) {
                        const filterElement = document.getElementById(filterId);
                        if (!filterElement) {
                            console.warn(`⚠️ Filter element ${filterId} not found`);
                            return;
                        }

                        const dropdown = filterElement.querySelector('.dropdown-options');
                        const searchBox = dropdown.querySelector('.search-box');

                        // Clear existing options (except search box)
                        const existingLabels = dropdown.querySelectorAll('label');
                        existingLabels.forEach(label => label.remove());

                        // Add new options
                        let optionsHTML = '';
                        options.forEach(option => {
                            const isChecked = currentValues && currentValues.includes(option) ? 'checked' : '';
                            optionsHTML += `
                                            <label>
                                                <input type="checkbox" name="${fieldName}" value="${option}" ${isChecked} /> ${option}
                                            </label>
                                        `;
                        });

                        // Insert after search box
                        if (searchBox) {
                            searchBox.insertAdjacentHTML('afterend', optionsHTML);
                        } else {
                            dropdown.innerHTML = optionsHTML;
                        }

                        console.log(`✅ Populated ${filterId} with ${options.length} options`);
                    }

                    // Populate limit type filter (special handling)
                    function populateLimitTypeFilter() {
                        const filterElement = document.getElementById('limitTypeFilter');
                        if (!filterElement) {
                            console.warn('⚠️ Limit type filter element not found');
                            return;
                        }

                        const dropdown = filterElement.querySelector('.dropdown-options');
                        const currentLimitType = '@ViewBag.CurrentLimitType' || 'first1000';

                        const limitOptions = [
                            { value: 'first1000', text: '1000 đầu tiên' },
                            { value: 'last1000', text: '1000 cuối cùng' },
                            { value: 'even', text: 'STT chẵn' },
                            { value: 'odd', text: 'STT lẻ' },
                            { value: 'random', text: 'Random 1000' },
                            { value: 'custom', text: 'Tự chọn khoảng' },
                            { value: 'all', text: 'Tất cả (tối đa 5000)' }
                        ];

                        let optionsHTML = '';
                        limitOptions.forEach(option => {
                            const isChecked = currentLimitType === option.value ? 'checked' : '';
                            optionsHTML += `
                                            <label onclick="handleLimitTypeChange('${option.value}')">
                                                <input type="radio" name="limitTypeRadio" value="${option.value}" ${isChecked} /> ${option.text}
                                            </label>
                                        `;
                        });

                        dropdown.innerHTML = optionsHTML;
                        console.log('✅ Populated limit type filter');
                    }

                    // Handle limit type change
                    function handleLimitTypeChange(limitType) {
                        console.log('🔄 Limit type changed to:', limitType);

                        // Update hidden input
                        document.getElementById('limitTypeInput').value = limitType;

                        // Update display
                        const limitBox = document.getElementById('limitTypeFilter').querySelector('.select-box');
                        updateSelectedDisplay(limitBox);

                        // Show additional options for custom, even, odd
                        if (limitType === 'custom') {
                            promptCustomRange();
                        } else if (limitType === 'even') {
                            promptEvenRange();
                        } else if (limitType === 'odd') {
                            promptOddRange();
                        }
                    }

                    // Prompt for custom range
                    function promptCustomRange() {
                        const start = prompt('Nhập STT bắt đầu:', '1');
                        const end = prompt('Nhập STT kết thúc:', '1000');
                        const filter = prompt('Bộ lọc (all/even/odd):', 'all');

                        if (start && end) {
                            document.getElementById('customStartInput').value = start;
                            document.getElementById('customEndInput').value = end;
                            document.getElementById('customFilterInput').value = filter || 'all';
                            console.log('✅ Custom range set:', start, '-', end, filter);
                        }
                    }

                    // Prompt for even range
                    function promptEvenRange() {
                        const start = prompt('Nhập STT chẵn bắt đầu:', '2');
                        const end = prompt('Nhập STT chẵn kết thúc:', '1000');

                        if (start && end) {
                            document.getElementById('evenStartInput').value = start;
                            document.getElementById('evenEndInput').value = end;
                            console.log('✅ Even range set:', start, '-', end);
                        }
                    }

                    // Prompt for odd range
                    function promptOddRange() {
                        const start = prompt('Nhập STT lẻ bắt đầu:', '1');
                        const end = prompt('Nhập STT lẻ kết thúc:', '999');

                        if (start && end) {
                            document.getElementById('oddStartInput').value = start;
                            document.getElementById('oddEndInput').value = end;
                            console.log('✅ Odd range set:', start, '-', end);
                        }
                    }

                    // Initialize event listeners after filters are populated
                    function initializeFilterEventListeners() {
                        // Add change event listeners to all checkboxes and radio buttons
                        document.querySelectorAll('.dropdown-options input[type="checkbox"], .dropdown-options input[type="radio"]').forEach(input => {
                            input.addEventListener('change', function () {
                                const selectBox = this.closest('.custom-multi-select').querySelector('.select-box');
                                updateSelectedDisplay(selectBox);
                            });
                        });

                        console.log('✅ Filter event listeners initialized');
                    }

                    // Fallback options if API fails
                    function loadFallbackFilterOptions() {
                        const fallbackData = {
                            years: ['2018', '2019', '2020', '2021', '2022', '2023', '2024'],
                            businessTypes: ['Công ty TNHH', 'Công ty cổ phần', 'Doanh nghiệp tư nhân', 'Doanh nghiệp nhà nước'],
                            provinces: ['Hà Nội', 'Hồ Chí Minh', 'Đà Nẵng', 'Hải Phòng', 'Cần Thơ'],
                            economicZones: ['Đông Nam Bộ', 'Đồng bằng Sông Hồng', 'Duyên hải Nam Trung Bộ']
                        };

                        populateFilterDropdown('yearFilter', fallbackData.years, 'Nam', []);
                        populateFilterDropdown('businessTypeFilter', fallbackData.businessTypes, 'Loaihinhkte', []);
                        populateFilterDropdown('provinceFilter', fallbackData.provinces, 'MaTinh_Dieutra', []);
                        populateFilterDropdown('economicZoneFilter', fallbackData.economicZones, 'Vungkinhte', []);
                        populateLimitTypeFilter();

                        initializeFilterEventListeners();
                        console.log('✅ Fallback options loaded');
                    }

                    // Initialize DataTable
                    function initializeDataTable() {
                        $('#dataTable').DataTable({
                            responsive: true,
                            pageLength: 25,
                            order: [[0, 'asc']],
                            language: {
                                "sProcessing": "Đang xử lý...",
                                "sLengthMenu": "Hiển thị _MENU_ mục",
                                "sZeroRecords": "Không tìm thấy dòng nào phù hợp",
                                "sInfo": "Hiển thị _START_ đến _END_ trong tổng số _TOTAL_ mục",
                                "sInfoEmpty": "Hiển thị 0 đến 0 trong tổng số 0 mục",
                                "sInfoFiltered": "(được lọc từ _MAX_ mục)",
                                "sSearch": "Tìm kiếm:",
                                "oPaginate": {
                                    "sFirst": "Đầu",
                                    "sPrevious": "Trước",
                                    "sNext": "Tiếp",
                                    "sLast": "Cuối"
                                }
                            },
                            columnDefs: [
                                { targets: [0], width: "5%" },
                                { targets: [1], width: "7%" },
                                { targets: [2], width: "10%" },
                                { targets: [3], width: "20%" },
                                { targets: [4], width: "12%" },
                                { targets: [5, 6, 7], width: "7%" },
                                { targets: [8], width: "15%" },
                                { targets: [9, 10], width: "10%" },
                                { targets: [11], width: "7%" }
                            ]
                        });

                        console.log('✅ DataTable initialized');
                    }

                    // Debug filters function
                    function debugFilters() {
                        console.log('🔍 DEBUGGING FILTERS...');

                        const formData = new FormData();

                        // Collect all filter data
                        document.querySelectorAll('input[type="checkbox"]:checked').forEach(cb => {
                            formData.append(cb.name, cb.value);
                        });

                        document.querySelectorAll('input[type="radio"]:checked').forEach(radio => {
                            formData.append(radio.name, radio.value);
                        });

                        document.querySelectorAll('input[type="hidden"]').forEach(hidden => {
                            if (hidden.value) {
                                formData.append(hidden.name, hidden.value);
                            }
                        });

                        // Log all collected data
                        for (let [key, value] of formData.entries()) {
                            console.log(`${key}: ${value}`);
                        }

                        // Call debug endpoint
                        fetch('/DN/DebugFilters?' + new URLSearchParams(formData))
                            .then(response => response.json())
                            .then(data => {
                                console.log('📊 Debug response:', data);
                                alert('Debug completed! Check console for details.');
                            })
                            .catch(error => {
                                console.error('❌ Debug error:', error);
                                alert('Debug failed: ' + error.message);
                            });
                    }

                    // Export to Excel function
                    function exportToExcel() {
                        console.log('📊 Exporting to Excel...');

                        const form = document.querySelector('.filter-form');

                        if (!form) {
                            alert('❌ Không tìm thấy form filters. Vui lòng thử lại.');
                            return;
                        }

                        const formData = new FormData(form);

                        // Convert to URL parameters
                        const params = new URLSearchParams();

                        // Add all form data
                        for (let [key, value] of formData.entries()) {
                            params.append(key, value);
                        }

                        // Add hidden input values for limit options
                        const hiddenInputs = document.querySelectorAll('input[type="hidden"]');
                        hiddenInputs.forEach(input => {
                            if (input.value && input.name) {
                                params.append(input.name, input.value);
                            }
                        });

                        // Collect checkbox values (for multiple selections)
                        const checkboxes = document.querySelectorAll('input[type="checkbox"]:checked');
                        checkboxes.forEach(checkbox => {
                            if (checkbox.name && checkbox.value) {
                                params.append(checkbox.name, checkbox.value);
                            }
                        });

                        // Collect radio button values
                        const radios = document.querySelectorAll('input[type="radio"]:checked');
                        radios.forEach(radio => {
                            if (radio.name && radio.value) {
                                params.append(radio.name, radio.value);
                            }
                        });

                        console.log('📊 Export parameters:', params.toString());

                        // Create download link
                        const exportUrl = '/DN/ExportToExcel?' + params.toString();

                        // Show loading message
                        const originalText = event.target.innerHTML;
                        event.target.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Đang xuất...';
                        event.target.disabled = true;

                        // Create a temporary link to trigger download
                        const link = document.createElement('a');
                        link.href = exportUrl;
                        link.style.display = 'none';
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);

                        // Reset button after a short delay
                        setTimeout(() => {
                            event.target.innerHTML = originalText;
                            event.target.disabled = false;

                            // Show success message
                            const alertDiv = document.createElement('div');
                            alertDiv.className = 'alert alert-success alert-dismissible fade show mt-3';
                            alertDiv.innerHTML = `
                                <i class="fas fa-check-circle me-2"></i>
                                <strong>Thành công!</strong> File Excel đang được tải về.
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            `;

                            // Insert alert before table container
                            const tableContainer = document.querySelector('.table-container');
                            if (tableContainer) {
                                tableContainer.parentNode.insertBefore(alertDiv, tableContainer);

                                // Auto remove alert after 5 seconds
                                setTimeout(() => {
                                    if (alertDiv.parentNode) {
                                        alertDiv.remove();
                                    }
                                }, 5000);
                            }
                        }, 1000);
                    }

                    // Refresh table function
                    function refreshTable() {
                        window.location.reload();
                    }

                            // Show filter guide
        function showFilterGuide() {
            const guide = `🎯 HƯỚNG DẪN SỬ DỤNG BỘ LỌC VIEWRAWDATA

📋 BỘ LỌC NAVIGATION:
   • Click nút "Bộ lọc" để mở/đóng
   • Multi-select: Giữ Ctrl + Click để chọn nhiều
   • Search: Gõ để tìm kiếm trong dropdown
   • Tự động lưu trạng thái mở/đóng

🔍 CÁC BỘ LỌC:
   • Năm: Chọn năm dữ liệu
   • Tỉnh/Thành phố: Lọc theo địa phương  
   • Loại hình KT: Lọc theo loại hình kinh tế
   • Vùng KT: Lọc theo vùng kinh tế
   • Giới hạn: Chọn cách hiển thị dữ liệu

📊 GIỚI HẠN DỮ LIỆU:
   • 1000 đầu: Hiển thị 1000 records đầu tiên
   • 1000 cuối: Hiển thị 1000 records cuối cùng
   • STT chẵn/lẻ: Lọc theo số thứ tự
   • Tự chọn: Nhập khoảng STT tùy ý
   • Tất cả: Hiển thị tối đa 5000 records

⚡ TÍNH NĂNG:
   • Export Excel: Xuất dữ liệu đã lọc
   • Debug: Kiểm tra bộ lọc
   • DataTable: Tìm kiếm, sắp xếp, phân trang
   • Responsive: Tự động điều chỉnh trên mobile

💡 MẸO:
   • Dùng tìm kiếm trong dropdown để tìm nhanh
   • Có thể chọn nhiều mục trong cùng bộ lọc
   • Bộ lọc sẽ nhớ trạng thái khi điều hướng

📥 EXPORT EXCEL:
   • Click nút "Export Excel" để tải file
   • File sẽ chứa đúng dữ liệu đang hiển thị
   • Bao gồm tất cả cột và thông tin filter
   • Tên file có timestamp và thông tin bộ lọc`;
            
            alert(guide);
        }

        // Test Export Excel function
        function testExportExcel() {
            console.log('🧪 TESTING EXPORT EXCEL FUNCTION...');
            
            // Check if form exists
            const form = document.querySelector('.filter-form');
            console.log('📋 Form found:', form ? 'Yes' : 'No');
            
            if (!form) {
                alert('❌ Form not found for export');
                return;
            }
            
            // Collect all form data for testing
            const formData = new FormData(form);
            const params = new URLSearchParams();
            
            console.log('📊 Form elements found:');
            
            // Check form inputs
            const allInputs = form.querySelectorAll('input, select');
            console.log(`   - Total inputs: ${allInputs.length}`);
            
            // Check hidden inputs
            const hiddenInputs = document.querySelectorAll('input[type="hidden"]');
            console.log(`   - Hidden inputs: ${hiddenInputs.length}`);
            hiddenInputs.forEach(input => {
                if (input.value) {
                    console.log(`     - ${input.name}: ${input.value}`);
                    params.append(input.name, input.value);
                }
            });
            
            // Check checkboxes
            const checkboxes = document.querySelectorAll('input[type="checkbox"]:checked');
            console.log(`   - Checked checkboxes: ${checkboxes.length}`);
            checkboxes.forEach(checkbox => {
                console.log(`     - ${checkbox.name}: ${checkbox.value}`);
                params.append(checkbox.name, checkbox.value);
            });
            
            // Check radio buttons
            const radios = document.querySelectorAll('input[type="radio"]:checked');
            console.log(`   - Selected radios: ${radios.length}`);
            radios.forEach(radio => {
                console.log(`     - ${radio.name}: ${radio.value}`);
                params.append(radio.name, radio.value);
            });
            
            const exportUrl = '/DN/ExportToExcel?' + params.toString();
            console.log('🔗 Export URL:', exportUrl);
            
            alert(`✅ Export URL generated successfully!\n\nParameters found:\n- Hidden inputs: ${hiddenInputs.length}\n- Checkboxes: ${checkboxes.length}\n- Radio buttons: ${radios.length}\n\nCheck console for details.`);
            
            return exportUrl;
        }
                </script>
            </body>

            </html>