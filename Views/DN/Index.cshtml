@using CIResearch.Models;
@using System.Text.Json;

@{
    ViewData["Title"] = "Dashboard Doanh Nghiệp - CI Research";
    Layout = null;
    var loaihinhData = ViewBag.loaihinhData != null ? ViewBag.loaihinhData : "[]";
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <style>
        /* Reset và Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background-image: url('/IMG(4UU)/STOREAUDIT.jpg');
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center center;
            background-attachment: fixed;
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
        }

        /* Header Navigation */
        .top-nav {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 1rem 0;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 1000;
            transition: all 0.3s ease;
        }

        /* Navigation Filter Styles */
        .filter-toggle-btn {
            border-color: rgba(255, 255, 255, 0.5) !important;
            color: white !important;
            transition: all 0.3s ease;
            font-size: 0.875rem;
            padding: 0.375rem 0.75rem;
        }

        .filter-toggle-btn:hover {
            background-color: rgba(255, 255, 255, 0.1) !important;
            border-color: white !important;
            color: white !important;
            transform: translateY(-1px);
        }

        .filter-toggle-btn:focus {
            box-shadow: 0 0 0 0.2rem rgba(255, 255, 255, 0.25) !important;
            color: white !important;
        }

        #navigationFilterSection {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 0 0 15px 15px;
            border-top: 1px solid rgba(255, 255, 255, 0.2);
            animation: slideDown 0.3s ease-out;
        }

        @@keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .nav-filter-container {
            padding: 1rem;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .nav-filter-header {
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }

        .nav-filter-body .custom-multi-select {
            width: 100%;
            margin: 0;
        }

        .nav-filter-body .select-box {
            background-color: rgba(255, 255, 255, 0.9);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 6px;
            color: #333;
            font-size: 0.875rem;
            padding: 0.5rem;
        }

        .nav-filter-body .select-box:hover {
            background-color: white;
            border-color: #007bff;
        }

        .nav-filter-body .dropdown-options {
            background-color: white;
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 6px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            z-index: 10000;
        }

        .nav-filter-body .btn {
            font-size: 0.875rem;
            padding: 0.4rem 0.8rem;
            border-radius: 6px;
            transition: all 0.2s ease;
        }

        .nav-filter-body .btn-outline-light {
            border-color: rgba(255, 255, 255, 0.5);
            color: white;
        }

        .nav-filter-body .btn-outline-light:hover {
            background-color: white;
            color: #333;
            border-color: white;
        }

        .nav-filter-body .btn-light {
            background-color: white;
            color: #333;
            border-color: white;
        }

        .nav-filter-body .btn-light:hover {
            background-color: #f8f9fa;
            transform: translateY(-1px);
        }

        .nav-filter-body .btn-success {
            background-color: #28a745;
            border-color: #28a745;
        }

        .nav-filter-body .btn-success:hover {
            background-color: #218838;
            transform: translateY(-1px);
        }

        .nav-filter-body .btn-info {
            background-color: #17a2b8;
            border-color: #17a2b8;
        }

        .nav-filter-body .btn-info:hover {
            background-color: #138496;
            transform: translateY(-1px);
        }

        .nav-filter-body .btn-warning {
            background-color: #ffc107;
            border-color: #ffc107;
            color: #333;
        }

        .nav-filter-body .btn-warning:hover {
            background-color: #e0a800;
            transform: translateY(-1px);
        }

        /* Chevron animation */
        #filterChevron {
            transition: transform 0.3s ease;
        }

        #filterChevron.rotated {
            transform: rotate(180deg);
        }

        /* Mobile responsiveness for navigation filter */
        @@media (max-width: 768px) {
            .nav-filter-body .row .col-lg-2 {
                margin-bottom: 0.5rem;
            }
            
            .filter-toggle-btn {
                font-size: 0.75rem;
                padding: 0.25rem 0.5rem;
            }
            
            .filter-toggle-btn span {
                display: none;
            }
            
            .nav-filter-container {
                padding: 0.75rem;
            }
            
            .nav-filter-body .btn {
                font-size: 0.75rem;
                padding: 0.3rem 0.6rem;
            }
        }

        @@media (max-width: 576px) {
            .top-nav {
                padding: 0.75rem 0;
            }
            
            .nav-brand {
                font-size: 1.2rem;
            }
            
            .user-info {
                font-size: 0.8rem;
            }
        }

        .nav-brand {
            color: white;
            font-size: 1.5rem;
            font-weight: 700;
            text-decoration: none;
            display: flex;
            align-items: center;
        }

        .nav-brand:hover {
            color: #f8f9fa;
            text-decoration: none;
        }

        .nav-brand i {
            margin-right: 0.5rem;
        }

        .user-info {
            color: white;
            font-weight: 500;
        }

        /* Container chính */
        .main-container {
            width: 100%;
            min-height: calc(100vh - 80px);
            padding: 0;
            margin: 0;
        }

        /* Content wrapper */
        .content-wrapper {
            width: 100%;
            padding: 2rem;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            min-height: calc(100vh - 80px);
        }

    /* Table styles */
    .table-container {
        background: white;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    /* Filter styles */
    .custom-multi-select {
        position: relative;
        width: 215px;
        margin: 0 auto;
    }

    .select-box {
        padding: 10px;
        border: 1px solid #ccc;
        cursor: pointer;
        background-color: #fff;
        position: relative;
        border-radius: 8px;
    }

    .selected-options {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        width: 100%;
    }

    .arrow {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%) rotate(45deg);
        border: solid #666;
        border-width: 0 2px 2px 0;
        padding: 3px;
    }

    .dropdown-options {
        display: none;
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background-color: #fff;
        border: 1px solid #ccc;
        max-height: 200px;
        overflow-y: auto;
        z-index: 9999; /* Increased z-index */
        border-radius: 8px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); /* Enhanced shadow */
    }

    /* Ensure parent containers don't clip dropdown */
    .custom-multi-select {
        position: relative;
        width: 215px;
        margin: 0 auto;
        z-index: 1000; /* Base z-index for container */
    }

    .custom-multi-select.active {
        z-index: 10000; /* Higher z-index when active */
    }

    .dropdown-options label {
        display: block;
        padding: 8px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .dropdown-options label:hover {
        background-color: #f0f0f0;
    }

    .search-box {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-bottom: 2px solid #007bff;
        font-size: 14px;
        outline: none;
        border-radius: 8px 8px 0 0;
    }

    .search-box:focus {
        border-color: #007bff;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
    }

    /* Card styles */
    .metric-card {
        background: white;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        border: 1px solid #e5e7eb;
        height: 100%;
    }

    .metric-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
    }

    .metric-value {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 10px;
        line-height: 1;
    }

    .metric-label {
        font-size: 1rem;
        font-weight: 500;
        color: #6b7280;
        margin-bottom: 15px;
    }

    /* Chart styles */
    .chart-container {
        background: white;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .chart-title {
        color: #374151;
        font-weight: 600;
        margin-bottom: 15px;
        font-size: 1.1rem;
        text-align: center;
    }

    .chart-container canvas {
        max-height: 300px !important;
        width: 100% !important;
    }

    /* Trend Chart specific styles */
    .trend-chart-container {
        position: relative !important;
        width: 100% !important;
        height: 400px !important;
        overflow: hidden;
    }

    #trendChart {
        position: relative !important;
        width: 100% !important;
        height: 100% !important;
        display: block !important;
        visibility: visible !important;
        opacity: 1 !important;
    }

    /* Progress bar styles */
    .progress {
        height: 12px !important;
        background-color: #e5e7eb !important;
        border-radius: 10px !important;
        overflow: hidden !important;
        box-shadow: none !important;
    }

    .progress-bar {
        height: 100% !important;
        border-radius: 10px !important;
        transition: width 1.2s ease !important;
        font-weight: normal !important;
        text-align: left !important;
    }

    /* Additional filter CSS for search box */
    .search-box {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-bottom: 2px solid #007bff;
        font-size: 14px;
        outline: none;
    }

    .search-box:focus {
        border-color: #007bff;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
    }

    /* Enhanced Metric Cards */
    .metric-card {
        background: white;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        border: 1px solid #e5e7eb;
        height: 100%;
    }

    .metric-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
    }

    .metric-value {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 10px;
        line-height: 1;
    }

    .metric-label {
        font-size: 1rem;
        font-weight: 500;
        color: #6b7280;
        margin-bottom: 15px;
    }

    .progress-modern {
        height: 12px;
        background: #e5e7eb;
        border-radius: 10px;
        overflow: hidden;
        margin-bottom: 8px;
        position: relative;
        width: 100%;
    }

    .progress-bar-modern {
        height: 100%;
        border-radius: 10px;
        transition: width 1.2s ease;
        background-color: currentColor;
        position: relative;
    }

    .metric-percentage {
        font-size: 0.9rem;
        font-weight: 600;
        color: #6b7280;
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 5px;
    }

    .metric-ratio {
        font-size: 0.8rem;
        color: #9ca3af;
    }

    /* Custom Progress Bar Styling for Technology Cards */
    .metric-card .progress {
        height: 12px !important;
        background-color: #e5e7eb !important;
        border-radius: 10px !important;
        overflow: hidden !important;
        box-shadow: none !important;
    }

    .metric-card .progress-bar {
        height: 100% !important;
        border-radius: 10px !important;
        transition: width 1.2s ease !important;
        font-weight: normal !important;
        text-align: left !important;
        /* Colors will be set inline via style attribute */
    }

    .tooltip-container {
        position: relative;
        display: inline-block;
    }

    .tooltip-container .custom-tooltip {
        display: none;
        /* ?n m?c d?nh */
        position: absolute;
        top: -200px;
        /*i?u ch?nh v? tr tooltip */
        right: 90%;
        transform: translateX(90%);
        background-color: #e3f2fd;
        /* Xanh duong nh?t, t?o c?m gic y t? */
        color: #0d47a1;
        /* Xanh duong d?m cho ch? */
        padding: 15px 20px;
        border-radius: 8px;
        /* Vi?n bo trn */
        font-size: 0.9em;
        line-height: 1.6;
        white-space: nowrap;
        z-index: 1000;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        /* Hi?u ?ng d? bng nh? */
        border: 1px solid #90caf9;
        /*u?ng vi?n xanh nh?t */
        font-family: "Arial", sans-serif;
        /* Font ch? don gi?n, d? d?c */
        transform-origin: top center;
        text-align: left;
        /* Can tri n?i dung */
    }

    .tooltip-container:hover .custom-tooltip {
        display: block;
        /* Hi?n th? tooltip khi hover */
    }

    /* Specific chart heights */
    #businessTypeChartContainer .chart-container {
        max-height: 350px;
    }



    .tooltip-container .custom-tooltip strong {
        color: #1565c0;
        /* Xanh d?m d? nh?n m?nh */
    }

    /* Ho?t ?nh t?i trang */
    /* Ho?t ?nh t?i trang */
    .loader {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        /* L?p m? mu xm */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        /*?m b?o loader lun n?m trn cng */
    }

    .loader img {
        width: 800px;
        /* Kch thu?c hnh GIF, c th? di?u ch?nh */
        height: auto;
        /* Kch thu?c hnh GIF, c th? di?u ch?nh */
    }

    /* Ki?u dng thanh ti?n d? */
    .progress {
        height: 30px;
        /*? cao c?a thanh ti?n d? */
        background-color: #f1f1f1;
        /* Mu n?n nh?t */
        border-radius: 10px;
        /* Bo gc thanh ti?n d? */
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        /* Thm bng nh? */
    }

    /* Ki?u dng thanh ti?n d? bn trong */
    .progress-bar {
        font-weight: bold;
        /* Lm d?m ch? */
        text-align: center;
        /* Can gi?a ch? */
        color: white;
        /* Mu ch? tr?ng */
        border-radius: 10px;
        /* Bo gc cho thanh ti?n d? */
        transition: width 0.5s ease-in-out;
        /* Hi?u ?ng chuy?n d?ng mu?t m khi thay d?i t? l? */
    }

    /* Mu s?c ph h?p v?i ch? d? y t? */
    .progress-bar-striped {
        background-image: linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);
        background-size: 40px 40px;
    }

    /* C?i thi?n d? d?c cho ch? */
    .progress-bar span {
        font-size: 1.2em;
        /* Tang kch thu?c ch? */
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        /* Thm bng cho ch? */
    }

    /* Mu s?c thanh ti?n d? ty thu?c vo ti?n d? */
    .progress-bar {
        background-color: #28a745;
        /* Mu xanh l */
    }

    .progress-bar[data-completion="warning"] {
        background-color: #ffc107;
        /* Mu vng khi ti?n d? ? m?c trung bnh */
    }

    .progress-bar[data-completion="danger"] {
        background-color: #dc3545;
        /* Mu d? khi g?n hon thnh */
    }



    .sparkle {
        fill: #AAAAAA;
        transition: all 800ms ease;
    }

    .text {
        font-weight: 600;
        color: #AAAAAA;
        font-size: medium;
    }

    .btn:hover {
        background: linear-gradient(0deg, #5bc0de, #008c8c);
        /* Mu xanh duong v xanh lam */
        box-shadow: inset 0px 1px 0px 0px rgba(255, 255, 255, 0.4), inset 0px -4px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 4px rgba(255, 255, 255, 0.2), 0px 0px 180px 0px #5bc0de;
        /* Thm bng m? mu xanh duong */
        transform: translateY(-2px);
    }

    .btn:hover .text {
        color: white;
    }

    .btn:hover .sparkle {
        fill: white;
        transform: scale(1.2);
    }


    #map {
        border: 1px solid #ddd;
        /* Thm vi?n n?u mu?n */
        border-radius: 8px;
        /* Bo gc nh? */
        overflow: hidden;
        /* ?n n?i dung trn n?u c */
    }

    /* Enhanced Stats Cards */
    .stats-card {
        background: white;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        border: 1px solid #e5e7eb;
        height: 100%;
        min-height: 120px;
    }

    .stats-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    .stats-card .icon {
        width: 50px;
        height: 50px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 15px;
        color: white;
        font-size: 20px;
    }

    .stats-card .stats-value {
        font-size: 2rem;
        font-weight: 700;
        color: #1f2937;
        margin: 0;
        line-height: 1.1;
    }

    .stats-card .stats-label {
        font-size: 0.9rem;
        color: #6b7280;
        margin: 5px 0;
        font-weight: 500;
    }

    .stats-card small {
        font-size: 0.75rem;
        color: #9ca3af;
        font-style: italic;
    }

    /* Override Bootstrap progress styling */
    .progress {
        background-color: #e5e7eb !important;
        border-radius: 10px !important;
        overflow: hidden;
    }

    .progress .progress-bar {
        border-radius: 10px !important;
        transition: width 1.2s ease !important;
    }

    /* Custom Progress Bar Styling for Technology Cards */
    .metric-card .progress {
        height: 12px !important;
        background-color: #e5e7eb !important;
        border-radius: 10px !important;
        overflow: hidden !important;
        box-shadow: none !important;
    }

    .metric-card .progress-bar {
        height: 100% !important;
        border-radius: 10px !important;
        transition: width 1.2s ease !important;
        font-weight: normal !important;
        text-align: left !important;
        /* Colors will be set inline via style attribute */
    }

    /* Chart Styles */
    .chart-container {
        background: white;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .chart-legend {
        padding: 20px;
        background: #f8f9fa;
        border-radius: 10px;
        height: 400px;
        overflow-y: auto;
    }

    .legend-item {
        display: flex;
        align-items: center;
        margin-bottom: 12px;
        padding: 8px;
        background: white;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .legend-color {
        width: 20px;
        height: 20px;
        border-radius: 4px;
        margin-right: 12px;
        flex-shrink: 0;
    }

    .legend-text {
        flex: 1;
        font-size: 14px;
        font-weight: 500;
    }

    .legend-value {
        font-size: 13px;
        color: #6c757d;
        margin-left: 8px;
    }

    .legend-percentage {
        font-size: 12px;
        color: #28a745;
        font-weight: 600;
    }

    /* Ensure chart visibility */
    #vungKinhTeChart {
        display: block !important;
        width: 100% !important;
        height: 100% !important;
        max-width: 100%;
        max-height: 380px;
    }

    .chart-container canvas {
        width: 100% !important;
        height: 100% !important;
    }

    /* Phân bố theo Ngành nghề Chart - Enhanced */
    .industry-chart-card {
        height: 100%;
        display: flex;
        flex-direction: column;
        min-height: 900px; /* Increased minimum height */
    }
    .industry-chart-card .card-body {
        flex: 1;
        padding: 1rem;
        display: flex;
    }
    .industry-chart-card .row {
        flex: 1;
        margin: 0;
    }
    .industry-chart-card .col-md-8 {
        height: 100%;
        padding: 0;
    }
    .industry-chart-card .chart-container {
        height: 100% !important;
        min-height: 800px; /* Increased chart container height */
        width: 100%;
    }
    
    /* Industry Chart Canvas Specific */
    #industryChart {
        height: 800px !important; /* Fixed height for industry chart */
        max-height: 800px !important;
    }
    
    /* Industry Chart Legend Specific */
    .industry-chart-legend {
        height: 800px !important; /* Match chart height */
        overflow-y: auto;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
    }
    
    /* Statistics Cards Auto-Update Animations */
    .col-xl-3 {
        transition: all 0.3s ease;
    }
    
    .col-xl-3:hover {
        transform: translateY(-2px);
    }
    
    .statistics-loading-spinner {
        animation: spin 1s linear infinite;
    }
    
    @@keyframes spin {
        from { transform: translate(-50%, -50%) rotate(0deg); }
        to { transform: translate(-50%, -50%) rotate(360deg); }
    }
    
    /* Statistics update notification animations */
    .statistics-update-notification {
        animation: slideInFromRight 0.3s ease-out;
    }
    
    @@keyframes slideInFromRight {
        from {
            opacity: 0;
            transform: translateX(100%);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    /* Enhanced card hover effects for better UX */
    .card.border-left {
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }
    
    .card.border-left::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
        transition: left 0.5s ease;
    }
    
    .card.border-left:hover::before {
        left: 100%;
    }
    
    .card.border-left:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }
    
    /* Auto-update indicator */
    .auto-update-indicator {
        position: absolute;
        top: 5px;
        right: 5px;
        background: #28a745;
        color: white;
        border-radius: 50%;
        width: 12px;
        height: 12px;
        font-size: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        animation: pulse 2s ease-in-out infinite;
    }
    
    @@keyframes pulse {
        0% { 
            transform: scale(1);
            opacity: 1;
        }
        50% { 
            transform: scale(1.2);
            opacity: 0.7;
        }
        100% { 
            transform: scale(1);
            opacity: 1;
        }
    }
    </style>
</head>

<body>
    <!-- Top Navigation with Integrated Filter -->
    <nav class="top-nav">
        <div class="container-fluid">
            <!-- Main Navigation Row -->
            <div class="row align-items-center">
                <div class="col-md-6">
                    <a href="#" class="nav-brand">
                        <i class="fas fa-building"></i>
                        CÔNG TY TNHH CI RESEARCH test upload
                    </a>
                </div>
                <div class="col-md-4 text-end">
                    <div class="user-info">
                        @if (Context.Session.GetString("Username") != null)
                        {
                                    <span>Xin chào @Context.Session.GetString("Username")!</span>
                        }
                        else
                        {
                                    <span>Khách</span>
                        }
                    </div>
                </div>
                <div class="col-md-2 text-end">
                    <!-- Filter Toggle Button -->
                    <button class="btn btn-outline-light btn-sm filter-toggle-btn" onclick="toggleNavigationFilter()" id="filterToggleBtn">
                        <i class="fas fa-filter me-1" id="filterToggleIcon"></i>
                        <span id="filterToggleText">Bộ lọc</span>
                        <i class="fas fa-chevron-down ms-1" id="filterChevron"></i>
                    </button>
            </div>
        </div>
            
            <!-- Collapsible Filter Section -->
            <div class="row mt-3" id="navigationFilterSection" style="display: none;">
                <div class="col-12">
                    <div class="nav-filter-container">
                        <div class="nav-filter-header">
                            <h6 class="mb-0 text-white">
                <i class="fas fa-filter me-2"></i>
                    Bộ lọc dữ liệu doanh nghiệp
                            </h6>
            </div>
                        <div class="nav-filter-body">
                        <form method="get" action="@Url.Action("Index", "DN")" class="filter-form">
                                <div class="row g-2">
                                    <!-- Năm Multi-select -->
                                    <div class="col-lg-2 col-md-4 col-sm-6">
                                <div class="custom-multi-select" id="yearFilter">
                                    <div class="select-box" onclick="toggleDropdown(this)">
                                        <span class="selected-options" data-placeholder="Năm">Năm</span>
                                        <i class="arrow"></i>
                                    </div>
                                    <div class="dropdown-options">
                                        <input type="text" class="search-box" placeholder="Tìm kiếm năm" oninput="filterOptions(this)">
                                            </div>
                                    </div>
                    </div>

                                    <!-- Tỉnh/Thành phố Multi-select -->
                                    <div class="col-lg-2 col-md-4 col-sm-6">
                                <div class="custom-multi-select" id="provinceFilter">
                                    <div class="select-box" onclick="toggleDropdown(this)">
                                        <span class="selected-options" data-placeholder="Tỉnh/Thành phố">Tỉnh/Thành phố</span>
                                        <i class="arrow"></i>
                                    </div>
                                    <div class="dropdown-options">
                                        <input type="text" class="search-box" placeholder="Tìm kiếm tỉnh thành" oninput="filterOptions(this)">
                                            </div>
                                    </div>
                    </div>

                                    <!-- Loại hình kinh tế Multi-select -->
                                    <div class="col-lg-2 col-md-4 col-sm-6">
                                <div class="custom-multi-select" id="businessTypeFilter">
                                    <div class="select-box" onclick="toggleDropdown(this)">
                                        <span class="selected-options" data-placeholder="Loại hình kinh tế">Loại hình kinh tế</span>
                                        <i class="arrow"></i>
                                    </div>
                                    <div class="dropdown-options">
                                        <input type="text" class="search-box" placeholder="Tìm kiếm loại hình" oninput="filterOptions(this)">
                                            </div>
                                    </div>
                    </div>

                                    <!-- Vùng kinh tế Multi-select -->
                                    <div class="col-lg-2 col-md-4 col-sm-6">
                                <div class="custom-multi-select" id="economicZoneFilter">
                                    <div class="select-box" onclick="toggleDropdown(this)">
                                        <span class="selected-options" data-placeholder="Vùng kinh tế">Vùng kinh tế</span>
                                        <i class="arrow"></i>
                                    </div>
                                    <div class="dropdown-options">
                                        <input type="text" class="search-box" placeholder="Tìm kiếm vùng kinh tế" oninput="filterOptions(this)">
                                            </div>
                    </div>
                </div>

                                    <!-- Quy mô doanh nghiệp -->
                                    <div class="col-lg-2 col-md-4 col-sm-6">
                                <div class="custom-multi-select" id="companySizeFilter">
                                    <div class="select-box" onclick="toggleDropdown(this)">
                                        <span class="selected-options" data-placeholder="Quy mô">Quy mô</span>
                                        <i class="arrow"></i>
                                    </div>
                                    <div class="dropdown-options">
                                        <input type="text" class="search-box" placeholder="Tìm kiếm quy mô" oninput="filterOptions(this)">
                                            </div>
                                    </div>
                                </div>

                                    <!-- Quick Actions -->
                                    <div class="col-lg-2 col-md-4 col-sm-6">
                                        <div class="d-flex gap-1">
                                            <button type="button" class="btn btn-outline-light btn-sm flex-fill" onclick="clearAllFilters()" title="Xóa bộ lọc">
                                                <i class="fas fa-times"></i>
                                            </button>
                                            <button type="button" class="btn btn-outline-light btn-sm flex-fill" onclick="refreshAllCharts()" title="Cập nhật charts">
                                                <i class="fas fa-sync"></i>
                                            </button>
                                        </div>
                                    </div>
                            </div>

                                <!-- Action Buttons Row -->
                                <div class="row mt-2">
                                    <div class="col-12">
                                        <div class="d-flex flex-wrap gap-1 justify-content-center">
                                            <button type="submit" class="btn btn-light btn-sm">
                        <i class="fas fa-search me-1"></i>
                                                Áp dụng bộ lọc
                    </button>
                                            <button type="button" class="btn btn-success btn-sm" onclick="refreshAllCharts()">
                                    <i class="fas fa-chart-bar me-1"></i>
                                                Cập nhật Charts
                                </button>
                                            <a href="@Url.Action("ViewRawData", "DN")" class="btn btn-info btn-sm">
                        <i class="fas fa-table me-1"></i>
                                                Dữ liệu chi tiết
                                            </a>
                                            <button type="button" class="btn btn-warning btn-sm" onclick="showFilterGuide()">
                                                <i class="fas fa-question-circle me-1"></i>
                                                Hướng dẫn
                    </button>
                                            <button type="button" class="btn btn-primary btn-sm" onclick="testAutoUpdate()">
                                                <i class="fas fa-sync-alt me-1"></i>
                                                Test Auto-Update Cards
                    </button>
                                            <button type="button" class="btn btn-info btn-sm" onclick="debugCompanyCountDiscrepancy()">
                        <i class="fas fa-search me-1"></i>
                                                Debug Discrepancy
                    </button>
                                            <button type="button" class="btn btn-danger btn-sm" onclick="debugRevenueDataInDatabase()">
                                                <i class="fas fa-database me-1"></i>
                                                Debug Revenue NULL
                    </button>
                                            <button type="button" class="btn btn-warning btn-sm" onclick="compareCodeVsDatabase()">
                                                <i class="fas fa-balance-scale me-1"></i>
                                                Code vs DB
                    </button>
                                        </div>
                                    </div>
                </div>
            </form>
                    </div>
                </div>
            </div>
        </div>
        </div>
    </nav>

    <!-- Main Container -->
    <div class="main-container">
        <div class="content-wrapper">
    <!-- Modern Dashboard Header -->
    @* <div class="card shadow mb-4" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border: none;">
        <div class="card-body text-white">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h1 class="display-6 fw-bold mb-2">
                        <i class="fas fa-building me-3"></i>
                        Dashboard Doanh Nghiệp
                    </h1>
                    <p class="lead mb-0 opacity-75">
                        Phân tích và báo cáo tổng hợp dữ liệu doanh nghiệp Việt Nam
                    </p>
                </div>
                <div class="col-md-4 text-end">
                    <div class="d-flex flex-column align-items-end">
                        <div class="mb-2">
                            <i class="fas fa-calendar-alt me-2"></i>
                            <span class="fw-semibold">@DateTime.Now.ToString("dd/MM/yyyy")</span>
                        </div>
                        <div class="small opacity-75">
                            <i class="fas fa-clock me-1"></i>
                            Cập nhật: @ViewBag.LastImportTime?.ToString("HH:mm")
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div> *@

    <div class="container-fluid px-3">
        <!-- Current Year Display -->
        <div class="alert alert-info text-center mb-4" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border: none; color: white;">
            <h4 class="mb-2">
                <i class="fas fa-calendar-alt me-2"></i>
                Dữ liệu phân tích năm <strong>@ViewBag.CurrentAnalysisYear</strong>
            </h4>
            <p class="mb-0">
                <i class="fas fa-info-circle me-2"></i>
                Có thể chọn năm khác thông qua bộ lọc bên dưới
                @if (ViewBag.AvailableYears != null)
                {
                    <span class="ms-2">
                        (Có sẵn: @string.Join(", ", (List<int>)ViewBag.AvailableYears))
                    </span>
                }
            </p>
        </div>

        <!-- Filter has been moved to top navigation -->

         <!-- Main Statistics Summary Cards (Similar to Admin) -->
        <div class="row mb-4">
                      <!-- Tổng số doanh nghiệp -->
         <div class="col-xl-3 col-md-6 mb-4">
             <div class="card border-left shadow h-100 py-2" style="background-color:rgb(136,146,214); padding: 20px;">
                 <div class="auto-update-indicator" title="Tự động cập nhật khi thay đổi bộ lọc">
                     <i class="fas fa-sync-alt"></i>
                 </div>
                 <div class="card-body" style="padding: 20px;">
                     <div class="row no-gutters align-items-center">
                         <div class="col mr-2 ">
                             <h5 class="m-0 font-weight-bold text-white">
                                 Tổng doanh nghiệp (@ViewBag.CurrentAnalysisYear)
                             </h5>
                             <div class="h3 mb-0 font-weight text-white">
                                 <span style="font-size: 0.55em;">Số DN</span> <span id="totalCompanies">@ViewBag.TotalCompanies</span>
                </div>
            </div>
                             <div class="col-auto">
                                 <i class="fas fa-building fa-2x text-white"></i>
        </div>
                </div>
                 </div>
            </div>
        </div>

         <!-- Tổng số lao động -->
         <div class="col-xl-3 col-md-6 mb-4">
             <div class="card border-left shadow h-100 py-2" style="background-color:rgb(69,187,224);padding: 20px;">
                 <div class="auto-update-indicator" title="Tự động cập nhật khi thay đổi bộ lọc">
                     <i class="fas fa-sync-alt"></i>
                 </div>
                 <div class="card-body" style="padding: 20px;">
                     <div class="row no-gutters align-items-center">
                         <div class="col mr-2">
                             <h5 class="m-0 font-weight-bold text-white">
                                 Tổng lao động (@ViewBag.CurrentAnalysisYear)
                             </h5>
                             <div class="h3 mb-0 font-weight text-white">
                                 <span style="font-size: 0.55em;">Người</span> <span id="totalLabor">@String.Format("{0:N0}", ViewBag.TotalLabor ?? 0)</span>
                </div>
            </div>
                         <div class="col-auto">
                             <i class="fas fa-users fa-2x text-white"></i>
        </div>
                </div>
            </div>
        </div>
    </div>

         <!-- Phân bố theo miền -->
         <div class="col-xl-3 col-md-6 mb-4">
             <div class="card border-left shadow h-100 py-2" style="background-color:rgb(240,98,146);padding: 20px;">
                 <div class="auto-update-indicator" title="Tự động cập nhật khi thay đổi bộ lọc">
                     <i class="fas fa-sync-alt"></i>
                 </div>
                 <div class="card-body" style="padding: 20px;">
                     <div class="row no-gutters align-items-center">
                         <div class="col mr-2">
                             <h5 class="m-0 font-weight-bold text-white">
                                 DN theo miền (@ViewBag.CurrentAnalysisYear)
                             </h5>
                             <div class="h3 mb-0 font-weight text-white">
                                 <span style="font-size: 0.55em;">Miền Bắc</span> <span id="mienBacCount">@ViewBag.MienBacCount</span> <span style="font-size: 0.55em;"></span>
                </div>
                             <div class="h3 mb-0 font-weight text-white">
                                 <span style="font-size: 0.55em;">Miền Trung</span> @ViewBag.MienTrungCount <span style="font-size: 0.55em;"></span>
            </div>
                             <div class="h3 mb-0 font-weight text-white">
                                 <span style="font-size: 0.55em;">Miền Nam</span> @ViewBag.MienNamCount <span style="font-size: 0.55em;"></span>
        </div>
                </div>
                         <div class="col-auto">
                             <i class="fas fa-map-marked-alt fa-2x text-white" style="vertical-align: 60px;"></i>
            </div>
        </div>
                </div>
            </div>
        </div>

         <!-- Phân loại doanh nghiệp - Top 3 từ database thực tế -->
         <div class="col-xl-3 col-md-6 mb-4">
             <div class="card border-left shadow h-100 py-2" style="background-color:rgb(120,195,80);padding: 20px;">
                 <div class="auto-update-indicator" title="Tự động cập nhật khi thay đổi bộ lọc">
                     <i class="fas fa-sync-alt"></i>
                 </div>
                 <div class="card-body" style="padding: 20px;">
                     <div class="row no-gutters align-items-center">
                         <div class="col mr-2">
                             <h5 class="m-0 font-weight-bold text-white">Phân loại DN (top 3)</h5>
                             <div class="h3 mb-0 font-weight text-white">
                                 <span style="font-size: 0.45em;">@(ViewBag.TopBusinessType1Name?.ToString().Length > 25 ? ViewBag.TopBusinessType1Name?.ToString().Substring(0, 22) + "..." : ViewBag.TopBusinessType1Name)</span> @String.Format("{0:N0}", ViewBag.TopBusinessType1Count)
                             </div>
                             <div class="h3 mb-0 font-weight text-white">
                                 <span style="font-size: 0.45em;">@(ViewBag.TopBusinessType2Name?.ToString().Length > 25 ? ViewBag.TopBusinessType2Name?.ToString().Substring(0, 22) + "..." : ViewBag.TopBusinessType2Name)</span> @String.Format("{0:N0}", ViewBag.TopBusinessType2Count)
                             </div>
                             <div class="h3 mb-0 font-weight text-white">
                                 <span style="font-size: 0.45em;">@(ViewBag.TopBusinessType3Name?.ToString().Length > 25 ? ViewBag.TopBusinessType3Name?.ToString().Substring(0, 22) + "..." : ViewBag.TopBusinessType3Name)</span> @String.Format("{0:N0}", ViewBag.TopBusinessType3Count)
                             </div>
                         </div>
                         <div class="col-auto">
                             <i class="fas fa-building fa-2x text-white" style="vertical-align: 60px;"></i>
                         </div>
                     </div>
                 </div>
            </div>
        </div>
    </div>

    <!-- Financial Summary Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card-body border-0 shadow-sm">
                <div class="card-header bg-gradient text-white text-center"
                    style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-line me-2"></i>
                        Tóm tắt tài chính doanh nghiệp (Năm @ViewBag.CurrentAnalysisYear)
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                         <div class="col-xl-3 col-lg-6 col-md-6 col-sm-6">
                            <div class="border-end py-3">
                                 <h4 class="text-primary mb-1">@String.Format("{0:N0}", ViewBag.CompaniesWithRevenue ?? 0)</h4>
                                    <small class="text-muted">DN có doanh thu</small>
                            </div>
                        </div>
                         <div class="col-xl-3 col-lg-6 col-md-6 col-sm-6">
                            <div class="border-end py-3">
                                 <h4 class="text-success mb-1">@String.Format("{0:N0}", ViewBag.CompaniesWithAssets ?? 0)</h4>
                                <small class="text-muted">DN có tài sản</small>
                            </div>
                        </div>
                         <div class="col-xl-3 col-lg-6 col-md-6 col-sm-6">
                            <div class="border-end py-3">
                                 <h4 class="text-warning mb-1">@String.Format("{0:N0}", ViewBag.CompaniesWithProfit ?? 0)</h4>
                                <small class="text-muted">DN có lợi nhuận</small>
                            </div>
                        </div>
                         <div class="col-xl-3 col-lg-6 col-md-6 col-sm-6">
                             <div class="py-3">
                                <h4 class="text-info mb-1">@String.Format("{0:N2}", (ViewBag.TotalAssetsCK ?? 0m) / 1000000000m) tỷ</h4>
                                <small class="text-muted">Tổng tài sản cuối kỳ</small>
                             </div>
                         </div>
                     </div>
                </div>
            </div>
        </div>
    </div>
       
    </div>

        <!-- Charts Section -->
    <div class="mt-5">
        <div class="row">
            <!-- Vùng Kinh Tế Chart -->
             <!-- Vùng Kinh Tế Chart -->
            <div class="col-lg-6 mb-4">
                <div class="card shadow h-100">
                    <div class="card-header py-3 text-center" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                        <h6 class="m-0 font-weight-bold text-white">
                            <i class="fas fa-map-marked-alt me-2"></i>
                            Phân bố theo Vùng Kinh tế
                        </h6>
                        <!-- Debug buttons -->
                        <div class="mt-2">
                            <button onclick="testVungKinhTeData()" class="btn btn-sm btn-warning me-1" style="font-size: 0.7rem;">
                                <i class="fas fa-bug"></i> Test
                            </button>
                            <button onclick="createTestChart()" class="btn btn-sm btn-success me-1" style="font-size: 0.7rem;">
                                <i class="fas fa-chart-pie"></i> Force
                            </button>
                        </div>
                    </div>
                    <div class="card-body p-2">
                        <div class="row">
                            <div class="col-md-7">
                                <div class="chart-container" style="position: relative; height: 300px;">
                                    <canvas id="vungKinhTeChart"></canvas>
                                </div>
                            </div>
                            <div class="col-md-5">
                                <div class="chart-legend" style="height: 300px; overflow-y: auto; padding: 10px;">
                                    <h6 class="text-muted mb-2" style="font-size: 0.9rem;">Chi tiết:</h6>
                                    <div id="chartLegendDetails">
                                        <!-- Legend details will be populated by JavaScript -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- QUY MO CHART - NEW VERSION -->
            <div class="col-lg-6 mb-4">
                <div class="card shadow h-100">
                    <div class="card-header py-3 text-center" style="background: linear-gradient(135deg, #28a745 0%, #20c997 100%);">
                        <h6 class="m-0 font-weight-bold text-white">
                            <i class="fas fa-building me-2"></i>
                            Phân bố theo Quy mô Doanh nghiệp
                        </h6>
                        <small class="text-white-50">Dữ liệu từ cột QUY_MO</small>
                    </div>
                    <div class="card-body p-2">
                        <div class="row">
                            <div class="col-md-7">
                                <div class="chart-container" style="position: relative; height: 300px;">
                                    <canvas id="newQuyMoChart"></canvas>
                                </div>
                            </div>
                            <div class="col-md-5">
                                <div class="chart-legend" style="height: 300px; overflow-y: auto; padding: 10px;">
                                    <h6 class="text-muted mb-2" style="font-size: 0.9rem;">Chi tiết:</h6>
                                    <div id="newQuyMoLegendDetails">
                                        <!-- Legend details will be populated by JavaScript -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    

    <!-- Phân bố theo Ngành nghề Chart -->
    <style>
        .industry-chart-card {
            height: 100%;
            display: flex;
            flex-direction: column;
        }
        .industry-chart-card .card-body {
            flex: 1;
            padding: 1rem;
            display: flex;
        }
        .industry-chart-card .row {
            flex: 1;
            margin: 0;
        }
        .industry-chart-card .col-md-8 {
            height: 100%;
            padding: 0;
        }
        .industry-chart-card .chart-container {
            height: 100% !important;
            min-height: 700px;
            width: 100%;
        }
    </style>



    <div class="mt-4">
        <div class="row">
            <div class="col-12">
                <div class="card shadow industry-chart-card">
                    <div class="card-header py-3 text-center" style="background: linear-gradient(135deg, #6f42c1 0%, #e83e8c 100%);">
                        <h6 class="m-0 font-weight-bold text-white">
                            <i class="fas fa-industry me-2"></i>
                            Phân bố Doanh nghiệp theo Ngành nghề
                        </h6>
                    </div>
                    <div class="card-body p-3">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="chart-container" style="position: relative; height: 800px; min-height: 800px;">
                                    <canvas id="industryChart"></canvas>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="industry-chart-legend">
                                    <h6 class="text-muted mb-3" style="font-size: 0.9rem; text-align: center;">
                                        <i class="fas fa-list-ul me-1"></i>
                                        Top ngành nghề
                                    </h6>
                                    
                                    <!-- Test Buttons -->
                                    <div class="text-center mb-3">
                                        <button onclick="verifyIndustryData()" class="btn btn-sm btn-info me-2" style="font-size: 0.8rem;">
                                            <i class="fas fa-check-circle me-1"></i>
                                            Verify Data
                                        </button>
                                        <button onclick="testIndustryDataFromDatabase()" class="btn btn-sm btn-primary" style="font-size: 0.8rem;">
                                            <i class="fas fa-database me-1"></i>
                                            Test Database
                                        </button>
                                    </div>
                                    
                                    <div id="industryLegendDetails">
                                        <!-- Legend details will be populated by JavaScript -->
                                    </div>
                                </div>
                            </div>
                             </div>
                         </div>
                     </div>
                </div>
            </div>
        </div>

       

        <!-- Top Companies Charts Section -->
        <div class="mt-4">
            <!-- Search Section -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card shadow">
                        <div class="card-header py-3 text-center" style="background: linear-gradient(135deg, #6c757d 0%, #495057 100%);">
                            <h6 class="m-0 font-weight-bold text-white">
                                <i class="fas fa-search me-2"></i>
                                Tìm kiếm doanh nghiệp theo mã số thuế
                            </h6>
                        </div>
                        <div class="card-body p-3">
                            <div class="row justify-content-center">
                                <div class="col-md-6">
                                    <div class="input-group">
                                        <input type="text" id="taxCodeSearch" class="form-control" placeholder="Nhập mã số thuế để tìm kiếm..." maxlength="20">
                                        <button class="btn btn-primary" type="button" onclick="searchCompanyByTaxCode()">
                                            <i class="fas fa-search me-1"></i>
                                            Tìm kiếm
                                        </button>
                                        <button class="btn btn-outline-secondary" type="button" onclick="clearSearch()">
                                            <i class="fas fa-times me-1"></i>
                                            Xóa
                                        </button>
                                    </div>
                                    <small class="text-muted">Ví dụ: 0123456789 (chỉ nhập số và ký tự)</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>



            <!-- Search Results Section (Initially Hidden) -->
            <div id="searchResultsSection" style="display: none;">
                <div class="row">
                    <!-- Searched Company Revenue Chart -->
                    <div class="col-lg-6 mb-4">
                        <div class="card shadow h-100">
                            <div class="card-header py-3 text-center" style="background: linear-gradient(135deg, #17a2b8 0%, #6610f2 100%);">
                                <h6 class="m-0 font-weight-bold text-white">
                                    <i class="fas fa-building me-2"></i>
                                    <span id="searchedCompanyRevenueName">Doanh Thu Doanh Nghiệp</span>
                                </h6>
                                <small class="text-white-50" id="searchedCompanyRevenueCode">Mã số thuế: </small>
                            </div>
                            <div class="card-body p-3">
                                <div class="chart-container" style="position: relative; height: 350px; width: 100%; background-color: #ffffff; border: 1px solid #dee2e6; border-radius: 8px; padding: 10px;">
                                    <canvas id="searchedRevenueChart" style="width: 100% !important; height: 100% !important; display: block !important;"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Searched Company Profit Chart -->
                    <div class="col-lg-6 mb-4">
                        <div class="card shadow h-100">
                            <div class="card-header py-3 text-center" style="background: linear-gradient(135deg, #dc3545 0%, #fd7e14 100%);">
                                <h6 class="m-0 font-weight-bold text-white">
                                    <i class="fas fa-building me-2"></i>
                                    <span id="searchedCompanyProfitName">Lợi Nhuận Doanh Nghiệp</span>
                                </h6>
                                <small class="text-white-50" id="searchedCompanyProfitCode">Mã số thuế: </small>
                            </div>
                            <div class="card-body p-3">
                                <div class="chart-container" style="position: relative; height: 350px; width: 100%; background-color: #ffffff; border: 1px solid #dee2e6; border-radius: 8px; padding: 10px;">
                                    <canvas id="searchedProfitChart" style="width: 100% !important; height: 100% !important; display: block !important;"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Market Share Analysis Section -->
        <div class="mt-4">
            <div class="row">
                <div class="col-12">
                    <div class="card shadow">
                                                 <div class="card-header py-3 text-center" style="background: linear-gradient(135deg, #8e44ad 0%, #3498db 100%);">
                             <h6 class="m-0 font-weight-bold text-white">
                                 <i class="fas fa-chart-pie me-2"></i>
                                 Phân tích Market Share - Top 10 Doanh Nghiệp
                                 <i class="fas fa-info-circle ms-2" 
                                    title="Market Share chỉ phân tích các DN có dữ liệu doanh thu > 0. Số DN trong chart này có thể khác với tổng DN trong Cards vì không phải tất cả DN đều có dữ liệu doanh thu."
                                    style="cursor: help; color: rgba(255,255,255,0.8);">
                                 </i>
                             </h6>
                             <small class="text-white-50">Market Share = (Doanh thu DN / Tổng doanh thu thị trường) × 100%</small>
                             
                             <!-- Debug buttons -->
                             <div class="mt-2">
                                 <button onclick="testMarketShareAPI()" class="btn btn-sm btn-warning me-1" style="font-size: 0.7rem;">
                                     <i class="fas fa-bug"></i> Test API
                                 </button>
                                 <button onclick="createMarketShareChart()" class="btn btn-sm btn-success me-1" style="font-size: 0.7rem;">
                                     <i class="fas fa-chart-pie"></i> Force Chart
                                 </button>

                                 <button onclick="refreshMarketShareChart()" class="btn btn-sm btn-primary me-1" style="font-size: 0.7rem;">
                                     <i class="fas fa-sync"></i> Refresh
                                 </button>
                             </div>
                         </div>
                        <div class="card-body p-3">
                            <div class="row">
                                                                 <div class="col-md-8">
                                     <div class="chart-container" style="position: relative; height: 600px; width: 100%; background-color: #ffffff; border: 1px solid #dee2e6; border-radius: 8px; padding: 10px; overflow: visible;">
                                         <canvas id="marketShareChart" style="width: 100% !important; height: 580px !important; display: block !important; max-height: 580px !important;"></canvas>
                                     </div>
                                 </div>
                                <div class="col-md-4">
                                    <div class="chart-legend" style="height: 600px; overflow-y: auto; padding: 15px; background: #f8f9fa; border-radius: 8px;">
                                        <h6 class="text-muted mb-3" style="font-size: 0.9rem; text-align: center;">
                                            <i class="fas fa-percentage me-1"></i>
                                            Chi tiết Market Share
                                        </h6>
                                        <div id="marketShareLegendDetails">
                                            <!-- Market share legend details will be populated by JavaScript -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
</div>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>

<!-- Custom CSS for Chart Sizing -->
<style>
#marketShareChart {
    min-height: 480px !important;
    max-height: 500px !important;
    width: 100% !important;
    padding: 15px; /* Add padding inside canvas area */
}

.chart-container {
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    padding: 25px !important; /* Add padding to container */
    overflow: visible !important; /* Ensure labels don't get clipped */
}

/* Market Share specific chart container */
#marketShareChart + .chart-container {
    padding: 30px 20px 40px 20px !important; /* Top, Right, Bottom, Left */
}

/* Market Share External Labels Enhancement */
.chart-container {
    position: relative !important;
}

#marketShareChart {
    position: relative !important;
    z-index: 1 !important;
}

/* Ensure external labels are visible */
.chartjs-datalabels {
    z-index: 1000 !important;
    pointer-events: none !important;
}

/* Market Share Chart specific styles */
.market-share-chart-wrapper {
    overflow: visible !important;
    position: relative !important;
    padding: 20px; /* Extra padding for wrapper */
}

/* Market Share Chart Container Enhancement */
.card:has(#marketShareChart) .card-body {
    padding: 2rem !important; /* More padding for Market Share card */
}

/* Ensure perfect circle aspect ratio */
#marketShareChart {
    aspect-ratio: 1.2 !important; /* Match JS aspectRatio */
    object-fit: contain !important;
}

/* Prevent chart distortion */
.chart-container canvas {
    max-width: 100% !important;
    max-height: 100% !important;
    object-fit: contain !important;
}

.card:has(#marketShareChart) .chart-container {
    min-height: 550px !important; /* Adjusted for new aspect ratio */
    max-height: 580px !important; /* Prevent over-stretching */
    padding: 40px 30px 50px 30px !important; /* Extra space at bottom */
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
}

/* Animation for external labels */
@@keyframes labelFadeIn {
    from {
        opacity: 0;
        transform: scale(0.8);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

.market-share-external-label {
    animation: labelFadeIn 0.5s ease-out;
}
</style>

<!-- Database Connection Status Alert Script -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    console.log('🔍 Checking database connection status...');
    
    @{
        var dbConnected = ViewBag.DatabaseConnected ?? false;
        var dbMessage = ViewBag.DatabaseMessage ?? "";
        var dbDetails = ViewBag.DatabaseDetails ?? "";
    }
    
    var isConnected = @Html.Raw(dbConnected.ToString().ToLower());
    var message = '@Html.Raw(Html.Encode(dbMessage))';
    var details = '@Html.Raw(Html.Encode(dbDetails))';
    
    console.log('📊 Database Status:', {
        connected: isConnected,
        message: message,
        details: details
    });
    
    // Show alert with database status
    if (isConnected) {
        // Success alert with auto-dismiss
        showDatabaseAlert('success', message, details, true);
        console.log('✅ Database connection successful!');
    } else {
        // Error alert that stays visible
        showDatabaseAlert('danger', message, details, false);
        console.log('❌ Database connection failed!');
    }
});

function showDatabaseAlert(type, message, details, autoDismiss) {
    // Create alert element
    var alertId = 'database-status-alert';
    var existingAlert = document.getElementById(alertId);
    
    // Remove existing alert if present
    if (existingAlert) {
        existingAlert.remove();
    }
    
    var alertHtml = `
        <div id="${alertId}" class="alert alert-${type} alert-dismissible fade show" role="alert" style="
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            min-width: 350px;
            max-width: 500px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            ${type === 'success' ? 'background: linear-gradient(135deg, #28a745, #20c997);' : 'background: linear-gradient(135deg, #dc3545, #fd7e14);'}
            color: white;
            border: none;
            animation: slideInRight 0.5s ease-out;
        ">
            <div style="display: flex; align-items: flex-start;">
                <div style="margin-right: 10px; font-size: 1.2em;">
                    ${type === 'success' ? '✅' : '❌'}
                </div>
                <div style="flex: 1;">
                    <strong>${message}</strong>
                    <br>
                    <small style="opacity: 0.9;">${details}</small>
                </div>
            </div>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert" aria-label="Close" style="
                position: absolute;
                top: 8px;
                right: 8px;
                opacity: 0.8;
            "></button>
        </div>
    `;
    
    // Add CSS for animation if not exists
    if (!document.getElementById('alert-animations')) {
        var style = document.createElement('style');
        style.id = 'alert-animations';
        style.textContent = `
            @@keyframes slideInRight {
                from {
                    opacity: 0;
                    transform: translateX(100%);
                }
                to {
                    opacity: 1;
                    transform: translateX(0);
                }
            }
            @@keyframes slideOutRight {
                from {
                    opacity: 1;
                    transform: translateX(0);
                }
                to {
                    opacity: 0;
                    transform: translateX(100%);
                }
            }
        `;
        document.head.appendChild(style);
    }
    
    // Add alert to page
    document.body.insertAdjacentHTML('afterbegin', alertHtml);
    
    // Auto-dismiss success alerts after 5 seconds
    if (autoDismiss) {
        setTimeout(function() {
            var alert = document.getElementById(alertId);
            if (alert) {
                alert.style.animation = 'slideOutRight 0.5s ease-out';
                setTimeout(function() {
                    var bsAlert = bootstrap.Alert.getInstance(alert);
                    if (bsAlert) {
                        bsAlert.close();
                    } else {
                        alert.remove();
                    }
                }, 500);
            }
        }, 5000);
    }
}

// Global function to manually test database connection
function testDatabaseConnection() {
    console.log('🔍 Manual database connection test...');
    fetch('/DN/TestDatabaseConnection')
        .then(response => response.json())
        .then(data => {
            if (data.DatabaseConnected) {
                showDatabaseAlert('success', data.message || '✅ Kết nối database thành công!', data.connectionString || 'Connection successful', true);
            } else {
                showDatabaseAlert('danger', data.message || '❌ Kết nối database thất bại!', data.error || 'Connection failed', false);
            }
        })
        .catch(error => {
            console.error('❌ Error testing database connection:', error);
            showDatabaseAlert('danger', '❌ Lỗi kiểm tra kết nối!', 'Error: ' + error.message, false);
        });
}
</script>

<!-- Simple Chart Test Script -->
<script>
console.log('🔍 Page loaded, testing Chart.js...');

// Test if Chart.js is available
if (typeof Chart === 'undefined') {
    console.error('❌ Chart.js NOT loaded!');
} else {
    console.log('✅ Chart.js loaded:', Chart.version);
}

// Test canvas element
window.addEventListener('load', function() {
    const canvas = document.getElementById('vungKinhTeChart');
    if (canvas) {
        console.log('✅ Canvas element found');
        
        // Try to create a simple chart immediately
        try {
            const simpleChart = new Chart(canvas, {
                type: 'doughnut',
                data: {
                    labels: ['Test 1', 'Test 2', 'Test 3'],
                    datasets: [{
                        data: [10, 20, 30],
                        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
            console.log('✅ Simple chart created successfully!');
        } catch (error) {
            console.error('❌ Error creating simple chart:', error);
        }
    } else {
        console.error('❌ Canvas element NOT found!');
    }
});
</script>

<!-- Vùng Kinh Tế Chart Script -->
<script>
// Function to create Vùng Kinh Tế chart
function initVungKinhTeChart() {
    console.log('🎯 Initializing Vùng Kinh Tế Chart...');
    
    // Check if Chart.js is loaded
    if (typeof Chart === 'undefined') {
        console.error('❌ Chart.js is not loaded!');
        return false;
    }
    
    // Get canvas context
    const ctx = document.getElementById('vungKinhTeChart');
    if (!ctx) {
        console.error('❌ Canvas element vungKinhTeChart not found!');
        return false;
    }
    
    // Get data from ViewBag - từ cột Vungkinhte - safely
    let vungKinhTeData = [];
    try {
        const rawDataString = '@Html.Raw(Json.Serialize(ViewBag.VungKinhTeData ?? new List<object>()))';
        console.log('📊 Raw data string:', rawDataString);
        
        if (rawDataString && rawDataString !== '[]' && rawDataString !== '') {
            vungKinhTeData = JSON.parse(rawDataString);
        }
        
        console.log('📊 Vùng Kinh Tế data from ViewBag:', vungKinhTeData);
    } catch (error) {
        console.warn('⚠️ Error loading ViewBag data:', error);
    }
    
    // ONLY USE REAL DATA FROM DATABASE - NO SAMPLE DATA
    if (!vungKinhTeData || vungKinhTeData.length === 0) {
        console.log('⚠️ No real data from database - chart will be empty');
        console.log('⚠️ Expected database: Server=127.0.0.1;Database=admin_ciresearch;User=admin_dbciresearch;Password=9t52$7sBx;');
        console.log('⚠️ Expected data from Vungkinhte column');
        vungKinhTeData = [];
    }
    
    // Prepare chart data from Vungkinhte (economic zones)
    let labels = vungKinhTeData.map(item => item.Region || item.Vungkinhte || item.region || 'N/A');
    let data = vungKinhTeData.map(item => item.SoLuong || item.soLuong || item.Count || 0);
    let total = data.reduce((sum, value) => sum + value, 0);
    
    // NO DEFAULT SAMPLE DATA - Only show empty chart if no database data
    if (total === 0) {
        console.log('⚠️ No valid data from database - displaying empty chart');
        console.log('⚠️ Database connection: Server=127.0.0.1;Database=admin_ciresearch;User=admin_dbciresearch;Password=9t52$7sBx;');
        console.log('⚠️ Check Vungkinhte column in dn_all table for 7 economic zones');
        console.log('⚠️ Expected: Đông Nam Bộ, Đồng bằng Sông Hồng, Duyên hải Nam Trung Bộ, Bắc Trung Bộ, ĐBSCL, Tây Nguyên, Trung du và Miền núi Bắc Bộ');
        labels = ['Không có dữ liệu Vùng Kinh Tế'];
        data = [0];
        total = 0;
    }
    
    console.log('📊 Final chart data:', { labels, data, total });
    
    // Chart colors
    const colors = [
        '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', 
        '#9966FF', '#FF9F40', '#FF6384'
    ];
    
    try {
        // Destroy existing chart if any
        Chart.getChart(ctx)?.destroy();
        
        const vungKinhTeChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: colors,
                    borderColor: '#ffffff',
                    borderWidth: 3,
                    hoverBorderWidth: 4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: false,
                        
                    },
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const percentage = ((context.raw / total) * 100).toFixed(1);
                                return context.label + ': ' + context.raw.toLocaleString() + ' DN (' + percentage + '%)';
                            }
                        },
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: 'white',
                        bodyColor: 'white',
                        borderColor: 'rgba(255, 255, 255, 0.2)',
                        borderWidth: 1
                    }
                },
                animation: {
                    animateScale: true,
                    animateRotate: true,
                    duration: 1000
                }
            }
        });
        
        console.log('✅ Vùng Kinh Tế Chart created successfully!');
        
        // Create custom legend
        createCustomLegend(labels, data, colors, total);
        
        return true;
    } catch (error) {
        console.error('❌ Error creating Vùng Kinh Tế chart:', error);
        return false;
    }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    // Try to create chart immediately
    if (!initVungKinhTeChart()) {
        // If failed, try again after a short delay
        setTimeout(() => {
            console.log('🔄 Retrying Vùng Kinh Tế chart creation...');
            initVungKinhTeChart();
        }, 500);
    }
});

// Also try when window is fully loaded
window.addEventListener('load', function() {
    // Double check if chart exists, if not create it
    const canvas = document.getElementById('vungKinhTeChart');
    if (canvas && !Chart.getChart(canvas)) {
        console.log('🔄 Creating Vùng Kinh Tế chart on window load...');
        initVungKinhTeChart();
    }
});
</script>

<!-- Advanced Filter JavaScript Functions -->
<script>
    // Toggle dropdown visibility
    function toggleDropdown(element) {
        const dropdown = element.nextElementSibling;
        dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
        
        // Update selected display
        updateSelectedDisplay(element);
    }

    // Filter options based on search input
    function filterOptions(searchInput) {
        const filter = searchInput.value.toLowerCase();
        const dropdown = searchInput.parentElement;
        const labels = dropdown.querySelectorAll('label');
        
        labels.forEach(label => {
            const text = label.textContent.toLowerCase();
            if (text.includes(filter)) {
                label.style.display = 'block';
            } else {
                label.style.display = 'none';
            }
        });
    }

    // Update selected options display
    function updateSelectedDisplay(selectBox) {
        const dropdown = selectBox.nextElementSibling;
        const selectedSpan = selectBox.querySelector('.selected-options');
        const checkedInputs = dropdown.querySelectorAll('input[type="checkbox"]:checked');
        const placeholder = selectedSpan.getAttribute('data-placeholder');
        
        if (checkedInputs.length === 0) {
            selectedSpan.textContent = placeholder;
        } else if (checkedInputs.length === 1) {
            selectedSpan.textContent = checkedInputs[0].nextSibling.textContent.trim();
        } else {
            selectedSpan.textContent = `${checkedInputs.length} mục đã chọn`;
        }
    }

    // Clear all filters
    function clearAllFilters() {
        // Uncheck all checkboxes
        document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
            checkbox.checked = false;
        });
        
        // Reset all select displays
        document.querySelectorAll('.select-box').forEach(selectBox => {
            updateSelectedDisplay(selectBox);
        });
        
        // Reload page without filters
        window.location.href = '@Url.Action("Index", "DN")';
    }

    // Close dropdowns when clicking outside
    document.addEventListener('click', function(event) {
        if (!event.target.closest('.custom-multi-select')) {
            document.querySelectorAll('.dropdown-options').forEach(dropdown => {
                dropdown.style.display = 'none';
            });
        }
    });

    // Initialize filter UI and load dynamic data
    document.addEventListener('DOMContentLoaded', function() {
        console.log('🔧 Initializing filter UI...');
        
        // Load dynamic filter options from database
        loadDynamicFilterOptions();
        
        document.querySelectorAll('.select-box').forEach(selectBox => {
            updateSelectedDisplay(selectBox);
        });
    });

    // Load dynamic filter options from database
    function loadDynamicFilterOptions() {
        console.log('📡 Loading dynamic filter options from database...');
        
        fetch('/DN/GetFilterOptions')
            .then(response => {
                console.log('📡 Filter options response status:', response.status);
                return response.json();
            })
            .then(data => {
                console.log('📊 Filter options data:', data);
                
                if (data.success) {
                    console.log('✅ Filter options loaded successfully');
                    console.log(`📊 Data counts: Years: ${data.counts.yearsCount}, Business Types: ${data.counts.businessTypesCount}, Provinces: ${data.counts.provincesCount}`);
                    
                    // Populate each filter dropdown
                    populateFilterDropdown('yearFilter', data.filters.years, 'Nam', @Html.Raw(Json.Serialize(ViewBag.CurrentNam ?? new List<string>())));
                    populateFilterDropdown('businessTypeFilter', data.filters.businessTypes, 'Loaihinhkte', @Html.Raw(Json.Serialize(ViewBag.CurrentLoaihinhkte ?? new List<string>())));
                    populateFilterDropdown('provinceFilter', data.filters.provinces, 'MaTinh_Dieutra', @Html.Raw(Json.Serialize(ViewBag.CurrentMaTinh ?? new List<string>())));
                    populateFilterDropdown('economicZoneFilter', data.filters.economicZones, 'Vungkinhte', @Html.Raw(Json.Serialize(ViewBag.CurrentVungkinhte ?? new List<string>())));
                    populateFilterDropdown('companySizeFilter', data.filters.companySizes, 'QuyMo', @Html.Raw(Json.Serialize(ViewBag.CurrentQuyMo ?? new List<string>())));
                    
                    // Initialize event listeners after options are loaded
                    initializeFilterEventListeners();
                    
                    // Update display for all filters
                    document.querySelectorAll('.select-box').forEach(selectBox => {
                        updateSelectedDisplay(selectBox);
                    });
                    
                    console.log('✅ All filters populated successfully');
                } else {
                    console.error('❌ Failed to load filter options:', data.message);
                    console.log('⚠️ Using fallback options');
                    loadFallbackFilterOptions();
                }
            })
            .catch(error => {
                console.error('❌ Error loading filter options:', error);
                console.log('⚠️ Using fallback options');
                loadFallbackFilterOptions();
            });
    }

    // Populate individual filter dropdown
    function populateFilterDropdown(filterId, options, fieldName, currentValues) {
        const filterElement = document.getElementById(filterId);
        if (!filterElement) {
            console.warn(`⚠️ Filter element ${filterId} not found`);
            return;
        }
        
        const dropdown = filterElement.querySelector('.dropdown-options');
        const searchBox = dropdown.querySelector('.search-box');
        
        // Clear existing options (except search box)
        const existingLabels = dropdown.querySelectorAll('label');
        existingLabels.forEach(label => label.remove());
        
        // Add new options
        let optionsHTML = '';
        options.forEach(option => {
            const isChecked = currentValues && currentValues.includes(option) ? 'checked' : '';
            optionsHTML += `
                <label>
                    <input type="checkbox" name="${fieldName}" value="${option}" ${isChecked} /> ${option}
                </label>
            `;
        });
        
        // Insert after search box
        searchBox.insertAdjacentHTML('afterend', optionsHTML);
        
        console.log(`✅ Populated ${filterId} with ${options.length} options`);
    }

    // Initialize event listeners after filters are populated
    function initializeFilterEventListeners() {
        // Add change event listeners to all checkboxes
        document.querySelectorAll('.dropdown-options input[type="checkbox"]').forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const selectBox = this.closest('.custom-multi-select').querySelector('.select-box');
                updateSelectedDisplay(selectBox);
                
            // Auto-update statistics cards when any filter changes
            console.log('🔄 Filter changed, updating statistics cards...');
            setTimeout(() => {
                updateStatisticsCards();
            }, 300); // Small delay to ensure filter is updated
            
            // Also refresh charts
                setTimeout(() => {
                    refreshAllCharts();
            }, 500);
            });
        });
        
        console.log('✅ Filter event listeners initialized');
    }

    // Fallback options if API fails
    function loadFallbackFilterOptions() {
        const fallbackData = {
            years: ['2018', '2019', '2020', '2021', '2022', '2023', '2024'],
            businessTypes: ['Công ty TNHH', 'Công ty cổ phần', 'Doanh nghiệp tư nhân', 'Doanh nghiệp nhà nước'],
            provinces: ['Hà Nội', 'Hồ Chí Minh', 'Đà Nẵng', 'Hải Phòng', 'Cần Thơ'],
            economicZones: ['Đông Nam Bộ', 'Đồng bằng Sông Hồng', 'Duyên hải Nam Trung Bộ'],
            companySizes: ['Siêu nhỏ', 'Nhỏ', 'Vừa', 'Lớn']
        };
        
        populateFilterDropdown('yearFilter', fallbackData.years, 'Nam', []);
        populateFilterDropdown('businessTypeFilter', fallbackData.businessTypes, 'Loaihinhkte', []);
        populateFilterDropdown('provinceFilter', fallbackData.provinces, 'MaTinh_Dieutra', []);
        populateFilterDropdown('economicZoneFilter', fallbackData.economicZones, 'Vungkinhte', []);
        populateFilterDropdown('companySizeFilter', fallbackData.companySizes, 'QuyMo', []);
        
        initializeFilterEventListeners();
        console.log('✅ Fallback options loaded');
    }
</script>

<!-- Global test function to debug ViewBag data -->
<script>
function testVungKinhTeData() {
    console.log('🧪 TESTING ViewBag Data...');
    
    // Test ViewBag values safely
    const totalCompanies = @(ViewBag.TotalCompanies ?? 0);
    console.log('📊 ViewBag.TotalCompanies:', totalCompanies);
    
    // Test if data is available
    try {
        const rawData = '@Html.Raw(Json.Serialize(ViewBag.VungKinhTeData ?? new List<object>()))';
        console.log('📊 Raw data string:', rawData);
        
        let testData = [];
        if (rawData && rawData !== '[]' && rawData !== '') {
            testData = JSON.parse(rawData);
        }
        
        console.log('📊 Test data parsed:', testData);
        console.log('📊 Test data type:', typeof testData);
        console.log('📊 Test data length:', testData ? testData.length : 'null');
        
        if (testData && testData.length > 0) {
            console.log('✅ Data is available!');
            alert('✅ Data available: ' + testData.length + ' regions found.\\nTotal companies: ' + totalCompanies + '\\nCheck console for details.');
        } else {
            console.log('❌ No data available!');
            alert('❌ No data available from ViewBag.VungKinhTeData\\nData might be empty or null from database.');
        }
        } catch (error) {
        console.error('❌ Error testing data:', error);
        alert('❌ Error testing data: ' + error.message);
    }
    
    // Test Chart.js
    if (typeof Chart !== 'undefined') {
        console.log('✅ Chart.js is loaded:', Chart.version);
    } else {
        console.log('❌ Chart.js is NOT loaded!');
        console.error('❌ Chart.js library is not loaded!');
    }
    
    // Test canvas element
    const canvas = document.getElementById('vungKinhTeChart');
    if (canvas) {
        console.log('✅ Canvas element found:', canvas);
    } else {
        console.log('❌ Canvas element NOT found!');
        alert('❌ Canvas element vungKinhTeChart not found!');
    }
}
</script>

<!-- Global function to force create test chart -->
<script>
function createTestChart() {
    console.log('🧪 Creating test chart...');
    
    // Check if canvas exists
    const canvas = document.getElementById('vungKinhTeChart');
    if (!canvas) {
        alert('❌ Canvas element not found!');
        return;
    }
    
    // Check if Chart.js is available
    if (typeof Chart === 'undefined') {
        alert('❌ Chart.js is not loaded!');
        return;
    }
    
    try {
        // Destroy existing chart if any
        const existingChart = Chart.getChart(canvas);
        if (existingChart) {
            existingChart.destroy();
        }
        
        // Test data for all 7 Vietnamese economic regions from Vungkinhte column
        const testData = [
            { region: 'Đông Nam Bộ', count: 15 },
            { region: 'Đồng bằng Sông Hồng', count: 12 },
            { region: 'Duyên hải Nam Trung Bộ', count: 8 },
            { region: 'Bắc Trung Bộ', count: 6 },
            { region: 'Đồng bằng Sông Cửu Long', count: 10 },
            { region: 'Tây Nguyên', count: 4 },
            { region: 'Trung du và Miền núi Bắc Bộ', count: 5 }
        ];
        
        const labels = testData.map(item => item.region);
        const data = testData.map(item => item.count);
        const colors = [
            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', 
            '#9966FF', '#FF9F40', '#C9CBCF'
        ];
        
        console.log('📊 Creating chart with test data:', { labels, data });
        
        const testChart = new Chart(canvas, {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: colors,
                    borderColor: '#ffffff',
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const total = data.reduce((a, b) => a + b, 0);
                                const percentage = ((context.raw / total) * 100).toFixed(1);
                                return context.label + ': ' + context.raw + ' DN (' + percentage + '%)';
                            }
                        }
                    }
                }
            }
        });
        
        console.log('✅ Test chart created successfully!', testChart);
        
        // Update legend
        const total = data.reduce((a, b) => a + b, 0);
        createCustomLegend(labels, data, colors, total);
        
        alert('✅ Test chart created successfully!\\nCheck the chart display above.');
        
    } catch (error) {
        console.error('❌ Error creating test chart:', error);
        alert('❌ Error creating test chart: ' + error.message);
    }
}
</script>

<!-- NEW QUY MO CHART - CLEAN VERSION -->
<script>
// Function to create new Quy mô chart using backend JSON data
function createNewQuyMoChart() {
    console.log('🚨 Creating NEW QUY_MO Chart from backend data...');
    
    // Get canvas context
    const ctx = document.getElementById('newQuyMoChart');
    if (!ctx) {
        console.error('❌ Canvas element newQuyMoChart not found!');
        return false;
    }
    
    // Check if Chart.js is available
    if (typeof Chart === 'undefined') {
        console.error('❌ Chart.js is not loaded!');
        return false;
    }
    
    // Get data from ViewBag (passed from controller)
    const quyMoData = @Html.Raw(Json.Serialize(ViewBag.QuyMoData ?? new List<object>()));
    
    console.log('📊 Using backend data from ViewBag:', quyMoData);
    
    // Validate data from backend
    if (!quyMoData || quyMoData.length === 0) {
        console.error('❌ No Quy mô data received from controller');
        return false;
    }
    
    // Extract chart data
    const labels = quyMoData.map(item => item.quyMo || item.QuyMo);
    const data = quyMoData.map(item => item.soLuong || item.SoLuong);
    const descriptions = quyMoData.map(item => item.moTa || item.MoTa);
    const total = data.reduce((sum, value) => sum + value, 0);
    
    console.log('📊 Chart data:', { labels, data, descriptions, total });
    
    // Chart colors - 4 màu cho 4 quy mô
    const colors = [
        '#FF6B6B', // Siêu nhỏ - Đỏ nhạt
        '#4ECDC4', // Nhỏ - Xanh lục  
        '#45B7D1', // Vừa - Xanh dương
        '#96CEB4'  // Lớn - Xanh lá nhạt
    ];
    
    try {
        // Destroy existing chart if any
        Chart.getChart(ctx)?.destroy();
        
        const quyMoChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Số lượng DN',
                    data: data,
                    backgroundColor: colors,
                    borderColor: colors.map(color => color + 'CC'),
                    borderWidth: 2,
                    borderRadius: 8,
                    borderSkipped: false,
                    barThickness: 60,
                    maxBarThickness: 80
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: false,
                        
                    },
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const percentage = ((context.raw / total) * 100).toFixed(1);
                                const desc = descriptions[context.dataIndex] || '';
                                return [
                                    context.label + ': ' + context.raw.toLocaleString() + ' DN (' + percentage + '%)',
                                    desc
                                ];
                            }
                        },
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: 'white',
                        bodyColor: 'white',
                        borderColor: 'rgba(255, 255, 255, 0.2)',
                        borderWidth: 1
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            precision: 0,
                            font: {
                                size: 12
                            }
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.1)'
                        },
                        title: {
                            display: true,
                            text: 'Số lượng doanh nghiệp',
                            font: {
                                size: 13,
                                weight: 'bold'
                            }
                        }
                    },
                    x: {
                        ticks: {
                            maxRotation: 45,
                            font: {
                                size: 11
                            }
                        },
                        grid: {
                            display: false
                        },
                        title: {
                            display: true,
                            text: 'Quy mô doanh nghiệp',
                            font: {
                                size: 13,
                                weight: 'bold'
                            }
                        }
                    }
                },
                animation: {
                    duration: 1200,
                    easing: 'easeOutQuart'
                }
            }
        });
        
        console.log('✅ NEW Quy mô Chart created successfully!');
        
        // Create custom legend
        createNewQuyMoLegend(labels, data, descriptions, colors, total);
        
        return true;
    } catch (error) {
        console.error('❌ Error creating NEW Quy mô chart:', error);
        return false;
    }
}

// Function to create custom legend for new Quy mô chart
function createNewQuyMoLegend(labels, data, descriptions, colors, total) {
    const legendContainer = document.getElementById('newQuyMoLegendDetails');
    if (!legendContainer) return;
    
    let legendHTML = '';
    
    labels.forEach((label, index) => {
        const value = data[index];
        const percentage = ((value / total) * 100).toFixed(1);
        const description = descriptions[index] || '';
        
        legendHTML += `
            <div class="legend-item d-flex align-items-center mb-3" style="padding: 8px; border-radius: 6px; background: rgba(${hexToRgb(colors[index])}, 0.1);">
                <div class="legend-color me-2" style="background-color: ${colors[index]}; width: 20px; height: 20px; border-radius: 4px; border: 2px solid #fff; box-shadow: 0 2px 4px rgba(0,0,0,0.1);"></div>
                <div class="legend-content flex-grow-1">
                    <div class="legend-text" style="font-size: 0.9rem; font-weight: 600; color: #333;">
                        ${label}
                    </div>
                    <div class="legend-description" style="font-size: 0.75rem; color: #6c757d; margin-top: 2px;">
                        ${description}
                    </div>
                </div>
                <div class="legend-stats text-end">
                    <div class="legend-value" style="font-size: 0.9rem; font-weight: 700; color: ${colors[index]};">
                        ${value.toLocaleString()}
                    </div>
                    <div class="legend-percentage" style="font-size: 0.75rem; color: #6c757d;">
                        ${percentage}%
                    </div>
                </div>
            </div>
        `;
    });
    
    // Add summary section
    legendHTML += `
        <div class="mt-3 pt-3" style="border-top: 1px solid #dee2e6;">
            <div class="text-center">
                <div style="font-size: 0.8rem; color: #6c757d; margin-bottom: 4px;">
                    <i class="fas fa-building me-1"></i>
                    Tổng số doanh nghiệp
                </div>
                <div style="font-size: 1.2rem; font-weight: 700; color: #28a745;">
                    ${total.toLocaleString()} DN
                </div>
            </div>
        </div>
    `;
    
    legendContainer.innerHTML = legendHTML;
}

// Helper function to convert hex to RGB
function hexToRgb(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? 
        parseInt(result[1], 16) + ',' + parseInt(result[2], 16) + ',' + parseInt(result[3], 16) :
        '0,0,0';
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    console.log('🔄 DOM ready, creating NEW Quy mô chart...');
    createNewQuyMoChart();
});

// Also try when window is fully loaded
window.addEventListener('load', function() {
    const canvas = document.getElementById('newQuyMoChart');
    if (canvas && !Chart.getChart(canvas)) {
        console.log('🔄 Window loaded, creating NEW Quy mô chart...');
        createNewQuyMoChart();
    }
});
</script>

<!-- Legend Functions -->
<script>
// Function to create custom legend for Vùng Kinh Tế chart
function createCustomLegend(labels, data, colors, total) {
    const legendContainer = document.getElementById('chartLegendDetails');
    if (!legendContainer) return;
    
    let legendHTML = '';
    
    labels.forEach((label, index) => {
        const value = data[index];
        const percentage = ((value / total) * 100).toFixed(1);
        
        legendHTML += `
            <div class="legend-item">
                <div class="legend-color" style="background-color: ${colors[index]}"></div>
                <div class="legend-text">${label}</div>
                <div class="legend-value">
                    ${value.toLocaleString()} DN
                    <div class="legend-percentage">${percentage}%</div>
                </div>
            </div>
        `;
    });
    
    legendContainer.innerHTML = legendHTML;
}

// Function to create custom legend for Quy mô chart
function createQuyMoLegend(labels, data, descriptions, colors, total) {
    const legendContainer = document.getElementById('quyMoLegendDetails');
    if (!legendContainer) return;
    
    let legendHTML = '';
    
    labels.forEach((label, index) => {
        const value = data[index];
        const percentage = ((value / total) * 100).toFixed(1);
        const description = descriptions[index] || '';
        
        legendHTML += `
            <div class="legend-item" style="margin-bottom: 8px;">
                <div class="legend-color" style="background-color: ${colors[index]}; width: 16px; height: 16px;"></div>
                <div class="legend-text" style="font-size: 0.85rem;">
                    <strong>${label}</strong><br>
                    <small class="text-muted">${description}</small>
                </div>
                <div class="legend-value" style="font-size: 0.8rem;">
                    ${value.toLocaleString()} DN
                    <div class="legend-percentage" style="font-size: 0.75rem;">${percentage}%</div>
                </div>
            </div>
        `;
    });
    
    legendContainer.innerHTML = legendHTML;
}

// Function to create custom legend for Trend chart
function createTrendLegend(revenueData, profitData, years) {
    const legendContainer = document.getElementById('trendLegendDetails');
    if (!legendContainer) return;
    
    // Calculate totals and trends
    const totalRevenue = revenueData.reduce((sum, val) => sum + val, 0);
    const totalProfit = profitData.reduce((sum, val) => sum + val, 0);
    const avgRevenue = Math.round(totalRevenue / revenueData.length);
    const avgProfit = Math.round(totalProfit / profitData.length);
    
    // Calculate growth rates
    const revenueGrowth = revenueData.length > 1 ? 
        (((revenueData[revenueData.length - 1] - revenueData[0]) / revenueData[0]) * 100).toFixed(1) : 0;
    const profitGrowth = profitData.length > 1 ? 
        (((profitData[profitData.length - 1] - profitData[0]) / profitData[0]) * 100).toFixed(1) : 0;
    
    let legendHTML = `
        <!-- Revenue Legend -->
        <div class="legend-item" style="margin-bottom: 15px; padding: 12px; background: rgba(40, 167, 69, 0.05); border-left: 4px solid #28a745; border-radius: 6px;">
            <div style="display: flex; align-items: center; margin-bottom: 8px;">
                <div class="legend-color" style="background-color: #28a745; width: 18px; height: 18px; border-radius: 3px;"></div>
                <div class="legend-text" style="margin-left: 10px;">
                    <strong style="color: #28a745; font-size: 0.9rem;">Doanh thu</strong>
                </div>
            </div>
            <div style="font-size: 0.8rem; color: #6c757d;">
                <div>Trung bình: <strong>${avgRevenue.toLocaleString()} tỷ VND</strong></div>
                <div>Tăng trưởng: <strong style="color: ${revenueGrowth >= 0 ? '#28a745' : '#dc3545'};">${revenueGrowth >= 0 ? '+' : ''}${revenueGrowth}%</strong></div>
                <div style="margin-top: 5px;">
                    <small>Giai đoạn: ${years[0]} - ${years[years.length - 1]}</small>
                </div>
            </div>
        </div>
        
        <!-- Profit Legend -->
        <div class="legend-item" style="margin-bottom: 15px; padding: 12px; background: rgba(253, 126, 20, 0.05); border-left: 4px solid #fd7e14; border-radius: 6px;">
            <div style="display: flex; align-items: center; margin-bottom: 8px;">
                <div class="legend-color" style="background-color: #fd7e14; width: 18px; height: 18px; border-radius: 3px;"></div>
                <div class="legend-text" style="margin-left: 10px;">
                    <strong style="color: #fd7e14; font-size: 0.9rem;">Lợi nhuận</strong>
                </div>
            </div>
            <div style="font-size: 0.8rem; color: #6c757d;">
                <div>Trung bình: <strong>${avgProfit.toLocaleString()} tỷ VND</strong></div>
                <div>Tăng trưởng: <strong style="color: ${profitGrowth >= 0 ? '#28a745' : '#dc3545'};">${profitGrowth >= 0 ? '+' : ''}${profitGrowth}%</strong></div>
                <div style="margin-top: 5px;">
                    <small>Giai đoạn: ${years[0]} - ${years[years.length - 1]}</small>
                </div>
            </div>
        </div>
        
        <!-- Summary -->
        <div class="legend-item" style="padding: 12px; background: rgba(108, 117, 125, 0.05); border-radius: 6px;">
            <div class="legend-text" style="font-size: 0.85rem;">
                <strong style="color: #495057;">Tóm tắt xu hướng</strong>
            </div>
            <div style="font-size: 0.75rem; color: #6c757d; margin-top: 8px;">
                <div>• Tổng doanh thu: <strong>${totalRevenue.toLocaleString()} tỷ</strong></div>
                <div>• Tổng lợi nhuận: <strong>${totalProfit.toLocaleString()} tỷ</strong></div>
                <div>• Tỷ lệ lợi nhuận: <strong>${totalRevenue > 0 ? ((totalProfit / totalRevenue) * 100).toFixed(1) : 0}%</strong></div>
            </div>
        </div>
    `;
    
    legendContainer.innerHTML = legendHTML;
}

// Function to create custom legend for Industry chart
function createIndustryLegend(labels, data, descriptions, colors, total) {
    const legendContainer = document.getElementById('industryLegendDetails');
    if (!legendContainer) return;
    
    let legendHTML = '';
    
    labels.forEach((label, index) => {
        const value = data[index];
        const percentage = ((value / total) * 100).toFixed(1);
        const description = descriptions[index] || '';
        
        legendHTML += `
            <div class="legend-item" style="margin-bottom: 12px; padding: 10px; background: white; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
                <div style="display: flex; align-items: center; margin-bottom: 6px;">
                    <div class="legend-color" style="background-color: ${colors[index]}; width: 20px; height: 20px; border-radius: 4px; margin-right: 10px;"></div>
                    <div class="legend-text" style="flex: 1;">
                        <div style="font-weight: 600; font-size: 0.85rem; color: #2d3748; margin-bottom: 2px;">${label}</div>
                        <div style="font-size: 0.75rem; color: #718096;">${description}</div>
                    </div>
                </div>
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <span style="font-weight: 600; color: ${colors[index]}; font-size: 0.9rem;">${value.toLocaleString()} DN</span>
                    <span style="background: ${colors[index]}20; color: ${colors[index]}; padding: 2px 8px; border-radius: 12px; font-size: 0.75rem; font-weight: 600;">${percentage}%</span>
                </div>
            </div>
        `;
    });
    
    // Add summary section
    legendHTML += `
        <div style="margin-top: 20px; padding: 15px; background: linear-gradient(135deg, #667eea20, #764ba220); border-radius: 10px; border-left: 4px solid #6f42c1;">
            <div style="font-weight: 600; color: #4a5568; margin-bottom: 8px; display: flex; align-items: center;">
                <i class="fas fa-chart-bar" style="margin-right: 8px; color: #6f42c1;"></i>
                Tổng quan ngành nghề
            </div>
            <div style="font-size: 0.8rem; color: #718096;">
                <div style="margin-bottom: 4px;">• Tổng số ngành: <strong>${labels.length}</strong></div>
                <div style="margin-bottom: 4px;">• Tổng doanh nghiệp: <strong>${total.toLocaleString()}</strong></div>
                <div>• Ngành hàng đầu: <strong>${labels[0]}</strong> (${data[0]} DN)</div>
            </div>
        </div>
    `;
    
    legendContainer.innerHTML = legendHTML;
}
</script>



<!-- Industry Chart Script -->
<script>
// Function to create Industry chart
function initIndustryChart() {
    console.log('🎯 Initializing Industry Chart...');
    
    // Check if Chart.js is loaded
    if (typeof Chart === 'undefined') {
        console.error('❌ Chart.js is not loaded!');
        return false;
    }
    
    // Get canvas context
    const ctx = document.getElementById('industryChart');
    if (!ctx) {
        console.error('❌ Canvas element industryChart not found!');
        return false;
    }
    
    // Get data from ViewBag - MUST be from database sakila TEN_NGANH column
    let industryData = [];
    try {
        // Get data from ViewBag.IndustryData (passed from controller)
        industryData = @Html.Raw(Json.Serialize(ViewBag.IndustryData ?? new List<object>()));
        
        console.log('🔍 INDUSTRY DATA DEBUG:');
        console.log('📊 Industry data from ViewBag:', industryData);
        console.log('📊 Data source: Server=127.0.0.1;Database=admin_ciresearch;User=admin_dbciresearch;Password=9t52$7sBx; TEN_NGANH column');
        console.log('📊 Number of industries:', industryData ? industryData.length : 0);
        
        if (industryData && industryData.length > 0) {
            console.log('✅ Successfully loaded industry data from database TEN_NGANH column');
            console.log('📊 First industry sample:', industryData[0]);
            console.log('📊 Sample structure check:');
            console.log('   - TEN_NGANH:', industryData[0].TEN_NGANH || industryData[0].teN_NGANH || industryData[0].ten_nganh || 'NOT FOUND');
            console.log('   - SoLuong:', industryData[0].soLuong || industryData[0].SoLuong || 'NOT FOUND');
        } else {
            console.error('❌ NO INDUSTRY DATA FROM DATABASE TEN_NGANH COLUMN!');
            console.error('❌ ViewBag.IndustryData is empty or null');
        }
        
    } catch (error) {
        console.error('❌ Error loading Industry ViewBag data:', error);
        console.error('❌ This indicates a problem with data from controller');
        industryData = [];
    }
    
    // Check if we have real data from database TEN_NGANH column
    if (!industryData || industryData.length === 0) {
        console.error('❌ No real industry data from TEN_NGANH column!');
        console.error('📊 Database connection: Server=127.0.0.1;Database=admin_ciresearch;User=admin_dbciresearch;Password=9t52$7sBx;');
        console.error('📊 Expected data from TEN_NGANH column not found');
        console.error('❌ Chart creation will be aborted - NO FALLBACK DATA');
        
        // Show error and return false - NO SAMPLE DATA FALLBACK
        alert('❌ Không có dữ liệu ngành nghề từ cột TEN_NGANH!\n\nChart sẽ không hiển thị.');
        return false;
    } else {
        console.log('✅ Using REAL industry data from TEN_NGANH column');
        console.log('📊 Data source: database sakila, table dn_all, column TEN_NGANH');
        console.log('📊 Number of industries found:', industryData.length);
    }
    
    // Sort by count descending and take top 20 for better space utilization
    industryData.sort((a, b) => (b.soLuong || b.SoLuong || b.count || 0) - (a.soLuong || a.SoLuong || a.count || 0));
    industryData = industryData.slice(0, 20);
    
    // Prepare chart data from controller (TEN_NGANH column)
    let labels = industryData.map(item => {
        const name = item.TEN_NGANH || item.teN_NGANH || item.ten_nganh || 'N/A';
        // Truncate long names for better display
        return name.length > 25 ? name.substring(0, 22) + '...' : name;
    });
    let data = industryData.map(item => item.soLuong || item.SoLuong || 0);
    let descriptions = industryData.map(item => item.TEN_NGANH || item.teN_NGANH || item.ten_nganh || '');
    let total = data.reduce((sum, value) => sum + value, 0);
    
    // Validate data quality - MUST have real data from database TEN_NGANH column
    if (total === 0) {
        console.error('❌ CRITICAL: No valid industry data from TEN_NGANH column!');
        console.error('❌ Database: Server=127.0.0.1;Database=admin_ciresearch;User=admin_dbciresearch;Password=9t52$7sBx;');
        console.error('❌ Expected TEN_NGANH column data not found');
        console.error('❌ Check database connection and data availability');
        
        // Show error message to user
        alert('⚠️ Không thể tải dữ liệu ngành nghề từ cột TEN_NGANH!\n\nVui lòng kiểm tra:\n- Kết nối database sakila\n- Dữ liệu trong cột TEN_NGANH\n- Server: localhost, User: root, Password: 1234');
        
        // Return false to indicate chart creation failed
        return false;
    } else {
        console.log('✅ CONFIRMED: Using real TEN_NGANH data from database sakila');
        console.log('📊 Total companies with TEN_NGANH data:', total);
        console.log('📊 Top 5 industries:', labels.slice(0, 5));
    }
    
    console.log('📊 Final Industry chart data:', { labels, data, descriptions, total });
    
    // Generate colors for industries (20 colors)
    const colors = [
        '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFCE56',
        '#FF9F40', '#9966FF', '#FF6384', '#36A2EB', '#C9CBCF',
        '#FF5722', '#795548', '#607D8B', '#9C27B0', '#673AB7',
        '#3F51B5', '#2196F3', '#00BCD4', '#009688', '#4CAF50'
    ];
    
    try {
        // Destroy existing chart if any
        Chart.getChart(ctx)?.destroy();
        
        const industryChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Số lượng DN',
                    data: data,
                    backgroundColor: colors,
                    borderColor: colors.map(color => color + 'CC'),
                    borderWidth: 2,
                    borderRadius: 8,
                    borderSkipped: false,
                    barThickness: 35, // Fixed bar thickness for better visibility
                    maxBarThickness: 40,
                    minBarLength: 10
                }]
            },
            options: {
                indexAxis: 'y', // This makes it horizontal
                responsive: true,
                maintainAspectRatio: false,
                layout: {
                    padding: {
                        top: 10,
                        bottom: 5, // Minimal bottom padding to reduce white space
                        left: 10,
                        right: 10
                    }
                },
                plugins: {
                    title: {
                        display: false
                    },
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const percentage = ((context.raw / total) * 100).toFixed(1);
                                return context.dataset.label + ': ' + context.raw.toLocaleString() + ' DN (' + percentage + '%)';
                            }
                        },
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: 'white',
                        bodyColor: 'white',
                        borderColor: 'rgba(255, 255, 255, 0.2)',
                        borderWidth: 1
                    }
                },
                scales: {
                    x: {
                        beginAtZero: true,
                        ticks: {
                            precision: 0,
                            font: {
                                size: 12
                            }
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.1)'
                        }
                    },
                    y: {
                        grid: {
                            display: false
                        },
                        ticks: {
                            font: {
                                size: 13,
                                weight: '500'
                            },
                            padding: 10
                        },
                        // Maximize bar space utilization
                        categoryPercentage: 0.95, // Use more space between categories
                        barPercentage: 0.9 // Use more space for bars
                    }
                },
                animation: {
                    duration: 1200,
                    easing: 'easeOutBounce'
                }
            }
        });
        
        console.log('✅ Industry Chart created successfully!');
        
        // Create custom legend for Industry
        createIndustryLegend(labels, data, descriptions, colors, total);
        
        return true;
        } catch (error) {
        console.error('❌ Error creating Industry chart:', error);
        return false;
    }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    // Try to create chart immediately
    if (!initIndustryChart()) {
        // If failed, try again after a short delay
        setTimeout(() => {
            console.log('🔄 Retrying Industry chart creation...');
            initIndustryChart();
        }, 500);
    }
});

// Also try when window is fully loaded
window.addEventListener('load', function() {
    // Double check if chart exists, if not create it
    const canvas = document.getElementById('industryChart');
    if (canvas && !Chart.getChart(canvas)) {
        console.log('🔄 Creating Industry chart on window load...');
        initIndustryChart();
        }
    });
</script>

<!-- Test functions for Industry chart -->
 <script>
// Global test function for Industry data
function testIndustryData() {
    console.log('🧪 TESTING Industry Data...');
    
    // Test ViewBag values safely
    const totalCompanies = @(ViewBag.TotalCompanies ?? 0);
    console.log('📊 ViewBag.TotalCompanies:', totalCompanies);
    
    // Test if data is available
    try {
        const rawData = '@Html.Raw(Json.Serialize(ViewBag.IndustryData ?? new List<object>()))';
        console.log('📊 Raw Industry data string:', rawData);
        
        let testData = [];
        if (rawData && rawData !== '[]' && rawData !== '') {
            testData = JSON.parse(rawData);
        }
        
        console.log('📊 Test Industry data parsed:', testData);
        console.log('📊 Test data type:', typeof testData);
        console.log('📊 Test data length:', testData ? testData.length : 'null');
        
        if (testData && testData.length > 0) {
            console.log('✅ Industry Data is available!');
            alert('✅ Industry Data available: ' + testData.length + ' categories found.\\nTotal companies: ' + totalCompanies + '\\nCheck console for details.');
             } else {
            console.log('❌ No Industry data available!');
            alert('❌ No data available from ViewBag.IndustryData\\nData might be empty or null from database.');
        }
    } catch (error) {
        console.error('❌ Error testing Industry data:', error);
        alert('❌ Error testing Industry data: ' + error.message);
    }
    
    // Test canvas element
    const canvas = document.getElementById('industryChart');
    if (canvas) {
        console.log('✅ Industry Canvas element found:', canvas);
         } else {
        console.log('❌ Industry Canvas element NOT found!');
        alert('❌ Canvas element industryChart not found!');
    }
}

// Global function to test industry data from database
function testIndustryDataFromDatabase() {
    console.log('🧪 Testing Industry Data from Database...');
    
    fetch('/DN/TestIndustryData')
        .then(response => response.json())
        .then(data => {
            console.log('📊 Industry Test Response:', data);
            
            if (data.success) {
                alert(`✅ Industry Data Test SUCCESSFUL!\n\n` +
                      `Database: ${data.database}\n` +
                      `Table: ${data.table}\n` +
                      `Column: ${data.column}\n` +
                      `Total Industries Found: ${data.totalIndustries}\n\n` +
                      `Top 5 Industries:\n` +
                      data.data.slice(0, 5).map(item => `• ${item.TEN_NGANH}: ${item.SoLuong} companies`).join('\n') +
                      `\n\nCheck console for full details.`);
                
                // Force refresh chart with real data
                initIndustryChart();
            } else {
                alert(`❌ Industry Data Test FAILED!\n\n${data.message}\n\nCheck console for details.`);
            }
        })
        .catch(error => {
            console.error('❌ Test request failed:', error);
            alert(`❌ Test request failed: ${error.message}`);
        });
}

// Global function to test industry data from database
function testIndustryDataFromDatabase() {
    console.log('🧪 Testing Industry Data from Database...');
    
    fetch('/DN/TestIndustryData')
        .then(response => response.json())
        .then(data => {
            console.log('📊 Industry Test Response:', data);
            
            if (data.success) {
                alert(`✅ Industry Data Test SUCCESSFUL!\n\n` +
                      `Database: ${data.database}\n` +
                      `Table: ${data.table}\n` +
                      `Column: ${data.column}\n` +
                      `Total Industries Found: ${data.totalIndustries}\n\n` +
                      `Top 5 Industries:\n` +
                      data.data.slice(0, 5).map(item => `• ${item.TEN_NGANH}: ${item.SoLuong} companies`).join('\n'));
                      
                // Force refresh the industry chart with real data
                setTimeout(() => {
                    location.reload();
                }, 1000);
            } else {
                alert(`❌ Industry Data Test FAILED!\n\n` +
                      `Error: ${data.message}\n` +
                      `Database: ${data.database || 'sakila'}\n` +
                      `Table: ${data.table || 'dn_all'}\n` +
                      `Column: ${data.column || 'TEN_NGANH'}`);
            }
        })
        .catch(error => {
            console.error('❌ Industry test error:', error);
            alert(`❌ Industry Data Test ERROR!\n\nError: ${error.message}`);
        });
}

// Global function to force create Industry test chart
function createIndustryChart() {
    console.log('🧪 Creating Industry test chart...');
    
    // Check if canvas exists
    const canvas = document.getElementById('industryChart');
    if (!canvas) {
        alert('❌ Canvas element industryChart not found!');
        return;
    }
    
    // Check if Chart.js is available
    if (typeof Chart === 'undefined') {
        alert('❌ Chart.js is not loaded!');
        return;
    }
    
    try {
        // Destroy existing chart if any
        const existingChart = Chart.getChart(canvas);
        if (existingChart) {
            existingChart.destroy();
        }
        
        // Test data for industry categories based on company type
        const testData = [
            { category: 'Công ty TNHH', count: 18, description: 'Công ty TNHH' },
            { category: 'Công ty cổ phần', count: 15, description: 'Công ty cổ phần' },
            { category: 'Doanh nghiệp tư nhân', count: 8, description: 'Doanh nghiệp tư nhân' },
            { category: 'Doanh nghiệp nhà nước', count: 2, description: 'Doanh nghiệp nhà nước' },
            { category: 'Công ty hợp danh', count: 10, description: 'Công ty hợp danh' },
            { category: 'Hợp tác xã', count: 5, description: 'Hợp tác xã' },
            { category: 'Liên doanh', count: 7, description: 'Liên doanh' }
        ];
        
        const labels = testData.map(item => item.category);
        const data = testData.map(item => item.count);
        const descriptions = testData.map(item => item.description);
        const colors = [
            '#FF6B6B', // Công ty TNHH - Đỏ nhạt
            '#4ECDC4', // Công ty cổ phần - Xanh lục
            '#45B7D1', // Doanh nghiệp tư nhân - Xanh dương
            '#96CEB4',  // Doanh nghiệp nhà nước - Xanh lá nhạt
            '#FF9F40', // Công ty hợp danh - Cam
            '#FF6384', // Hợp tác xã - Xanh nhạt
            '#C9CBCF'  // Liên doanh - Xám
        ];
        
        console.log('📊 Creating Industry chart with test data:', { labels, data, descriptions });
        
        const testChart = new Chart(canvas, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Số lượng DN',
                    data: data,
                    backgroundColor: colors,
                    borderColor: colors.map(color => color + 'CC'),
                    borderWidth: 2,
                    borderRadius: 8,
                    borderSkipped: false
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const total = data.reduce((a, b) => a + b, 0);
                                const percentage = ((context.raw / total) * 100).toFixed(1);
                                const desc = descriptions[context.dataIndex] || '';
                                return [
                                    context.label + ': ' + context.raw + ' DN (' + percentage + '%)',
                                    desc
                                ];
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            precision: 0
                        }
                    }
                },
                animation: {
                    duration: 1000,
                    easing: 'easeOutBounce'
                }
            }
        });
        
        console.log('✅ Industry Test chart created successfully!', testChart);
        
        // Update legend
        const total = data.reduce((a, b) => a + b, 0);
        createIndustryLegend(labels, data, descriptions, colors, total);
        
        alert('✅ Industry Test chart created successfully!\\nCheck the chart display above.');
        
    } catch (error) {
        console.error('❌ Error creating Industry test chart:', error);
        alert('❌ Error creating Industry test chart: ' + error.message);
    }
}
</script>
 <script>   
// Debug function - call this in browser console: testTrendAPI()
function testTrendAPI() {
    console.log('🧪 TESTING TREND API DIRECTLY...');
    fetch('/DN/GetTrendChartData')
        .then(response => {
            console.log('📡 API Response status:', response.status);
            console.log('📡 API Response headers:', response.headers);
            return response.json();
        })
        .then(data => {
            console.log('📊 API Response data:', data);
            
            if (data.success) {
                alert(`✅ API TEST SUCCESSFUL!\n\nData: ${JSON.stringify(data, null, 2).substring(0, 500)}...\n\nCheck console for full data.`);
            } else {
                alert(`❌ API TEST FAILED!\n\nError: ${data.message}\n\nCheck console for details.`);
            }
        })
        .catch(error => {
            console.error('❌ API Test error:', error);
            alert(`❌ API TEST ERROR!\n\nError: ${error.message}\n\nCheck console for details.`);
        });
}

// Debug function - call this in browser console: forceReloadChart()
function forceReloadChart() {
    console.log('🔄 FORCING CHART RELOAD...');
                initTrendChart();
}

// Debug function - check ViewBag data
function debugViewBagData() {
    console.log('🔍 DEBUGGING ViewBag.TrendData...');
    const rawData = '@Html.Raw(Json.Serialize(ViewBag.TrendData ?? new List<object>()))';
    console.log('📊 Raw ViewBag.TrendData:', rawData);
    console.log('📊 Length:', rawData.length);
    console.log('📊 Type:', typeof rawData);
    
    try {
        if (rawData && rawData !== '[]' && rawData !== '') {
            const parsed = JSON.parse(rawData);
            console.log('✅ Parsed successfully:', parsed);
            alert(`✅ ViewBag Data Found!\n\nLength: ${parsed.length}\nData: ${JSON.stringify(parsed, null, 2)}`);
        } else {
            console.log('❌ ViewBag data is empty');
            alert('❌ ViewBag.TrendData is empty or null!');
        }
                } catch (error) {
        console.error('❌ Parse error:', error);
        alert(`❌ Parse Error!\n\nRaw: ${rawData}\nError: ${error.message}`);
    }
}
</script>
<script>
// Function to verify industry data
function verifyIndustryData() {
    console.log('🔍 Verifying industry data...');
    
    fetch('/DN/VerifyIndustryData')
        .then(response => response.json())
        .then(data => {
            console.log('📊 Industry Data Verification Result:', data);
            
            if (data.success) {
                let message = `✅ Industry Data Verification Successful!\n\n`;
                message += `Database: ${data.database}\n`;
                message += `Table: ${data.table}\n`;
                message += `Column: ${data.column}\n\n`;
                
                message += `Data Quality:\n`;
                message += `- Total Records: ${data.dataQuality.totalRecords}\n`;
                message += `- Valid Records: ${data.dataQuality.validCount}\n`;
                message += `- Empty Records: ${data.dataQuality.emptyCount}\n\n`;
                
                message += `Top 5 Industries:\n`;
                data.topIndustries.slice(0, 5).forEach(ind => {
                    message += `- ${ind.industry}: ${ind.count} companies\n`;
                });
                
                message += `\nCheck console for full details.`;
                
                alert(message);
                
                // Force refresh the industry chart with real data
                initIndustryChart();
            } else {
                alert(`❌ Industry Data Verification Failed!\n\nError: ${data.message}\n\nCheck console for details.`);
            }
        })
        .catch(error => {
            console.error('❌ Industry verification error:', error);
            alert(`❌ Industry Data Verification ERROR!\n\nError: ${error.message}`);
        });
}

// Function to test unique companies, labor and regional distribution counting logic
function testUniqueCompaniesAndLaborCount() {
    console.log('🧪 Testing Unique Companies, Labor and Regional Distribution Logic...');
    
    fetch('/DN/TestUniqueCompaniesAndLaborCount')
        .then(response => response.json())
        .then(data => {
            console.log('📊 Unique Companies, Labor and Regional Distribution Test Result:', data);
            
            if (data.success) {
                let message = `✅ Unique Companies, Labor and Regional Distribution Test SUCCESSFUL!\n\n`;
                message += `Database Records: ${data.totalRecordsInDatabase.toLocaleString()}\n`;
                message += `Available Years: ${data.availableYears.join(', ')}\n\n`;
                
                message += `LOGIC: ${data.currentLogic}\n\n`;
                
                message += `Results by Year:\n`;
                data.testResults.forEach((result, index) => {
                    message += `\n--- Năm ${result.Year} ---\n`;
                    message += `📊 DOANH NGHIỆP:\n`;
                    message += `• Tổng records: ${result.TotalRecords.toLocaleString()}\n`;
                    message += `• Records có mã số thuế: ${result.RecordsWithTax.toLocaleString()}\n`;
                    message += `• Doanh nghiệp unique: ${result.UniqueCompanies.toLocaleString()}\n`;
                    message += `• Bản ghi trùng lặp loại bỏ: ${result.DuplicatesRemoved.toLocaleString()}\n`;
                    
                    message += `\n👥 LAO ĐỘNG:\n`;
                    message += `• Tổng lao động (unique DN): ${result.TotalLabor.toLocaleString()} người\n`;
                    message += `• DN có dữ liệu lao động: ${result.CompaniesWithLabor.toLocaleString()}\n`;
                    
                    if (result.SampleLaborData && result.SampleLaborData.length > 0) {
                        message += `• Ví dụ DN có nhiều lao động:\n`;
                        result.SampleLaborData.forEach(labor => {
                            message += `  - ${labor.Company}: ${labor.LaborCount.toLocaleString()} người\n`;
                        });
                    }
                    
                    message += `\n🗺️ PHÂN BỐ THEO MIỀN:\n`;
                    message += `• DN có dữ liệu miền: ${result.CompaniesWithRegion.toLocaleString()}\n`;
                    if (result.RegionalDistribution && result.RegionalDistribution.length > 0) {
                        message += `• Top miền/vùng:\n`;
                        result.RegionalDistribution.slice(0, 5).forEach(region => {
                            message += `  - ${region.Region}: ${region.Count.toLocaleString()} DN\n`;
                        });
                    }
                    
                    if (result.SampleDuplicates && result.SampleDuplicates.length > 0) {
                        message += `\n🔄 Ví dụ trùng lặp (đã loại bỏ):\n`;
                        result.SampleDuplicates.forEach(dup => {
                            message += `  - ${dup.Company} (${dup.Masothue}): ${dup.DuplicateCount} bản ghi\n`;
                        });
                    }
                });
                
                message += `\n✅ Logic đếm unique companies, lao động và phân bố vùng KT đã được FIXED!\n`;
                message += `Bây giờ đếm theo mã số thuế (Masothue) trong từng năm riêng biệt.\n`;
                message += `• Tổng lao động = tổng SoLaodong_CuoiNam của các DN unique trong năm đó.\n`;
                message += `• Phân bố vùng KT = đếm DN unique theo Vungkinhte trong năm đó.`;
                
                alert(message);
            } else {
                alert(`❌ Unique Companies, Labor and Regional Distribution Test FAILED!\n\nError: ${data.message}\n\nCheck console for details.`);
            }
        })
        .catch(error => {
            console.error('❌ Unique companies, labor and regional test error:', error);
            alert(`❌ Unique Companies, Labor and Regional Distribution Test ERROR!\n\nError: ${error.message}`);
        });
}

// Test dynamic filters function
function testDynamicFilters() {
    console.log('🧪 Testing Dynamic Filters from Database...');
    
    fetch('/DN/GetFilterOptions')
        .then(response => {
            console.log('📡 Filter test response status:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('📊 Filter test data:', data);
            
            if (data.success) {
                let message = `✅ Dynamic Filters Test SUCCESSFUL!\n\n`;
                message += `Database: ${data.dataSource.database}\n`;
                message += `Table: ${data.dataSource.table}\n`;
                message += `Total Records: ${data.dataSource.totalRecords.toLocaleString()}\n\n`;
                
                message += `Filter Options Found:\n`;
                message += `• Years: ${data.counts.yearsCount} (${data.filters.years.slice(0, 5).join(', ')})\n`;
                message += `• Business Types: ${data.counts.businessTypesCount}\n`;
                message += `• Provinces: ${data.counts.provincesCount}\n`;
                message += `• Economic Zones: ${data.counts.economicZonesCount}\n`;
                message += `• Regions: ${data.counts.regionsCount}\n\n`;
                
                message += `Top Business Types:\n`;
                data.filters.businessTypes.slice(0, 5).forEach((type, index) => {
                    message += `${index + 1}. ${type}\n`;
                });
                
                message += `\n✅ All filter data loaded from database successfully!\n`;
                message += `Check dropdowns for updated options.`;
                
                alert(message);
                
                // Force reload the filters with fresh data
                loadDynamicFilterOptions();
            } else {
                alert(`❌ Dynamic Filters Test FAILED!\n\nError: ${data.message}\n\nUsing fallback data.`);
                loadFallbackFilterOptions();
            }
        })
        .catch(error => {
            console.error('❌ Filter test error:', error);
            alert(`❌ Dynamic Filters Test ERROR!\n\nError: ${error.message}\n\nCheck console for details.`);
        });
}
</script>

<!-- Search Functionality Script -->
<script>
// Function to search company by tax code
function searchCompanyByTaxCode() {
    const taxCode = document.getElementById('taxCodeSearch').value.trim();
    
    if (!taxCode) {
        alert('Vui lòng nhập mã số thuế để tìm kiếm!');
        return;
    }
    
    console.log('🔍 Searching for tax code:', taxCode);
    
    // Show loading indicator
    const searchButton = document.querySelector('button[onclick="searchCompanyByTaxCode()"]');
    const originalText = searchButton.innerHTML;
    searchButton.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Đang tìm...';
    searchButton.disabled = true;
    
    fetch(`/DN/GetCompanyDataByTaxCode?masothue=${encodeURIComponent(taxCode)}`)
        .then(response => {
            console.log('📡 Search API Response status:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('📊 Search API Response:', data);
            
            // Restore button
            searchButton.innerHTML = originalText;
            searchButton.disabled = false;
            
            if (data.success) {
                console.log('✅ Company found:', data.company);
                displaySearchResults(data);
                showSearchResultsSection();
            } else {
                console.log('❌ Company not found:', data.message);
                alert(data.message || 'Không tìm thấy doanh nghiệp với mã số thuế này!');
                hideSearchResultsSection();
            }
        })
        .catch(error => {
            console.error('❌ Search API call failed:', error);
            
            // Restore button
            searchButton.innerHTML = originalText;
            searchButton.disabled = false;
            
            alert('Lỗi khi tìm kiếm: ' + error.message);
        });
}

// Function to display search results
function displaySearchResults(data) {
    console.log('📊 Displaying search results for:', data.company.name);
    
    // Update company names and tax codes in headers
    document.getElementById('searchedCompanyRevenueName').textContent = `Doanh Thu - ${data.company.name}`;
    document.getElementById('searchedCompanyRevenueCode').textContent = `Mã số thuế: ${data.company.masothue}`;
    document.getElementById('searchedCompanyProfitName').textContent = `Lợi Nhuận - ${data.company.name}`;
    document.getElementById('searchedCompanyProfitCode').textContent = `Mã số thuế: ${data.company.masothue}`;
    
    // Create revenue chart for searched company
    createSearchedChart('searchedRevenueChart', data.revenueChart, 'revenue', data.company);
    
    // Create profit chart for searched company
    createSearchedChart('searchedProfitChart', data.profitChart, 'profit', data.company);
}

// Function to create chart for searched company
function createSearchedChart(canvasId, chartData, type, companyInfo) {
    try {
        console.log(`📊 Creating searched ${type} chart for:`, companyInfo.name);
        
        const ctx = document.getElementById(canvasId);
        if (!ctx) {
            console.error(`❌ Canvas element ${canvasId} not found!`);
            return false;
        }
        
        // Destroy existing chart if any
        const existingChart = Chart.getChart(ctx);
        if (existingChart) {
            existingChart.destroy();
            console.log('🗑️ Destroyed existing searched chart');
        }
        
        const chart = new Chart(ctx, {
            type: 'line',
            data: chartData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: `${companyInfo.name} (${companyInfo.yearRange})`,
                        font: {
                            size: 16,
                            weight: 'bold'
                        },
                        color: type === 'revenue' ? '#28A745' : '#FD7E14'
                    },
                    legend: {
                        display: true,
                        position: 'top',
                        labels: {
                            usePointStyle: true,
                            padding: 10,
                            font: {
                                size: 14
                            }
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: 'white',
                        bodyColor: 'white',
                        callbacks: {
                            label: function(context) {
                                const value = context.raw;
                                if (value === 0) {
                                    return context.dataset.label + ': Không có dữ liệu';
                                }
                                const formattedValue = value.toFixed(2) + ' tỷ VND';
                                return context.dataset.label + ': ' + formattedValue;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grace: '10%',
                        title: {
                            display: true,
                            text: 'Giá trị (tỷ VND)',
                            font: {
                                size: 13
                            }
                        },
                        ticks: {
                            callback: function(value) {
                                if (value === 0) return '0';
                                return value.toFixed(1) + ' tỷ';
                            },
                            font: {
                                size: 11
                            }
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Năm',
                            font: {
                                size: 13
                            }
                        },
                        ticks: {
                            font: {
                                size: 11
                            }
                        }
                    }
                },
                animation: {
                    duration: 1000,
                    easing: 'easeInOutQuart'
                }
            }
        });
        
        console.log(`✅ Searched ${type} Chart created successfully!`);
        return true;
    } catch (error) {
        console.error(`❌ Error creating searched ${type} chart:`, error);
        return false;
    }
}

// Function to show search results section
function showSearchResultsSection() {
    const section = document.getElementById('searchResultsSection');
    if (section) {
        section.style.display = 'block';
        
        // Smooth scroll to results
        setTimeout(() => {
            section.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'start' 
            });
        }, 300);
    }
}

// Function to hide search results section
function hideSearchResultsSection() {
    const section = document.getElementById('searchResultsSection');
    if (section) {
        section.style.display = 'none';
    }
}

// Function to clear search
function clearSearch() {
    console.log('🔄 Clearing search...');
    
    // Clear input
    document.getElementById('taxCodeSearch').value = '';
    
    // Hide results section
    hideSearchResultsSection();
    
    // Destroy search result charts
    const revenueChart = Chart.getChart('searchedRevenueChart');
    const profitChart = Chart.getChart('searchedProfitChart');
    
    if (revenueChart) {
        revenueChart.destroy();
        console.log('🗑️ Destroyed searched revenue chart');
    }
    
    if (profitChart) {
        profitChart.destroy();
        console.log('🗑️ Destroyed searched profit chart');
    }
    
    console.log('✅ Search cleared successfully');
}

// Enable Enter key search
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('taxCodeSearch');
    if (searchInput) {
        searchInput.addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                searchCompanyByTaxCode();
            }
        });
        
        // Add input validation
        searchInput.addEventListener('input', function(event) {
            let value = event.target.value;
            // Remove any non-alphanumeric characters (allow letters and numbers)
            value = value.replace(/[^a-zA-Z0-9]/g, '');
            // Limit to 20 characters
            value = value.substring(0, 20);
            event.target.value = value;
        });
    }
});

// Test function for search functionality
function testSearchFunction() {
    console.log('🧪 Testing search functionality...');
    
    // Test with a sample tax code
    const testTaxCode = '0123456789';
    document.getElementById('taxCodeSearch').value = testTaxCode;
    
    alert(`Testing search with tax code: ${testTaxCode}\n\nCheck console for details.`);
    searchCompanyByTaxCode();
}

// Top Companies API test function has been removed
// The Revenue and Profit charts are no longer available

// Debug function for Revenue data
function debugRevenueData() {
    console.log('🔍 Debugging Revenue Data from Database...');
    
    fetch('/DN/DebugRevenueData')
        .then(response => response.json())
        .then(data => {
            console.log('🔍 Revenue Debug Result:', data);
            
            if (data.success) {
                let message = `🔍 REVENUE DATA DEBUG SUCCESSFUL!\n\n`;
                
                message += `📊 SUMMARY:\n`;
                message += `- Total Records: ${data.summary.totalRecords.toLocaleString()}\n`;
                message += `- Records with Revenue: ${data.summary.recordsWithRevenue.toLocaleString()}\n`;
                message += `- Records with Positive Revenue: ${data.summary.recordsWithPositiveRevenue.toLocaleString()}\n`;
                message += `- Percentage with Revenue: ${data.summary.percentageWithRevenue}%\n\n`;
                
                message += `📋 COLUMN INFO:\n`;
                message += `- Column: ${data.columnInfo.columnName}\n`;
                message += `- Unit: ${data.columnInfo.unit} → ${data.columnInfo.convertedUnit}\n\n`;
                
                message += `📈 DISTRIBUTION BY YEAR:\n`;
                if (data.distributionByYear && data.distributionByYear.length > 0) {
                    data.distributionByYear.forEach(year => {
                        message += `- ${year.Year}: ${year.Count} records, ${year.UniqueCompanies} companies\n`;
                        message += `  Avg: ${(year.AvgRevenue / 1000).toFixed(2)} tỷ VND\n`;
                    });
                } else {
                    message += `- No yearly data found\n`;
                }
                
                message += `\n🏆 TOP 5 COMPANIES BY AVG REVENUE:\n`;
                if (data.topCompaniesByRevenue && data.topCompaniesByRevenue.length > 0) {
                    data.topCompaniesByRevenue.forEach((company, index) => {
                        message += `${index + 1}. ${company.CompanyName}\n`;
                        message += `   Tax Code: ${company.TaxCode}\n`;
                        message += `   Avg Revenue: ${(company.AverageRevenue / 1000).toFixed(2)} tỷ VND\n`;
                        message += `   Years: ${company.YearsCount} (${company.Years.join(', ')})\n`;
                    });
                } else {
                    message += `- No top companies found\n`;
                }
                
                message += `\n💡 SAMPLE DATA:\n`;
                if (data.sampleData && data.sampleData.length > 0) {
                    data.sampleData.slice(0, 3).forEach(sample => {
                        message += `- ${sample.Company} (${sample.TaxCode})\n`;
                        message += `  Year ${sample.Year}: ${sample.RevenueInBillion} tỷ VND\n`;
                    });
                } else {
                    message += `- No sample data found\n`;
                }
                
                message += `\n✅ Check console for full details.`;
                
                alert(message);
                
                // If we have data, try to refresh the revenue chart
                if (data.topCompaniesByRevenue && data.topCompaniesByRevenue.length > 0) {
                    console.log('🔄 Revenue data found, but charts have been removed...');
                    console.log('📊 Revenue chart functionality has been disabled');
                }
            } else {
                alert(`❌ REVENUE DEBUG FAILED!\n\nError: ${data.message}\n\nCheck console for details.`);
            }
        })
        .catch(error => {
            console.error('❌ Revenue debug error:', error);
            alert(`❌ Revenue Debug ERROR!\n\nError: ${error.message}\n\nCheck console for details.`);
                 });
}
</script>

<!-- Market Share Chart Script -->
<script>
// Function to initialize Market Share chart
function initMarketShareChart() {
    console.log('🎯 Initializing Market Share Chart...');
    
    if (typeof Chart === 'undefined') {
        console.error('❌ Chart.js is not loaded!');
        return false;
    }
    
    const ctx = document.getElementById('marketShareChart');
    if (!ctx) {
        console.error('❌ Canvas element marketShareChart not found!');
        return false;
    }
    
    // Get selected year from filter
    const selectedYears = getSelectedFilterValues('yearFilter');
    let apiUrl = '/DN/GetMarketShareChart';
    
    if (selectedYears && selectedYears.length > 0) {
        // Use first selected year
        apiUrl += `?nam=${selectedYears[0]}`;
        console.log(`📡 Market Share API with year filter: ${selectedYears[0]}`);
    }
    
    fetch(apiUrl)
        .then(response => {
            console.log('📡 Market Share API Response status:', response.status);
            return response.json();
        })
        .then(apiData => {
            console.log('📊 Market Share API Response:', apiData);
            
            if (apiData.success && apiData.data && apiData.data.datasets && apiData.data.datasets.length > 0) {
                console.log('✅ Using Market Share API data');
                createMarketShareChartWithData(ctx, apiData.data, apiData.metadata, apiData.detailedData);
            } else {
                console.log('⚠️ Market Share API failed or no data, showing error message');
                console.log('⚠️ API response:', apiData);
                createEmptyMarketShareChart(ctx, apiData);
            }
        })
        .catch(error => {
            console.error('❌ Market Share API call failed:', error);
            createEmptyMarketShareChart(ctx, { message: 'API call failed: ' + error.message });
        });
    
    return true;
}

// Function to create Market Share chart with data
// Enhanced with external labels and connector lines for better visualization
function createMarketShareChartWithData(ctx, chartData, metadata, detailedData) {
    try {
        console.log('📊 Creating Market Share chart with external labels and connector lines:', chartData);
        
        // Destroy existing chart if any
        const existingChart = Chart.getChart(ctx);
        if (existingChart) {
            existingChart.destroy();
            console.log('🗑️ Destroyed existing Market Share chart');
        }
        
        // Prepare data for pie chart (only use Market Share data)
        const pieData = {
            labels: chartData.labels,
            datasets: [{
                label: 'Market Share (%)',
                data: chartData.datasets[0].data, // Only use market share data
                backgroundColor: chartData.datasets[0].backgroundColor,
                borderColor: chartData.datasets[0].borderColor,
                borderWidth: 3,
                hoverBorderWidth: 4
            }]
        };

        const chart = new Chart(ctx, {
            type: 'pie',
            data: pieData,
            options: {
                responsive: true,
                maintainAspectRatio: true,
                aspectRatio: 1.2,  // Slightly wider than square to accommodate labels
                layout: {
                    padding: {
                        top: 30,
                        bottom: 60,  // Increased bottom padding for line labels
                        left: 100,   // More space for external labels
                        right: 100
                    }
                },
                plugins: {
                    title: {
                        display: false
                    },
                    legend: {
                        display: false
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: 'white',
                        bodyColor: 'white',
                        callbacks: {
                            label: function(context) {
                                const value = context.raw;
                                const companyIndex = context.dataIndex;
                                if (detailedData && detailedData.top10Details && detailedData.top10Details[companyIndex]) {
                                    const detail = detailedData.top10Details[companyIndex];
                                    return [
                                        `${context.label}: ${value.toFixed(2)}%`,
                                        `Rank: #${detail.rank}`,
                                        `Revenue: ${detail.revenue} tỷ VND`,
                                        `Tax Code: ${detail.taxCode}`
                                    ];
                                } else if (context.label.includes('Others')) {
                                    const othersData = detailedData.othersData;
                                    return [
                                        `${context.label}: ${value.toFixed(2)}%`,
                                        `Companies: ${othersData.count} DN`,
                                        `Total Revenue: ${othersData.totalRevenue.toFixed(2)} tỷ VND`
                                    ];
                                }
                                return `${context.label}: ${value.toFixed(2)}%`;
                            }
                        }
                    },
                    datalabels: {
                        display: false // Disable default datalabels, we'll use custom plugin
                    }
                },
                animation: {
                    animateScale: true,
                    animateRotate: true,
                    duration: 1500
                },
                elements: {
                    arc: {
                        borderWidth: 2,
                        borderColor: '#ffffff'
                    }
                }
            },
            plugins: [
                ChartDataLabels,
                                    // Custom plugin for angular connector lines and simple labels
                    {
                        afterDraw: function(chart) {
                            const ctx = chart.ctx;
                            const meta = chart.getDatasetMeta(0);
                            const centerX = chart.chartArea.left + (chart.chartArea.right - chart.chartArea.left) / 2;
                            const centerY = chart.chartArea.top + (chart.chartArea.bottom - chart.chartArea.top) / 2;
                            
                            // Reduce pie chart radius to create more space
                            const maxRadius = Math.min(
                                (chart.chartArea.right - chart.chartArea.left) / 2 - 80,
                                (chart.chartArea.bottom - chart.chartArea.top) / 2 - 40
                            );
                            
                            // First pass: Calculate all positions and store them
                            const labelPositions = [];
                            chart.data.datasets[0].data.forEach((value, index) => {
                                const arc = meta.data[index];
                                const radius = Math.min(arc.outerRadius, maxRadius);
                                const startAngle = arc.startAngle;
                                const endAngle = arc.endAngle;
                                const midAngle = (startAngle + endAngle) / 2;
                                const percentage = value.toFixed(1);
                                const rank = index + 1;
                                
                                // Determine position in chart (right or left side)
                                const isRightSide = Math.cos(midAngle) > 0;
                                
                                // Points for angular connector line
                                const startX = centerX + Math.cos(midAngle) * radius;
                                const startY = centerY + Math.sin(midAngle) * radius;
                                
                                // Extended radial segment
                                const midX = centerX + Math.cos(midAngle) * (radius + 60);
                                const midY = centerY + Math.sin(midAngle) * (radius + 60);
                                
                                // Horizontal segment endpoint
                                const endX = isRightSide ? 
                                    (chart.chartArea.right - 10) : 
                                    (chart.chartArea.left + 10);
                                
                                labelPositions.push({
                                    index, value, percentage, rank, isRightSide, startX, startY, 
                                    midX, midY, endX, midY, color: chart.data.datasets[0].backgroundColor[index]
                                });
                            });
                            
                            // Sort positions by side and Y coordinate to detect overlaps
                            const leftSide = labelPositions.filter(p => !p.isRightSide).sort((a, b) => a.midY - b.midY);
                            const rightSide = labelPositions.filter(p => p.isRightSide).sort((a, b) => a.midY - b.midY);
                            
                            // Adjust Y positions to prevent overlap
                            function adjustOverlaps(positions, minSpacing = 25) {
                                for (let i = 1; i < positions.length; i++) {
                                    const current = positions[i];
                                    const previous = positions[i - 1];
                                    
                                    if (Math.abs(current.midY - previous.midY) < minSpacing) {
                                        current.midY = previous.midY + minSpacing;
                                    }
                                }
                            }
                            
                            adjustOverlaps(leftSide);
                            adjustOverlaps(rightSide);
                            
                            // Second pass: Draw with adjusted positions
                            [...leftSide, ...rightSide].forEach((pos) => {
                                const { startX, startY, midX, midY, endX, color, rank, percentage, isRightSide } = pos;
                                const endY = midY; // Use adjusted Y position
                                
                                // Draw angular connector line (2 segments)
                                ctx.strokeStyle = color;
                                ctx.lineWidth = 2;
                                ctx.setLineDash([]);
                                
                                // First segment (from pie to mid point)
                                ctx.beginPath();
                                ctx.moveTo(startX, startY);
                                ctx.lineTo(midX, midY);
                                ctx.stroke();
                                
                                // Second segment (horizontal to edge)
                                ctx.beginPath();
                                ctx.moveTo(midX, midY);
                                ctx.lineTo(endX, endY);
                                ctx.stroke();
                                
                                // Draw connection dot at pie edge
                                ctx.beginPath();
                                ctx.arc(startX, startY, 3, 0, 2 * Math.PI);
                                ctx.fillStyle = color;
                                ctx.fill();
                                ctx.strokeStyle = '#fff';
                                ctx.lineWidth = 1;
                                ctx.stroke();
                                
                                // Draw elbow dot at corner
                                ctx.beginPath();
                                ctx.arc(midX, midY, 2, 0, 2 * Math.PI);
                                ctx.fillStyle = color;
                                ctx.fill();
                                
                                // Draw simple label: #1 | 25%
                                const labelText = `#${rank} | ${percentage}%`;
                                
                                // Label background - INCREASED FONT SIZE for better visibility
                                ctx.font = 'bold 16px Arial';
                                const textWidth = ctx.measureText(labelText).width;
                                const labelX = isRightSide ? endX - textWidth - 10 : endX + 10;
                                const labelY = endY;
                                
                                // Background rectangle - INCREASED SIZE for larger font
                                ctx.fillStyle = color + 'E6'; // Semi-transparent background
                                ctx.fillRect(
                                    labelX - 6, 
                                    labelY - 10, 
                                    textWidth + 12, 
                                    20
                                );
                                
                                // Border
                                ctx.strokeStyle = color;
                                ctx.lineWidth = 1;
                                ctx.strokeRect(
                                    labelX - 6, 
                                    labelY - 10, 
                                    textWidth + 12, 
                                    20
                                );
                                
                                // Label text
                                ctx.fillStyle = '#333';
                                ctx.fillText(labelText, labelX, labelY + 5);
                            });
                    }
                }
            ]
        });
        
        console.log('✅ Market Share Chart created successfully!');
        
        // Force resize to maintain aspect ratio and prevent distortion
        setTimeout(() => {
            chart.resize();
            
            // Maintain aspect ratio to prevent oval shape
            const container = ctx.parentElement;
            const containerWidth = container.offsetWidth;
            const containerHeight = container.offsetHeight;
            
            console.log(`🔄 Container dimensions: ${containerWidth}x${containerHeight}`);
            
            // Calculate proper dimensions maintaining 1.2 aspect ratio
            const maxWidth = containerWidth - 40; // Account for padding
            const maxHeight = containerHeight - 80; // Account for padding
            const targetHeight = maxWidth / 1.2; // Maintain aspect ratio
            
            if (targetHeight <= maxHeight) {
                // Use width-based sizing
                ctx.style.width = `${maxWidth}px`;
                ctx.style.height = `${targetHeight}px`;
            } else {
                // Use height-based sizing
                const targetWidth = maxHeight * 1.2;
                ctx.style.width = `${targetWidth}px`;
                ctx.style.height = `${maxHeight}px`;
            }
            
            chart.resize();
            chart.update('active'); // Force update with labels
            console.log('🔄 Chart resized maintaining aspect ratio');
        }, 200);
        
        // Create custom legend
        createMarketShareLegend(chartData.labels, chartData.datasets, metadata, detailedData);
        
        return true;
    } catch (error) {
        console.error('❌ Error creating Market Share chart:', error);
        return false;
    }
}

// Function to create empty Market Share chart on error
function createEmptyMarketShareChart(ctx, errorData) {
    console.log('🔴 Creating empty Market Share chart with error:', errorData);
    
    // Destroy existing chart if any
    const existingChart = Chart.getChart(ctx);
    if (existingChart) {
        existingChart.destroy();
    }
    
    // Create empty chart with error message
    const emptyChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['Không có dữ liệu'],
            datasets: [{
                label: 'Market Share (Lỗi)',
                data: [0],
                backgroundColor: '#dc3545',
                borderColor: '#dc3545',
                borderWidth: 2
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                title: {
                    display: false  // Hide title even for error chart
                },
                legend: {
                    display: false
                },
                tooltip: {
                    enabled: false
                }
            },
            scales: {
                y: {
                    display: false
                },
                x: {
                    display: false
                }
            }
        }
    });
    
    // Update legend with error message
    const legendContainer = document.getElementById('marketShareLegendDetails');
    if (legendContainer) {
        let errorMessage = `
            <div class="text-center">
                <div class="alert alert-danger" style="margin: 0; padding: 15px;">
                    <h6 class="text-danger mb-2">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Không thể tải dữ liệu Market Share
                    </h6>
                    <small>Cột: SR_Doanhthu_Thuan_BH_CCDV</small><br>
                    <small>Công thức: Market Share = (DN Revenue / Total Market Revenue) × 100%</small><br>
        `;
        
        if (errorData && errorData.message) {
            errorMessage += `<small>Lỗi: ${errorData.message}</small><br>`;
        }
        
        if (errorData && errorData.debug) {
            errorMessage += `<small>Records: ${errorData.debug.totalRecords || 'N/A'}</small><br>`;
            errorMessage += `<small>Có doanh thu: ${errorData.debug.withRevenue || 'N/A'}</small><br>`;
        }
        
        errorMessage += `
                    <hr style="margin: 10px 0;">
                    <button onclick="testMarketShareAPI()" class="btn btn-sm btn-outline-danger">
                        <i class="fas fa-bug me-1"></i>
                        Debug
                    </button>
                    <button onclick="initMarketShareChart()" class="btn btn-sm btn-outline-primary">
                        <i class="fas fa-redo me-1"></i>
                        Thử lại
                    </button>
                </div>
            </div>
        `;
        
        legendContainer.innerHTML = errorMessage;
    }
    
    console.log('🔴 Empty Market Share chart created with error message');
}

// Function to create custom legend for Market Share chart
function createMarketShareLegend(labels, datasets, metadata, detailedData) {
    const legendContainer = document.getElementById('marketShareLegendDetails');
    if (!legendContainer) return;
    
    let legendHTML = `
        <!-- Market Share Summary -->
        <div class="mb-3 p-3 bg-white border rounded">
            <h6 class="text-primary mb-2">
                <i class="fas fa-chart-pie me-1"></i>
                Tổng quan thị trường
            </h6>
            <div style="font-size: 0.85rem;">
                <div class="mb-1">📅 Năm phân tích: <strong>${metadata.analysisYear}</strong></div>
                <div class="mb-1">📊 Tổng DN phân tích: <strong>${metadata.totalCompanies}</strong></div>
                <div class="mb-1">💰 Tổng doanh thu thị trường: <strong>${metadata.totalMarketRevenue} tỷ VND</strong></div>
                <div class="mb-1">🏆 Top 10 chiếm: <strong>${detailedData.marketSummary.top10SharePercentage}%</strong></div>
                <div class="mb-1">🔄 Khác chiếm: <strong>${detailedData.marketSummary.othersSharePercentage}%</strong></div>
                <div class="mb-1">✅ Tổng Market Share: <strong>${detailedData.marketSummary.totalMarketShareValidation}%</strong></div>
                <div class="${detailedData.marketSummary.shouldBe100Percent ? 'text-success' : 'text-warning'}">
                    ${detailedData.marketSummary.shouldBe100Percent ? '✅' : '⚠️'} Validation: <strong>${detailedData.marketSummary.calculationAccuracy}</strong>
                </div>
            </div>
        </div>
        
        <!-- Revenue Breakdown -->
        <div class="mb-3 p-3 bg-light border rounded">
            <h6 class="text-secondary mb-2">
                <i class="fas fa-calculator me-1"></i>
                Chi tiết BASE calculation
            </h6>
                         <div style="font-size: 0.8rem;">
                <div class="mb-1">🏢 <strong>DN trong BASE: ${metadata.revenueBreakdown.totalCompaniesInBase}</strong></div>
                <div class="mb-1">📊 DN có dữ liệu doanh thu: <strong>${metadata.revenueBreakdown.companiesWithActualRevenueData}</strong></div>
                <div class="mb-1">❓ DN KHÔNG có dữ liệu DT: <strong>${metadata.revenueBreakdown.companiesWithoutRevenueData}</strong></div>
                <hr style="margin: 8px 0;">
                <div class="mb-1">📈 DN có doanh thu dương: <strong>${metadata.revenueBreakdown.companiesWithPositiveRevenue}</strong></div>
                <div class="mb-1">📉 DN có doanh thu âm: <strong>${metadata.revenueBreakdown.companiesWithNegativeRevenue}</strong></div>
                <div class="mb-1">⭕ DN có doanh thu = 0: <strong>${metadata.revenueBreakdown.companiesWithZeroRevenue}</strong></div>
                <hr style="margin: 8px 0;">
                <div class="mb-1">💚 Tổng doanh thu dương: <strong>${metadata.revenueBreakdown.positiveRevenueSum} tỷ VND</strong></div>
                <div class="mb-1">❤️ Tổng doanh thu âm: <strong>${metadata.revenueBreakdown.negativeRevenueSum} tỷ VND</strong></div>
                <div>🔵 <strong>BASE = ${metadata.revenueBreakdown.totalMarketRevenueSum} tỷ VND</strong></div>
                <div class="mt-2 text-muted" style="font-size: 0.75rem;">
                    <em>DN không có dữ liệu DT được tính là 0% market share</em>
                </div>
            </div>
        </div>
        
        <!-- Top 10 Details -->
        <div class="mb-3">
            <h6 class="text-success mb-2">
                <i class="fas fa-trophy me-1"></i>
                Top 10 Market Share
            </h6>
    `;
    
    if (detailedData && detailedData.top10Details) {
        detailedData.top10Details.forEach((company, index) => {
            const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFCE56', '#FF9F40', '#9966FF', '#FF6384', '#36A2EB', '#C9CBCF'];
            const color = colors[index] || '#95A5A6';
            
            legendHTML += `
                <div class="legend-item mb-2 p-2 bg-white border rounded" style="border-left: 4px solid ${color} !important;">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div style="flex: 1;">
                            <div style="font-weight: 600; font-size: 0.8rem; color: #2d3748; margin-bottom: 2px;">
                                #${company.rank} ${company.companyName}
                            </div>
                            <div style="font-size: 0.7rem; color: #718096;">
                                MST: ${company.taxCode} | Năm: ${company.year}
                            </div>
                        </div>
                        <div style="text-align: right;">
                            <div style="font-weight: 600; color: ${color}; font-size: 0.85rem;">
                                ${parseFloat(company.marketShare).toFixed(2)}%
                            </div>
                            <div style="font-size: 0.75rem; color: #718096;">
                                ${parseFloat(company.revenue).toFixed(2)} tỷ VND
                            </div>
                        </div>
                    </div>
                </div>
            `;
        });
    }
    
    // Others section
    if (detailedData && detailedData.othersData && detailedData.othersData.count > 0) {
        legendHTML += `
            <div class="legend-item mb-2 p-2 bg-light border rounded" style="border-left: 4px solid #95A5A6 !important;">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div style="flex: 1;">
                        <div style="font-weight: 600; font-size: 0.8rem; color: #2d3748; margin-bottom: 2px;">
                            Others (${detailedData.othersData.count} DN)
                        </div>
                        <div style="font-size: 0.7rem; color: #718096;">
                            Các doanh nghiệp khác
                        </div>
                    </div>
                    <div style="text-align: right;">
                        <div style="font-weight: 600; color: #95A5A6; font-size: 0.85rem;">
                            ${parseFloat(detailedData.othersData.totalMarketShare).toFixed(2)}%
                        </div>
                        <div style="font-size: 0.75rem; color: #718096;">
                            ${parseFloat(detailedData.othersData.totalRevenue).toFixed(2)} tỷ VND
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    
    legendHTML += `
        </div>
        
        <!-- Formula Explanation -->
        <div class="mt-3 p-3 bg-info bg-opacity-10 border border-info rounded">
            <h6 class="text-info mb-2">
                <i class="fas fa-calculator me-1"></i>
                Công thức tính toán
            </h6>
            <div style="font-size: 0.8rem; color: #0c5460;">
                <strong>Market Share = (Doanh thu DN / Tổng doanh thu thị trường) × 100%</strong><br>
                <small>Dữ liệu lấy từ cột SR_Doanhthu_Thuan_BH_CCDV (năm gần nhất của mỗi DN)</small>
            </div>
        </div>
    `;
    
    legendContainer.innerHTML = legendHTML;
}

// Initialize Market Share chart when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    if (!initMarketShareChart()) {
        setTimeout(() => {
            console.log('🔄 Retrying Market Share chart creation...');
            initMarketShareChart();
        }, 1000);
    }
});

// Also try when window is fully loaded
window.addEventListener('load', function() {
    const canvas = document.getElementById('marketShareChart');
    if (canvas && !Chart.getChart(canvas)) {
        console.log('🔄 Creating Market Share chart on window load...');
        initMarketShareChart();
    }
});
</script>

<!-- Test Functions for Market Share -->
<script>
// Test function for Market Share API
function testMarketShareAPI() {
    console.log('🧪 Testing Market Share API...');
    
    // Get selected year from filter for API test
    const selectedYears = getSelectedFilterValues('yearFilter');
    let testApiUrl = '/DN/GetMarketShareChart';
    
    if (selectedYears && selectedYears.length > 0) {
        testApiUrl += `?nam=${selectedYears[0]}`;
        console.log(`📡 Testing Market Share API with year: ${selectedYears[0]}`);
    }
    
    fetch(testApiUrl)
        .then(response => {
            console.log('📡 Market Share API test response status:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('📊 Market Share API test data:', data);
            
            if (data.success) {
                let message = `✅ MARKET SHARE API SUCCESSFUL!\n\n`;
                
                message += `📊 MARKET ANALYSIS:\n`;
                message += `- Total Companies: ${data.metadata.totalCompanies}\n`;
                message += `- Top 10 Companies: ${data.metadata.top10Companies}\n`;
                message += `- Others Count: ${data.metadata.othersCount}\n`;
                message += `- Total Market Revenue: ${data.metadata.totalMarketRevenue} tỷ VND\n\n`;
                
                message += `📋 FORMULA:\n`;
                message += `${data.metadata.marketShareFormula}\n\n`;
                
                message += `🏆 TOP 5 COMPANIES:\n`;
                if (data.detailedData && data.detailedData.top10Details) {
                    data.detailedData.top10Details.slice(0, 5).forEach(company => {
                        message += `${company.rank}. ${company.companyName}\n`;
                        message += `   Market Share: ${company.marketShare}%\n`;
                        message += `   Revenue: ${company.revenue} tỷ VND\n`;
                    });
                }
                
                message += `\n📈 MARKET SUMMARY:\n`;
                if (data.detailedData && data.detailedData.marketSummary) {
                    message += `- Top 10 Share: ${data.detailedData.marketSummary.top10SharePercentage}%\n`;
                    message += `- Others Share: ${data.detailedData.marketSummary.othersSharePercentage}%\n`;
                }
                
                message += `\n✅ Data Source: ${data.metadata.dataSource}\n`;
                message += `Unit: ${data.metadata.unit}\n`;
                message += `\nCheck console for full details.`;
                
                alert(message);
                
                // Force refresh chart with new data
                initMarketShareChart();
            } else {
                alert(`❌ MARKET SHARE API FAILED!\n\nError: ${data.message}\n\nCheck console for details.`);
            }
        })
        .catch(error => {
            console.error('❌ Market Share API test error:', error);
            alert(`❌ Market Share API Test ERROR!\n\nError: ${error.message}\n\nCheck console for details.`);
        });
}

// Helper function to get selected values from filter dropdown
function getSelectedFilterValues(filterId) {
    const filterElement = document.getElementById(filterId);
    if (!filterElement) return [];
    
    const checkedInputs = filterElement.querySelectorAll('input[type="checkbox"]:checked');
    return Array.from(checkedInputs).map(input => input.value);
}

// Function to collect all current filter values
function getCurrentFilterValues() {
    return {
        years: getSelectedFilterValues('yearFilter'),
        businessTypes: getSelectedFilterValues('businessTypeFilter'),
        provinces: getSelectedFilterValues('provinceFilter'),
        economicZones: getSelectedFilterValues('economicZoneFilter'),
        companySizes: getSelectedFilterValues('companySizeFilter')
    };
}

// Helper function to get current year for chart titles
function getCurrentYear() {
    const filters = getCurrentFilterValues();
    if (filters.years && filters.years.length > 0) {
        return filters.years[0]; // Use first selected year
    }
    return new Date().getFullYear(); // Default to current year
}

// Function to build URL parameters from filter values
function buildFilterParams(filters) {
    const params = new URLSearchParams();
    
    if (filters.years && filters.years.length > 0) {
        filters.years.forEach(year => params.append('Nam', year));
    }
    if (filters.businessTypes && filters.businessTypes.length > 0) {
        filters.businessTypes.forEach(type => params.append('Loaihinhkte', type));
    }
    if (filters.provinces && filters.provinces.length > 0) {
        filters.provinces.forEach(province => params.append('MaTinh_Dieutra', province));
    }
    if (filters.economicZones && filters.economicZones.length > 0) {
        filters.economicZones.forEach(zone => params.append('Vungkinhte', zone));
    }
    if (filters.companySizes && filters.companySizes.length > 0) {
        filters.companySizes.forEach(size => params.append('QuyMo', size));
    }
    
    return params.toString();
}

// Central function to refresh ALL charts with current filters
function refreshAllCharts() {
    console.log('🔄 Refreshing ALL charts with current filters...');
    
    const filters = getCurrentFilterValues();
    console.log('📊 Current filters:', filters);
    
    // Check if any filters are selected
    const hasFilters = Object.values(filters).some(arr => arr && arr.length > 0);
    if (!hasFilters) {
        showFilterNotification('⚠️ Chưa chọn bộ lọc nào. Vui lòng chọn ít nhất một bộ lọc.', 'error');
        return;
    }
    
    // Show loading indicators
    showLoadingIndicators();
    
    // Refresh each chart with filters
    Promise.all([
        refreshMarketShareChart(filters),
        refreshVungKinhTeChart(filters),
        refreshIndustryChart(filters),
        refreshCompanySizeChart(filters)
        // Revenue and Profit charts have been removed
    ]).then(() => {
        hideLoadingIndicators();
        
        // Show success notification
        const filterCount = Object.values(filters).reduce((count, arr) => count + (arr ? arr.length : 0), 0);
        showFilterNotification(`✅ Đã cập nhật thành công tất cả charts với ${filterCount} bộ lọc!`, 'success');
        
        console.log('✅ All charts refreshed successfully!');
    }).catch(error => {
        hideLoadingIndicators();
        showFilterNotification('❌ Có lỗi xảy ra khi cập nhật charts. Vui lòng thử lại.', 'error');
        console.error('❌ Error refreshing charts:', error);
    });
}

// Function to refresh Market Share chart with filters
function refreshMarketShareChart(filters = null) {
    if (!filters) filters = getCurrentFilterValues();
    console.log('🔄 Refreshing Market Share chart...');
    return new Promise((resolve) => {
        try {
            initMarketShareChart();
            resolve();
        } catch (error) {
            console.error('❌ Error refreshing Market Share chart:', error);
            resolve();
        }
    });
}

// Function to refresh Vùng Kinh Tế chart with filters
function refreshVungKinhTeChart(filters = null) {
    if (!filters) filters = getCurrentFilterValues();
    console.log('🔄 Refreshing Vùng Kinh Tế chart...');
    
    return new Promise((resolve) => {
        try {
            // For now, just re-initialize with ViewBag data
            // TODO: Create API endpoint with filter support
            initVungKinhTeChart();
            resolve();
        } catch (error) {
            console.error('❌ Error refreshing Vùng Kinh Tế chart:', error);
            resolve();
        }
    });
}

// Function to refresh Industry chart with filters  
function refreshIndustryChart(filters = null) {
    if (!filters) filters = getCurrentFilterValues();
    console.log('🔄 Refreshing Industry chart...');
    
    return new Promise((resolve) => {
        try {
            initIndustryChart(); // Re-initialize with updated year
            resolve();
        } catch (error) {
            console.error('❌ Error refreshing Industry chart:', error);
            resolve();
        }
    });
}

// Function to refresh Company Size chart with filters
function refreshCompanySizeChart(filters = null) {
    if (!filters) filters = getCurrentFilterValues();
    console.log('🔄 Refreshing Company Size chart...');
    
    return new Promise((resolve) => {
        try {
            initQuyMoChart(); // Re-initialize with updated year
            resolve();
        } catch (error) {
            console.error('❌ Error refreshing Company Size chart:', error);
            resolve();
        }
    });
}

// Revenue and Profit chart functions have been removed
// These charts are no longer available in the application

// Helper functions to show/hide loading indicators
function showLoadingIndicators() {
    // Show loading notification
    showFilterNotification('🔄 Đang cập nhật tất cả charts với bộ lọc...', 'info');
    
    const chartContainers = [
        'marketShareChart', 'vungKinhTeChart', 'industryChart', 
        'quyMoChart'
        // 'revenueChart', 'profitChart' - removed
    ];
    
    chartContainers.forEach(chartId => {
        const container = document.getElementById(chartId);
        if (container) {
            container.style.opacity = '0.5';
            container.style.pointerEvents = 'none';
            
            // Add loading overlay
            const overlay = document.createElement('div');
            overlay.className = 'chart-loading-overlay';
            overlay.innerHTML = '<i class="fas fa-spinner fa-spin fa-2x"></i><br>Đang tải...';
            overlay.style.cssText = `
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: rgba(255,255,255,0.9);
                padding: 20px;
                border-radius: 8px;
                text-align: center;
                z-index: 1000;
                color: #333;
                box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            `;
            
            const parent = container.parentElement;
            if (parent && parent.style.position !== 'relative') {
                parent.style.position = 'relative';
            }
            parent.appendChild(overlay);
        }
    });
}

function hideLoadingIndicators() {
    const chartContainers = [
        'marketShareChart', 'vungKinhTeChart', 'industryChart', 
        'quyMoChart'
        // 'revenueChart', 'profitChart' - removed
    ];
    
    chartContainers.forEach(chartId => {
        const container = document.getElementById(chartId);
        if (container) {
            container.style.opacity = '1';
            container.style.pointerEvents = 'auto';
            
            // Remove loading overlay
            const overlay = container.parentElement.querySelector('.chart-loading-overlay');
            if (overlay) {
                overlay.remove();
            }
        }
    });
}

// Function to show filter notifications
function showFilterNotification(message, type = 'success') {
    // Remove existing notifications
    const existingNotification = document.querySelector('.filter-notification');
    if (existingNotification) {
        existingNotification.remove();
    }
    
    // Create notification
    const notification = document.createElement('div');
    notification.className = 'filter-notification';
    
    const bgColor = type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#17a2b8';
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${bgColor};
        color: white;
        padding: 15px 20px;
        border-radius: 8px;
        z-index: 9999;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        max-width: 400px;
        font-weight: 500;
        transition: all 0.3s ease-out;
    `;
    
    notification.innerHTML = `
        <div style="display: flex; align-items: center; gap: 10px;">
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
            <span>${message}</span>
            <button onclick="this.parentElement.parentElement.remove()" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; margin-left: auto;">×</button>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // Auto remove after 5 seconds (except for loading messages)
    if (type !== 'info') {
        setTimeout(() => {
            if (notification.parentElement) {
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => notification.remove(), 300);
            }
        }, 5000);
    }
}



// Function to force create Market Share chart
function createMarketShareChart() {
    console.log('🧪 Creating Market Share test chart...');
    
    const canvas = document.getElementById('marketShareChart');
    if (!canvas) {
        alert('❌ Canvas element marketShareChart not found!');
        return;
    }
    
    if (typeof Chart === 'undefined') {
        alert('❌ Chart.js is not loaded!');
        return;
    }
    
    try {
        // Destroy existing chart if any
        const existingChart = Chart.getChart(canvas);
        if (existingChart) {
            existingChart.destroy();
        }
        
        // Test data for market share analysis
        const testData = {
            labels: ['Công ty A', 'Công ty B', 'Công ty C', 'Công ty D', 'Công ty E', 'Others (15 DN)'],
            datasets: [
                {
                    label: 'Market Share (%)',
                    data: [25.5, 18.3, 12.7, 9.8, 7.2, 26.5],
                    backgroundColor: ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFCE56', '#95A5A6'],
                    borderColor: ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFCE56', '#95A5A6'],
                    borderWidth: 2,
                    yAxisID: 'y'
                },
                {
                    label: 'Doanh thu (tỷ VND)',
                    data: [150, 108, 75, 58, 42, 157],
                    backgroundColor: ['#FF6B6B40', '#4ECDC440', '#45B7D140', '#96CEB440', '#FFCE5640', '#95A5A640'],
                    borderColor: ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFCE56', '#95A5A6'],
                    borderWidth: 2,
                    type: 'line',
                    yAxisID: 'y1'
                }
            ]
        };
        
        console.log('📊 Creating Market Share chart with test data:', testData);
        
                 // Convert test data to pie chart format
         const testPieData = {
             labels: testData.labels,
             datasets: [{
                 label: 'Market Share (%)',
                 data: testData.datasets[0].data, // Only use market share data
                 backgroundColor: testData.datasets[0].backgroundColor,
                 borderColor: testData.datasets[0].borderColor,
                 borderWidth: 3,
                 hoverBorderWidth: 4
             }]
         };

         const testChart = new Chart(canvas, {
             type: 'pie',
             data: testPieData,
             options: {
                 responsive: true,
                 maintainAspectRatio: true,
                 aspectRatio: 1.2,  // Slightly wider than square to accommodate labels
                 layout: {
                     padding: {
                         top: 30,
                         bottom: 60,  // Increased bottom padding for line labels
                         left: 100,   // More space for external labels
                         right: 100
                     }
                 },
                 plugins: {
                     title: {
                         display: true,
                         text: `Market Share Test Chart (${getCurrentYear()})`,
                         font: {
                             size: 18,
                             weight: 'bold'
                         },
                         color: '#333',
                         padding: {
                             bottom: 20
                         }
                     },
                     legend: {
                         display: false
                     },
                     tooltip: {
                         callbacks: {
                             label: function(context) {
                                 const value = context.raw;
                                 return `${context.label}: ${value}%`;
                             },
                             afterLabel: function(context) {
                                 return 'Test data - market share analysis';
                             }
                         }
                     },
                                              datalabels: {
                         display: false // Disable default datalabels, use custom plugin
                         }
                 },
                 animation: {
                     animateScale: true,
                     animateRotate: true,
                     duration: 1000
                 },
                 elements: {
                     arc: {
                         borderWidth: 2,
                         borderColor: '#ffffff'
                     }
                 }
             },
             plugins: [
                 ChartDataLabels,
                 // Angular connector lines with simple labels (Test)
                 {
                     afterDraw: function(chart) {
                         const ctx = chart.ctx;
                         const meta = chart.getDatasetMeta(0);
                         const centerX = chart.chartArea.left + (chart.chartArea.right - chart.chartArea.left) / 2;
                         const centerY = chart.chartArea.top + (chart.chartArea.bottom - chart.chartArea.top) / 2;
                         
                         // Reduce pie chart radius to create more space (same as main chart)
                         const maxRadius = Math.min(
                             (chart.chartArea.right - chart.chartArea.left) / 2 - 80,
                             (chart.chartArea.bottom - chart.chartArea.top) / 2 - 40
                         );
                         
                         // First pass: Calculate all positions and store them
                         const labelPositions = [];
                         chart.data.datasets[0].data.forEach((value, index) => {
                             const arc = meta.data[index];
                             const radius = Math.min(arc.outerRadius, maxRadius);
                             const startAngle = arc.startAngle;
                             const endAngle = arc.endAngle;
                             const midAngle = (startAngle + endAngle) / 2;
                             const percentage = value.toFixed(1);
                             const rank = index + 1;
                             
                             // Determine position in chart (right or left side)
                             const isRightSide = Math.cos(midAngle) > 0;
                             
                             // Points for angular connector line
                             const startX = centerX + Math.cos(midAngle) * radius;
                             const startY = centerY + Math.sin(midAngle) * radius;
                             
                             // Extended radial segment
                             const midX = centerX + Math.cos(midAngle) * (radius + 60);
                             const midY = centerY + Math.sin(midAngle) * (radius + 60);
                             
                             // Horizontal segment endpoint
                             const endX = isRightSide ? 
                                 (chart.chartArea.right - 10) : 
                                 (chart.chartArea.left + 10);
                             
                             labelPositions.push({
                                 index, value, percentage, rank, isRightSide, startX, startY, 
                                 midX, midY, endX, midY, color: chart.data.datasets[0].backgroundColor[index]
                             });
                         });
                         
                         // Sort positions by side and Y coordinate to detect overlaps
                         const leftSide = labelPositions.filter(p => !p.isRightSide).sort((a, b) => a.midY - b.midY);
                         const rightSide = labelPositions.filter(p => p.isRightSide).sort((a, b) => a.midY - b.midY);
                         
                         // Adjust Y positions to prevent overlap
                         function adjustOverlaps(positions, minSpacing = 25) {
                             for (let i = 1; i < positions.length; i++) {
                                 const current = positions[i];
                                 const previous = positions[i - 1];
                                 
                                 if (Math.abs(current.midY - previous.midY) < minSpacing) {
                                     current.midY = previous.midY + minSpacing;
                                 }
                             }
                         }
                         
                         adjustOverlaps(leftSide);
                         adjustOverlaps(rightSide);
                         
                         // Second pass: Draw with adjusted positions
                         [...leftSide, ...rightSide].forEach((pos) => {
                             const { startX, startY, midX, midY, endX, color, rank, percentage, isRightSide } = pos;
                             const endY = midY; // Use adjusted Y position
                             
                             // Draw angular connector line (2 segments)
                             ctx.strokeStyle = color;
                             ctx.lineWidth = 2;
                             ctx.setLineDash([]);
                             
                             // First segment (from pie to mid point)
                             ctx.beginPath();
                             ctx.moveTo(startX, startY);
                             ctx.lineTo(midX, midY);
                             ctx.stroke();
                             
                             // Second segment (horizontal to edge)
                             ctx.beginPath();
                             ctx.moveTo(midX, midY);
                             ctx.lineTo(endX, endY);
                             ctx.stroke();
                             
                             // Draw connection dot at pie edge
                             ctx.beginPath();
                             ctx.arc(startX, startY, 3, 0, 2 * Math.PI);
                             ctx.fillStyle = color;
                             ctx.fill();
                             ctx.strokeStyle = '#fff';
                             ctx.lineWidth = 1;
                             ctx.stroke();
                             
                             // Draw elbow dot at corner
                             ctx.beginPath();
                             ctx.arc(midX, midY, 2, 0, 2 * Math.PI);
                             ctx.fillStyle = color;
                             ctx.fill();
                             
                             // Draw simple label: #1 | 25%
                             const labelText = `#${rank} | ${percentage}%`;
                             
                             // Label background - INCREASED FONT SIZE for better visibility
                             ctx.font = 'bold 16px Arial';
                             const textWidth = ctx.measureText(labelText).width;
                             const labelX = isRightSide ? endX - textWidth - 10 : endX + 10;
                             const labelY = endY;
                             
                             // Background rectangle - INCREASED SIZE for larger font
                             ctx.fillStyle = color + 'E6'; // Semi-transparent background
                             ctx.fillRect(
                                 labelX - 6, 
                                 labelY - 10, 
                                 textWidth + 12, 
                                 20
                             );
                             
                             // Border
                             ctx.strokeStyle = color;
                             ctx.lineWidth = 1;
                             ctx.strokeRect(
                                 labelX - 6, 
                                 labelY - 10, 
                                 textWidth + 12, 
                                 20
                             );
                             
                             // Label text
                             ctx.fillStyle = '#333';
                             ctx.fillText(labelText, labelX, labelY + 5);
                         });
                     }
                 }
             ]
         });
        
        console.log('✅ Market Share Test chart with external labels and connector lines created successfully!');
        
        // Force resize to maintain aspect ratio and prevent distortion
        setTimeout(() => {
            testChart.resize();
            
            // Maintain aspect ratio to prevent oval shape
            const container = canvas.parentElement;
            const containerWidth = container.offsetWidth;
            const containerHeight = container.offsetHeight;
            
            console.log(`🔄 Test Container dimensions: ${containerWidth}x${containerHeight}`);
            
            // Calculate proper dimensions maintaining 1.2 aspect ratio
            const maxWidth = containerWidth - 40; // Account for padding
            const maxHeight = containerHeight - 80; // Account for padding
            const targetHeight = maxWidth / 1.2; // Maintain aspect ratio
            
            if (targetHeight <= maxHeight) {
                // Use width-based sizing
                canvas.style.width = `${maxWidth}px`;
                canvas.style.height = `${targetHeight}px`;
            } else {
                // Use height-based sizing
                const targetWidth = maxHeight * 1.2;
                canvas.style.width = `${targetWidth}px`;
                canvas.style.height = `${maxHeight}px`;
            }
            
            testChart.resize();
            testChart.update('active'); // Force update with labels
            console.log('🔄 Test Chart resized maintaining aspect ratio');
        }, 200);
        
        // Update legend with test info
        const legendContainer = document.getElementById('marketShareLegendDetails');
        if (legendContainer) {
            legendContainer.innerHTML = `
                <div class="text-center">
                    <div class="alert alert-info" style="margin: 0;">
                        <h6 class="text-info mb-2">📊 Test Chart</h6>
                        <p style="font-size: 0.8rem; margin: 0;">
                            Đây là biểu đồ test với dữ liệu mẫu.<br>
                            <strong>Market Share = Doanh thu / Tổng thị trường × 100%</strong>
                        </p>
                        <hr>
                        <button onclick="testMarketShareAPI()" class="btn btn-sm btn-primary">
                            <i class="fas fa-database me-1"></i>
                            Tải dữ liệu thực
                        </button>
                    </div>
                </div>
            `;
        }
        
        alert('✅ Market Share Test chart with external labels and connector lines created successfully!\nCheck the enhanced chart display above with professional connector lines.');
        
    } catch (error) {
        console.error('❌ Error creating Market Share test chart:', error);
        alert('❌ Error creating Market Share test chart: ' + error.message);
    }
}

// Function to update statistics cards automatically
function updateStatisticsCards() {
    console.log('🔄 Updating statistics cards...');
    
    // Show loading indicators
    showStatisticsLoading();
    
    // Get current filter values
    const filterValues = {
        Nam: getSelectedFilterValues('yearFilter'),
        MaTinh_Dieutra: getSelectedFilterValues('provinceFilter'),
        Loaihinhkte: getSelectedFilterValues('businessTypeFilter'),
        Vungkinhte: getSelectedFilterValues('economicZoneFilter'),
        QuyMo: getSelectedFilterValues('companySizeFilter')
    };
    
    console.log('📊 Current filter values:', filterValues);
    
    // Check if any filters are selected
    const hasFilters = Object.values(filterValues).some(arr => arr && arr.length > 0);
    if (!hasFilters) {
        console.log('⚠️ No filters selected, using default data');
        hideStatisticsLoading();
        return;
    }
    
    // Prepare form data
    const formData = new FormData();
    Object.keys(filterValues).forEach(key => {
        if (filterValues[key] && filterValues[key].length > 0) {
            filterValues[key].forEach(value => {
                formData.append(key, value);
            });
        }
    });
    
    // Call API to get filtered statistics
    fetch('/DN/GetFilteredStatistics', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        console.log('📊 Statistics API response:', data);
        
        if (data.success) {
            updateStatisticsCardsContent(data.statistics);
            showStatisticsUpdateNotification('✅ Cập nhật thành công các thống kê!');
        } else {
            console.error('❌ Statistics API failed:', data.message);
            showStatisticsUpdateNotification('❌ Lỗi cập nhật thống kê: ' + data.message, 'error');
        }
        
        hideStatisticsLoading();
    })
    .catch(error => {
        console.error('❌ Statistics API error:', error);
        showStatisticsUpdateNotification('❌ Lỗi kết nối API: ' + error.message, 'error');
        hideStatisticsLoading();
    });
}

// Function to update the content of statistics cards
function updateStatisticsCardsContent(statistics) {
    console.log('🔄 Updating card contents with:', statistics);
    
    // Get the statistics row - find by looking for auto-update-indicator
    let statsRow = null;
    
    // Find the row containing cards with auto-update-indicator
    const allRows = document.querySelectorAll('.row');
    for (let row of allRows) {
        if (row.querySelector('.auto-update-indicator')) {
            statsRow = row;
            break;
        }
    }
    
    if (!statsRow) {
        console.error('❌ Could not find statistics row with auto-update-indicator');
        return;
    }
    
    const statCards = statsRow.querySelectorAll('.col-xl-3');
    console.log(`📊 Found ${statCards.length} statistic cards`);
    
    // Card 1: Tổng doanh nghiệp (first card - blue background)
    if (statCards[0]) {
        const card1 = statCards[0];
        const titleElement = card1.querySelector('.m-0');
        const valueElement = card1.querySelector('.h3');
        
        console.log('📊 Updating Card 1 - Tổng doanh nghiệp');
        
        if (titleElement) {
            titleElement.textContent = `Tổng doanh nghiệp (${statistics.currentAnalysisYear})`;
            console.log('   ✅ Updated title');
        }
        
        if (valueElement) {
            valueElement.innerHTML = `<span style="font-size: 0.55em;">Số DN</span> ${statistics.totalCompanies.toLocaleString()}`;
            console.log('   ✅ Updated value to:', statistics.totalCompanies);
            
            // Add animation effect
            valueElement.style.transform = 'scale(1.1)';
            setTimeout(() => {
                valueElement.style.transform = 'scale(1)';
            }, 300);
        }
    }
    
    // Card 2: Tổng lao động (second card - cyan background)
    if (statCards[1]) {
        const card2 = statCards[1];
        const titleElement = card2.querySelector('.m-0');
        const valueElement = card2.querySelector('.h3');
        
        console.log('📊 Updating Card 2 - Tổng lao động');
        
        if (titleElement) {
            titleElement.textContent = `Tổng lao động (${statistics.currentAnalysisYear})`;
            console.log('   ✅ Updated title');
        }
        
        if (valueElement) {
            valueElement.innerHTML = `<span style="font-size: 0.55em;">Người</span> ${statistics.totalLabor.toLocaleString()}`;
            console.log('   ✅ Updated value to:', statistics.totalLabor);
            
            // Add animation effect
            valueElement.style.transform = 'scale(1.1)';
            setTimeout(() => {
                valueElement.style.transform = 'scale(1)';
            }, 300);
        }
    }
    
    // Card 3: DN theo miền (third card - pink background)
    if (statCards[2]) {
        const card3 = statCards[2];
        const titleElement = card3.querySelector('.m-0');
        const valueElements = card3.querySelectorAll('.h3');
        
        console.log('📊 Updating Card 3 - DN theo miền');
        
        if (titleElement) {
            titleElement.textContent = `DN theo miền (${statistics.currentAnalysisYear})`;
            console.log('   ✅ Updated title');
        }
        
        if (valueElements.length >= 3) {
            // Miền Bắc
            valueElements[0].innerHTML = `<span style="font-size: 0.55em;">Miền Bắc</span> ${statistics.regionalDistribution.mienBacCount}`;
            // Miền Trung
            valueElements[1].innerHTML = `<span style="font-size: 0.55em;">Miền Trung</span> ${statistics.regionalDistribution.mienTrungCount}`;
            // Miền Nam
            valueElements[2].innerHTML = `<span style="font-size: 0.55em;">Miền Nam</span> ${statistics.regionalDistribution.mienNamCount}`;
            
            console.log('   ✅ Updated regional distribution');
        }
        
        // Add animation effect to entire card
        card3.style.transform = 'scale(1.02)';
        setTimeout(() => {
            card3.style.transform = 'scale(1)';
        }, 300);
    }
    
    // Card 4: Phân loại DN (fourth card - green background)
    if (statCards[3]) {
        const card4 = statCards[3];
        const titleElement = card4.querySelector('.m-0');
        const valueElements = card4.querySelectorAll('.h3');
        
        console.log('📊 Updating Card 4 - Phân loại DN');
        
        if (titleElement) {
            titleElement.textContent = `Phân loại DN (top 3) - ${statistics.currentAnalysisYear}`;
            console.log('   ✅ Updated title');
        }
        
        if (valueElements.length >= 3 && statistics.businessTypeDistribution) {
            // Top 1
            if (statistics.businessTypeDistribution.top1) {
                valueElements[0].innerHTML = `<span style="font-size: 0.45em;">${statistics.businessTypeDistribution.top1.name}</span> ${statistics.businessTypeDistribution.top1.count.toLocaleString()}`;
            }
            
            // Top 2
            if (statistics.businessTypeDistribution.top2) {
                valueElements[1].innerHTML = `<span style="font-size: 0.45em;">${statistics.businessTypeDistribution.top2.name}</span> ${statistics.businessTypeDistribution.top2.count.toLocaleString()}`;
            }
            
            // Top 3
            if (statistics.businessTypeDistribution.top3) {
                valueElements[2].innerHTML = `<span style="font-size: 0.45em;">${statistics.businessTypeDistribution.top3.name}</span> ${statistics.businessTypeDistribution.top3.count.toLocaleString()}`;
            }
            
            console.log('   ✅ Updated business type distribution');
        }
        
        // Add animation effect
        card4.style.transform = 'scale(1.02)';
        setTimeout(() => {
            card4.style.transform = 'scale(1)';
        }, 300);
    }
    
    console.log('✅ All statistics cards updated successfully');
}

// Function to show loading indicators on statistics cards
function showStatisticsLoading() {
    const cards = document.querySelectorAll('.col-xl-3');
    cards.forEach((card, index) => {
        if (index < 4) { // Only first 4 cards
            card.style.opacity = '0.6';
            card.style.pointerEvents = 'none';
            
            // Add loading spinner
            const loadingSpinner = document.createElement('div');
            loadingSpinner.className = 'statistics-loading-spinner';
            loadingSpinner.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            loadingSpinner.style.cssText = `
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 1000;
                color: #666;
                font-size: 1.5rem;
            `;
            
            const cardBody = card.querySelector('.card-body');
            if (cardBody) {
                cardBody.style.position = 'relative';
                cardBody.appendChild(loadingSpinner);
            }
        }
    });
    
    console.log('⏳ Statistics loading indicators shown');
}

// Function to hide loading indicators
function hideStatisticsLoading() {
    const cards = document.querySelectorAll('.col-xl-3');
    cards.forEach((card, index) => {
        if (index < 4) { // Only first 4 cards
            card.style.opacity = '1';
            card.style.pointerEvents = 'auto';
            
            // Remove loading spinner
            const spinner = card.querySelector('.statistics-loading-spinner');
            if (spinner) {
                spinner.remove();
            }
        }
    });
    
    console.log('✅ Statistics loading indicators hidden');
}

// Function to show update notifications
function showStatisticsUpdateNotification(message, type = 'success') {
    // Remove existing notification
    const existingNotification = document.querySelector('.statistics-update-notification');
    if (existingNotification) {
        existingNotification.remove();
    }
    
    const notification = document.createElement('div');
    notification.className = 'statistics-update-notification';
    
    const bgColor = type === 'success' ? '#28a745' : '#dc3545';
    notification.style.cssText = `
        position: fixed;
        top: 100px;
        right: 20px;
        background: ${bgColor};
        color: white;
        padding: 12px 20px;
        border-radius: 6px;
        z-index: 9999;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        font-weight: 500;
        font-size: 0.9rem;
        max-width: 350px;
        transition: all 0.3s ease;
    `;
    
    notification.innerHTML = `
        <div style="display: flex; align-items: center; gap: 8px;">
            <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
            <span>${message}</span>
            <button onclick="this.parentElement.parentElement.remove()" style="background: none; border: none; color: white; font-size: 16px; cursor: pointer; margin-left: auto;">×</button>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // Auto remove after 4 seconds
    setTimeout(() => {
        if (notification.parentElement) {
            notification.style.opacity = '0';
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => notification.remove(), 300);
        }
    }, 4000);
}

// Navigation Filter Toggle Function
function toggleNavigationFilter() {
    const filterSection = document.getElementById('navigationFilterSection');
    const filterChevron = document.getElementById('filterChevron');
    const toggleText = document.getElementById('filterToggleText');
    const toggleIcon = document.getElementById('filterToggleIcon');
    
    if (filterSection.style.display === 'none' || !filterSection.style.display) {
        // Show filter
        filterSection.style.display = 'block';
        filterChevron.classList.add('rotated');
        toggleText.textContent = 'Thu gọn';
        toggleIcon.className = 'fas fa-chevron-up me-1';
        
        // Save state to localStorage
        localStorage.setItem('navigationFilterExpanded', 'true');
        
        console.log('📖 Navigation filter expanded');
    } else {
        // Hide filter
        filterSection.style.display = 'none';
        filterChevron.classList.remove('rotated');
        toggleText.textContent = 'Bộ lọc';
        toggleIcon.className = 'fas fa-filter me-1';
        
        // Save state to localStorage
        localStorage.setItem('navigationFilterExpanded', 'false');
        
        // Close any open dropdowns when hiding
        document.querySelectorAll('.dropdown-options').forEach(dropdown => {
            dropdown.style.display = 'none';
        });
        
        console.log('📝 Navigation filter collapsed');
    }
}

// Initialize navigation filter state on page load
document.addEventListener('DOMContentLoaded', function() {
    // Check saved state
    const isExpanded = localStorage.getItem('navigationFilterExpanded') === 'true';
    
    if (isExpanded) {
        // Expand filter if it was previously expanded
        setTimeout(() => {
            toggleNavigationFilter();
        }, 100);
    }
    
    console.log('🔧 Navigation filter initialized, expanded:', isExpanded);
});

// Function to show filter guide
function showFilterGuide() {
    const guide = `🎯 HƯỚNG DẪN SỬ DỤNG BỘ LỌC NAVIGATION

📋 BỘ LỌC TRONG NAVIGATION:
   • Click nút "Bộ lọc" để mở/đóng
   • Bộ lọc được tích hợp ngay trên navigation bar
   • Tự động lưu trạng thái mở/đóng

📊 2 CÁCH ÁP DỤNG BỘ LỌC:

1️⃣ "Áp dụng bộ lọc": 
   • Reload toàn bộ trang với bộ lọc mới
   • Cập nhật tất cả data và statistics
   • Thời gian: ~2-5 giây

2️⃣ "Cập nhật Charts": 
   • Chỉ cập nhật charts, không reload page
   • Giữ nguyên statistics và data tables  
   • Thời gian: ~1-2 giây
   • Có loading animation và notifications

🔄 TÍNH NĂNG MỚI:
   • Bộ lọc luôn có sẵn trên navigation
   • Thu gọn để tiết kiệm không gian
   • Responsive design cho mobile
   • Tự động lưu trạng thái

✅ CÁC CHART ĐƯỢC HỖ TRỢ:
   • Market Share Chart (✅ Hoàn chỉnh)
   • Vùng Kinh Tế Chart (⚠️ Đang phát triển)
   • Industry Chart (⚠️ Đang phát triển)  
   • Company Size Chart (⚠️ Đang phát triển)
   • Revenue/Profit Charts (⚠️ Đang phát triển)

💡 GỢI Ý:
   • Click nút "Bộ lọc" để mở nhanh
   • Dùng "Cập nhật Charts" cho trải nghiệm nhanh
   • Bộ lọc sẽ nhớ trạng thái của bạn`;
    
    alert(guide);
}

// TEST AUTO-UPDATE FUNCTION
function testAutoUpdate() {
    console.log('🧪 TESTING AUTO-UPDATE FEATURE...');
    
    // Show notification
    showStatisticsUpdateNotification('🧪 Testing Auto-Update...', 'info');
    
    // Debug current card elements first
    console.log('🔍 DEBUGGING CARD SELECTORS...');
    
    // Debug all col-xl-3 elements
    const allCards = document.querySelectorAll('.col-xl-3');
    console.log('📊 Found', allCards.length, 'cards with col-xl-3 class');
    allCards.forEach((card, index) => {
        const title = card.querySelector('.m-0')?.textContent || 'No title';
        const value = card.querySelector('.h3')?.textContent || 'No value';
        console.log(`   Card ${index + 1}: "${title}" = "${value}"`);
    });
    
    // Simulate filter change and auto-update
    console.log('1. Simulating filter change...');
    
    setTimeout(() => {
        console.log('2. Calling updateStatisticsCards...');
        updateStatisticsCards();
    }, 1000);
    
    // Show success message
    setTimeout(() => {
        console.log('3. Test completed!');
        showStatisticsUpdateNotification('✅ Auto-Update test hoàn thành! Kiểm tra Console để xem logs.', 'success');
    }, 3000);
}

// DEBUG COMPANY COUNT DISCREPANCY FUNCTION
function debugCompanyCountDiscrepancy() {
    console.log('🔍 DEBUGGING COMPANY COUNT DISCREPANCY...');
    
    // Show loading notification
    showStatisticsUpdateNotification('🔍 Analyzing company count discrepancy...', 'info');
    
    // Get current year filter to debug specific year
    const yearFilterInputs = document.querySelectorAll('input[name="Nam"]:checked');
    let year = null;
    
    if (yearFilterInputs.length > 0) {
        year = parseInt(yearFilterInputs[0].value);
    }
    
    // Call debug API
    const debugUrl = year ? `/DN/DebugCompanyCountDiscrepancy?year=${year}` : '/DN/DebugCompanyCountDiscrepancy';
    
    fetch(debugUrl)
        .then(response => response.json())
        .then(data => {
            console.log('📊 DEBUG DISCREPANCY RESULTS:', data);
            
            if (data.success) {
                const summary = data.summary;
                const breakdown = data.breakdown;
                
                // Create detailed report
                const report = `
🔍 PHÂN TÍCH SỰ KHÁC BIỆT GIỮA CARDS VÀ MARKET SHARE

📅 Năm phân tích: ${data.analysisYear}

📊 TỔNG KẾT:
• Tổng DN trong Cards: ${summary.totalCompaniesInCards.toLocaleString()} DN
• DN trong Market Share: ${summary.companiesInMarketShare.toLocaleString()} DN
• DN không có doanh thu: ${summary.companiesWithoutRevenue.toLocaleString()} DN
• Chênh lệch: ${summary.discrepancy.toLocaleString()} DN

💡 GIẢI THÍCH:
${summary.explanation}

🔍 CHI TIẾT:
• DN có doanh thu > 0: ${breakdown.companiesWithRevenue.count.toLocaleString()}
  - Điều kiện: ${breakdown.companiesWithRevenue.criteria}
  
• DN không có doanh thu: ${breakdown.companiesWithoutRevenue.count.toLocaleString()}
  - Điều kiện: ${breakdown.companiesWithoutRevenue.criteria}

📋 GỢI Ý:
• ${data.recommendations.forMarketShare}
• ${data.recommendations.forStatisticsCards}
• ${data.recommendations.clarification}
                `;
                
                alert(report);
                
                // Log sample data for debugging
                console.log('🔍 SAMPLE COMPANIES WITH REVENUE:', breakdown.companiesWithRevenue.sample);
                console.log('🔍 SAMPLE COMPANIES WITHOUT REVENUE:', breakdown.companiesWithoutRevenue.sample);
                
                showStatisticsUpdateNotification('✅ Debug completed! Check Console for detailed logs.', 'success');
    } else {
                alert('❌ Error debugging discrepancy: ' + data.error);
                showStatisticsUpdateNotification('❌ Debug failed: ' + data.error, 'error');
            }
        })
        .catch(error => {
            console.error('❌ Error calling debug API:', error);
            alert('❌ Error calling debug API: ' + error.message);
            showStatisticsUpdateNotification('❌ Debug API error: ' + error.message, 'error');
        });
}

// DEBUG REVENUE DATA IN DATABASE FUNCTION
function debugRevenueDataInDatabase() {
    console.log('🔍 DEBUGGING REVENUE DATA IN DATABASE...');
    
    // Show loading notification
    showStatisticsUpdateNotification('🔍 Checking revenue data in database...', 'info');
    
    // Get current year filter to debug specific year
    const yearFilterInputs = document.querySelectorAll('input[name="Nam"]:checked');
    let year = null;
    
    if (yearFilterInputs.length > 0) {
        year = parseInt(yearFilterInputs[0].value);
    }
    
    // Call debug API
    const debugUrl = year ? `/DN/DebugRevenueDataInDatabase?year=${year}` : '/DN/DebugRevenueDataInDatabase';
    
    fetch(debugUrl)
        .then(response => response.json())
        .then(data => {
            console.log('📊 DATABASE REVENUE DEBUG RESULTS:', data);
            
            if (data.success) {
                const summary = data.summary;
                
                // Create detailed report
                const report = `
🔍 PHÂN TÍCH DỮ LIỆU DOANH THU TRONG DATABASE

📅 Năm phân tích: ${data.targetYear}

📊 TỔNG KẾT:
• Tổng DN: ${summary.totalCompanies.toLocaleString()} DN
• DN có doanh thu NULL: ${summary.nullRevenue.toLocaleString()} DN
• DN có doanh thu = 0: ${summary.zeroRevenue.toLocaleString()} DN  
• DN có doanh thu > 0: ${summary.positiveRevenue.toLocaleString()} DN
• DN có doanh thu < 0: ${summary.negativeRevenue.toLocaleString()} DN

${data.explanation}

📋 SQL QUERY ĐÃ DÙNG:
${data.databaseQuery}

🚨 CHECK CONSOLE CHO DANH SÁCH DN NULL REVENUE
                `;
                
                alert(report);
                
                // Log null companies for debugging
                if (data.nullCompanies && data.nullCompanies.length > 0) {
                    console.log('🚨 COMPANIES WITH NULL REVENUE IN DATABASE:');
                    data.nullCompanies.forEach((company, index) => {
                        console.log(`${index + 1}. STT: ${company.STT}, TenDN: '${company.TenDN}', Masothue: '${company.Masothue}', Revenue: ${company.Revenue}`);
                    });
                } else {
                    console.log('✅ NO NULL REVENUE COMPANIES FOUND IN DATABASE');
                }
                
                showStatisticsUpdateNotification('✅ Database debug completed! Check Console for details.', 'success');
    } else {
                alert('❌ Error debugging database revenue: ' + data.error);
                showStatisticsUpdateNotification('❌ Database debug failed: ' + data.error, 'error');
            }
        })
        .catch(error => {
            console.error('❌ Error calling database debug API:', error);
            alert('❌ Error calling database debug API: ' + error.message);
            showStatisticsUpdateNotification('❌ Database debug API error: ' + error.message, 'error');
        });
}

// COMPARE CODE VS DATABASE FUNCTION
function compareCodeVsDatabase() {
    console.log('🔍 COMPARING CODE CALCULATION VS DATABASE...');
    
    // Show loading notification
    showStatisticsUpdateNotification('🔍 Comparing code vs database...', 'info');
    
    // Get current year filter to debug specific year
    const yearFilterInputs = document.querySelectorAll('input[name="Nam"]:checked');
    let year = null;
    
    if (yearFilterInputs.length > 0) {
        year = parseInt(yearFilterInputs[0].value);
    }
    
    // Call compare API
    const compareUrl = year ? `/DN/CompareCodeVsDatabase?year=${year}` : '/DN/CompareCodeVsDatabase';
    
    fetch(compareUrl)
        .then(response => response.json())
        .then(data => {
            console.log('📊 COMPARISON RESULTS:', data);
            
            if (data.success) {
                const match = data.match ? '✅' : '❌';
                const discrepancy = data.discrepancy || 0;
                
                let alertMessage = `${match} COMPARISON RESULTS for ${data.year}:\n\n`;
                alertMessage += `📊 CODE CALCULATION:\n`;
                alertMessage += `   - Total companies: ${data.code.totalCompanies}\n`;
                alertMessage += `   - NULL revenue count: ${data.code.nullRevenueCount}\n\n`;
                alertMessage += `💾 DATABASE ACTUAL:\n`;
                alertMessage += `   - Total companies: ${data.database.totalCompanies}\n`;
                alertMessage += `   - NULL revenue count: ${data.database.nullRevenueCount}\n\n`;
                alertMessage += `🔍 MATCH: ${data.match}\n`;
                if (!data.match) {
                    alertMessage += `📊 DISCREPANCY: ${discrepancy} companies\n\n`;
                    alertMessage += `🚨 CHECK CONSOLE for detailed NULL company lists!`;
                }
                
                alert(alertMessage);
                
                // Show detailed data in console
                if (data.code.nullCompanies && data.code.nullCompanies.length > 0) {
                    console.log('🚨 COMPANIES CODE THINKS ARE NULL:');
                    data.code.nullCompanies.forEach((company, index) => {
                        console.log(`${index + 1}. ${company.masothue} - ${company.tendn} (HasValue: ${company.hasValue}, Value: ${company.value})`);
                    });
                }
                
                if (data.database.nullCompanies && data.database.nullCompanies.length > 0) {
                    console.log('🚨 COMPANIES DATABASE SHOWS AS NULL:');
                    data.database.nullCompanies.forEach((company, index) => {
                        console.log(`${index + 1}. ${company}`);
                    });
                }
                
                if (data.match) {
                    showStatisticsUpdateNotification('✅ Code and Database match perfectly!', 'success');
                } else {
                    showStatisticsUpdateNotification(`❌ Found ${discrepancy} company discrepancy between code and database`, 'error');
                }
            } else {
                console.error('❌ COMPARISON ERROR:', data.error);
                alert('❌ Error comparing code vs database: ' + data.error);
                showStatisticsUpdateNotification('❌ Error in comparison: ' + data.error, 'error');
            }
        })
        .catch(error => {
            console.error('❌ COMPARISON ERROR:', error);
            alert('❌ Error comparing code vs database: ' + error.message);
            showStatisticsUpdateNotification('❌ Error comparing: ' + error.message, 'error');
        });
}

// ENHANCE MARKET SHARE CHART TO SHOW DISCREPANCY INFO
function enhanceMarketShareChartWithInfo() {
    console.log('📊 Enhancing Market Share chart with company count info...');
    
    // Add info tooltip to Market Share chart title
    const marketShareChartTitle = document.querySelector('#marketShareChart')?.closest('.card')?.querySelector('.card-header h6');
    
    if (marketShareChartTitle) {
        // Add info icon with explanation
        const infoIcon = document.createElement('span');
        infoIcon.innerHTML = `
            <i class="fas fa-info-circle ms-2" 
               title="Market Share chỉ hiển thị các DN có dữ liệu doanh thu > 0. 
                      Số DN trong Market Share có thể khác với tổng DN trong Cards vì không phải tất cả DN đều có dữ liệu doanh thu."
               style="cursor: help; color: rgba(255,255,255,0.8);">
            </i>
        `;
        marketShareChartTitle.appendChild(infoIcon);
    }
}

// Call enhancement on page load
document.addEventListener('DOMContentLoaded', function() {
    // Enhance Market Share chart with info
    setTimeout(() => {
        enhanceMarketShareChartWithInfo();
    }, 1000);
});
</script>

<!-- NEW QUY MO CHART - CLEAN VERSION -->
<script>
// Function to create new Quy mô chart using backend JSON data
function createNewQuyMoChart() {
    console.log('🚨 Creating NEW QUY_MO Chart from backend data...');
    
    // Get canvas context
    const ctx = document.getElementById('newQuyMoChart');
    if (!ctx) {
        console.error('❌ Canvas element newQuyMoChart not found!');
        return false;
    }
    
    // Check if Chart.js is available
    if (typeof Chart === 'undefined') {
        console.error('❌ Chart.js is not loaded!');
        return false;
    }
    
    // Get data from ViewBag (passed from controller)
    const quyMoData = @Html.Raw(Json.Serialize(ViewBag.QuyMoData ?? new List<object>()));
    
    console.log('📊 Using backend data from ViewBag:', quyMoData);
    
    // Validate data from backend
    if (!quyMoData || quyMoData.length === 0) {
        console.error('❌ No Quy mô data received from controller');
        return false;
    }
    
    // Extract chart data
    const labels = quyMoData.map(item => item.quyMo || item.QuyMo);
    const data = quyMoData.map(item => item.soLuong || item.SoLuong);
    const descriptions = quyMoData.map(item => item.moTa || item.MoTa);
    const total = data.reduce((sum, value) => sum + value, 0);
    
    console.log('📊 Chart data:', { labels, data, descriptions, total });
    
    // Chart colors - 4 màu cho 4 quy mô
    const colors = [
        '#FF6B6B', // Siêu nhỏ - Đỏ nhạt
        '#4ECDC4', // Nhỏ - Xanh lục  
        '#45B7D1', // Vừa - Xanh dương
        '#96CEB4'  // Lớn - Xanh lá nhạt
    ];
    
    try {
        // Destroy existing chart if any
        Chart.getChart(ctx)?.destroy();
        
        const quyMoChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Số lượng DN',
                    data: data,
                    backgroundColor: colors,
                    borderColor: colors.map(color => color + 'CC'),
                    borderWidth: 2,
                    borderRadius: 8,
                    borderSkipped: false,
                    barThickness: 60,
                    maxBarThickness: 80
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: false,
                        
                    },
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const percentage = ((context.raw / total) * 100).toFixed(1);
                                const desc = descriptions[context.dataIndex] || '';
                                return [
                                    context.label + ': ' + context.raw.toLocaleString() + ' DN (' + percentage + '%)',
                                    desc
                                ];
                            }
                        },
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: 'white',
                        bodyColor: 'white',
                        borderColor: 'rgba(255, 255, 255, 0.2)',
                        borderWidth: 1
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            precision: 0,
                            font: {
                                size: 12
                            }
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.1)'
                        },
                        title: {
                            display: true,
                            text: 'Số lượng doanh nghiệp',
                            font: {
                                size: 13,
                                weight: 'bold'
                            }
                        }
                    },
                    x: {
                        ticks: {
                            maxRotation: 45,
                            font: {
                                size: 11
                            }
                        },
                        grid: {
                            display: false
                        },
                        title: {
                            display: true,
                            text: 'Quy mô doanh nghiệp',
                            font: {
                                size: 13,
                                weight: 'bold'
                            }
                        }
                    }
                },
                animation: {
                    duration: 1200,
                    easing: 'easeOutQuart'
                }
            }
        });
        
        console.log('✅ NEW Quy mô Chart created successfully!');
        
        // Create custom legend
        createNewQuyMoLegend(labels, data, descriptions, colors, total);
        
        return true;
    } catch (error) {
        console.error('❌ Error creating NEW Quy mô chart:', error);
        return false;
    }
}

// Function to create custom legend for new Quy mô chart
function createNewQuyMoLegend(labels, data, descriptions, colors, total) {
    const legendContainer = document.getElementById('newQuyMoLegendDetails');
    if (!legendContainer) return;
    
    let legendHTML = '';
    
    labels.forEach((label, index) => {
        const value = data[index];
        const percentage = ((value / total) * 100).toFixed(1);
        const description = descriptions[index] || '';
        
        legendHTML += `
            <div class="legend-item d-flex align-items-center mb-3" style="padding: 8px; border-radius: 6px; background: rgba(${hexToRgb(colors[index])}, 0.1);">
                <div class="legend-color me-2" style="background-color: ${colors[index]}; width: 20px; height: 20px; border-radius: 4px; border: 2px solid #fff; box-shadow: 0 2px 4px rgba(0,0,0,0.1);"></div>
                <div class="legend-content flex-grow-1">
                    <div class="legend-text" style="font-size: 0.9rem; font-weight: 600; color: #333;">
                        ${label}
                    </div>
                    <div class="legend-description" style="font-size: 0.75rem; color: #6c757d; margin-top: 2px;">
                        ${description}
                    </div>
                </div>
                <div class="legend-stats text-end">
                    <div class="legend-value" style="font-size: 0.9rem; font-weight: 700; color: ${colors[index]};">
                        ${value.toLocaleString()}
                    </div>
                    <div class="legend-percentage" style="font-size: 0.75rem; color: #6c757d;">
                        ${percentage}%
                    </div>
                </div>
            </div>
        `;
    });
    
    // Add summary section
    legendHTML += `
        <div class="mt-3 pt-3" style="border-top: 1px solid #dee2e6;">
            <div class="text-center">
                <div style="font-size: 0.8rem; color: #6c757d; margin-bottom: 4px;">
                    <i class="fas fa-building me-1"></i>
                    Tổng số doanh nghiệp
                </div>
                <div style="font-size: 1.2rem; font-weight: 700; color: #28a745;">
                    ${total.toLocaleString()} DN
                </div>
            </div>
        </div>
    `;
    
    legendContainer.innerHTML = legendHTML;
}

// Helper function to convert hex to RGB
function hexToRgb(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? 
        parseInt(result[1], 16) + ',' + parseInt(result[2], 16) + ',' + parseInt(result[3], 16) :
        '0,0,0';
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    console.log('🔄 DOM ready, creating NEW Quy mô chart...');
    createNewQuyMoChart();
});

// Also try when window is fully loaded
window.addEventListener('load', function() {
    const canvas = document.getElementById('newQuyMoChart');
    if (canvas && !Chart.getChart(canvas)) {
        console.log('🔄 Window loaded, creating NEW Quy mô chart...');
        createNewQuyMoChart();
    }
});
</script>
</body>
</html>
