@using CIResearch.Models;
@using System.Text.Json;

@{
    ViewData["Title"] = "Dashboard Doanh Nghiệp - CI Research";
    Layout = null;
    var loaihinhData = ViewBag.loaihinhData != null ? ViewBag.loaihinhData : "[]";
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <style>
        /* Reset và Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background-image: url('/IMG(4UU)/STOREAUDIT.jpg');
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center center;
            background-attachment: fixed;
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
        }

        /* Header Navigation */
        .top-nav {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 1rem 0;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .nav-brand {
            color: white;
            font-size: 1.5rem;
            font-weight: 700;
            text-decoration: none;
            display: flex;
            align-items: center;
        }

        .nav-brand:hover {
            color: #f8f9fa;
            text-decoration: none;
        }

        .nav-brand i {
            margin-right: 0.5rem;
        }

        .user-info {
            color: white;
            font-weight: 500;
        }

        /* Container chính */
        .main-container {
            width: 100%;
            min-height: calc(100vh - 80px);
            padding: 0;
            margin: 0;
        }

        /* Content wrapper */
        .content-wrapper {
            width: 100%;
            padding: 2rem;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            min-height: calc(100vh - 80px);
        }

    /* Table styles */
    .table-container {
        background: white;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    /* Filter styles */
    .custom-multi-select {
        position: relative;
        width: 215px;
        margin: 0 auto;
    }

    .select-box {
        padding: 10px;
        border: 1px solid #ccc;
        cursor: pointer;
        background-color: #fff;
        position: relative;
        border-radius: 8px;
    }

    .selected-options {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        width: 100%;
    }

    .arrow {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%) rotate(45deg);
        border: solid #666;
        border-width: 0 2px 2px 0;
        padding: 3px;
    }

    .dropdown-options {
        display: none;
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background-color: #fff;
        border: 1px solid #ccc;
        max-height: 150px;
        overflow-y: auto;
        z-index: 1000;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .dropdown-options label {
        display: block;
        padding: 8px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .dropdown-options label:hover {
        background-color: #f0f0f0;
    }

    .search-box {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-bottom: 2px solid #007bff;
        font-size: 14px;
        outline: none;
        border-radius: 8px 8px 0 0;
    }

    .search-box:focus {
        border-color: #007bff;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
    }

    /* Card styles */
    .metric-card {
        background: white;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        border: 1px solid #e5e7eb;
        height: 100%;
    }

    .metric-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
    }

    .metric-value {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 10px;
        line-height: 1;
    }

    .metric-label {
        font-size: 1rem;
        font-weight: 500;
        color: #6b7280;
        margin-bottom: 15px;
    }

    /* Chart styles */
    .chart-container {
        background: white;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .chart-title {
        color: #374151;
        font-weight: 600;
        margin-bottom: 15px;
        font-size: 1.1rem;
        text-align: center;
    }

    .chart-container canvas {
        max-height: 300px !important;
        width: 100% !important;
    }

    /* Progress bar styles */
    .progress {
        height: 12px !important;
        background-color: #e5e7eb !important;
        border-radius: 10px !important;
        overflow: hidden !important;
        box-shadow: none !important;
    }

    .progress-bar {
        height: 100% !important;
        border-radius: 10px !important;
        transition: width 1.2s ease !important;
        font-weight: normal !important;
        text-align: left !important;
    }

    /* Additional filter CSS for search box */
    .search-box {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-bottom: 2px solid #007bff;
        font-size: 14px;
        outline: none;
    }

    .search-box:focus {
        border-color: #007bff;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
    }

    /* Enhanced Metric Cards */
    .metric-card {
        background: white;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        border: 1px solid #e5e7eb;
        height: 100%;
    }

    .metric-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
    }

    .metric-value {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 10px;
        line-height: 1;
    }

    .metric-label {
        font-size: 1rem;
        font-weight: 500;
        color: #6b7280;
        margin-bottom: 15px;
    }

    .progress-modern {
        height: 12px;
        background: #e5e7eb;
        border-radius: 10px;
        overflow: hidden;
        margin-bottom: 8px;
        position: relative;
        width: 100%;
    }

    .progress-bar-modern {
        height: 100%;
        border-radius: 10px;
        transition: width 1.2s ease;
        background-color: currentColor;
        position: relative;
    }

    .metric-percentage {
        font-size: 0.9rem;
        font-weight: 600;
        color: #6b7280;
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 5px;
    }

    .metric-ratio {
        font-size: 0.8rem;
        color: #9ca3af;
    }

    /* Custom Progress Bar Styling for Technology Cards */
    .metric-card .progress {
        height: 12px !important;
        background-color: #e5e7eb !important;
        border-radius: 10px !important;
        overflow: hidden !important;
        box-shadow: none !important;
    }

    .metric-card .progress-bar {
        height: 100% !important;
        border-radius: 10px !important;
        transition: width 1.2s ease !important;
        font-weight: normal !important;
        text-align: left !important;
        /* Colors will be set inline via style attribute */
    }

    .tooltip-container {
        position: relative;
        display: inline-block;
    }

    .tooltip-container .custom-tooltip {
        display: none;
        /* ?n m?c d?nh */
        position: absolute;
        top: -200px;
        /*i?u ch?nh v? tr tooltip */
        right: 90%;
        transform: translateX(90%);
        background-color: #e3f2fd;
        /* Xanh duong nh?t, t?o c?m gic y t? */
        color: #0d47a1;
        /* Xanh duong d?m cho ch? */
        padding: 15px 20px;
        border-radius: 8px;
        /* Vi?n bo trn */
        font-size: 0.9em;
        line-height: 1.6;
        white-space: nowrap;
        z-index: 1000;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        /* Hi?u ?ng d? bng nh? */
        border: 1px solid #90caf9;
        /*u?ng vi?n xanh nh?t */
        font-family: "Arial", sans-serif;
        /* Font ch? don gi?n, d? d?c */
        transform-origin: top center;
        text-align: left;
        /* Can tri n?i dung */
    }

    .tooltip-container:hover .custom-tooltip {
        display: block;
        /* Hi?n th? tooltip khi hover */
    }

    /* Specific chart heights */
    #businessTypeChartContainer .chart-container {
        max-height: 350px;
    }

    #revenueChartContainer .chart-container {
        max-height: 300px;
    }

    .tooltip-container .custom-tooltip strong {
        color: #1565c0;
        /* Xanh d?m d? nh?n m?nh */
    }

    /* Ho?t ?nh t?i trang */
    /* Ho?t ?nh t?i trang */
    .loader {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        /* L?p m? mu xm */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        /*?m b?o loader lun n?m trn cng */
    }

    .loader img {
        width: 800px;
        /* Kch thu?c hnh GIF, c th? di?u ch?nh */
        height: auto;
        /* Kch thu?c hnh GIF, c th? di?u ch?nh */
    }

    /* Ki?u dng thanh ti?n d? */
    .progress {
        height: 30px;
        /*? cao c?a thanh ti?n d? */
        background-color: #f1f1f1;
        /* Mu n?n nh?t */
        border-radius: 10px;
        /* Bo gc thanh ti?n d? */
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        /* Thm bng nh? */
    }

    /* Ki?u dng thanh ti?n d? bn trong */
    .progress-bar {
        font-weight: bold;
        /* Lm d?m ch? */
        text-align: center;
        /* Can gi?a ch? */
        color: white;
        /* Mu ch? tr?ng */
        border-radius: 10px;
        /* Bo gc cho thanh ti?n d? */
        transition: width 0.5s ease-in-out;
        /* Hi?u ?ng chuy?n d?ng mu?t m khi thay d?i t? l? */
    }

    /* Mu s?c ph h?p v?i ch? d? y t? */
    .progress-bar-striped {
        background-image: linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);
        background-size: 40px 40px;
    }

    /* C?i thi?n d? d?c cho ch? */
    .progress-bar span {
        font-size: 1.2em;
        /* Tang kch thu?c ch? */
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        /* Thm bng cho ch? */
    }

    /* Mu s?c thanh ti?n d? ty thu?c vo ti?n d? */
    .progress-bar {
        background-color: #28a745;
        /* Mu xanh l */
    }

    .progress-bar[data-completion="warning"] {
        background-color: #ffc107;
        /* Mu vng khi ti?n d? ? m?c trung bnh */
    }

    .progress-bar[data-completion="danger"] {
        background-color: #dc3545;
        /* Mu d? khi g?n hon thnh */
    }



    .sparkle {
        fill: #AAAAAA;
        transition: all 800ms ease;
    }

    .text {
        font-weight: 600;
        color: #AAAAAA;
        font-size: medium;
    }

    .btn:hover {
        background: linear-gradient(0deg, #5bc0de, #008c8c);
        /* Mu xanh duong v xanh lam */
        box-shadow: inset 0px 1px 0px 0px rgba(255, 255, 255, 0.4), inset 0px -4px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 4px rgba(255, 255, 255, 0.2), 0px 0px 180px 0px #5bc0de;
        /* Thm bng m? mu xanh duong */
        transform: translateY(-2px);
    }

    .btn:hover .text {
        color: white;
    }

    .btn:hover .sparkle {
        fill: white;
        transform: scale(1.2);
    }


    #map {
        border: 1px solid #ddd;
        /* Thm vi?n n?u mu?n */
        border-radius: 8px;
        /* Bo gc nh? */
        overflow: hidden;
        /* ?n n?i dung trn n?u c */
    }

    /* Enhanced Stats Cards */
    .stats-card {
        background: white;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        border: 1px solid #e5e7eb;
        height: 100%;
        min-height: 120px;
    }

    .stats-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    .stats-card .icon {
        width: 50px;
        height: 50px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 15px;
        color: white;
        font-size: 20px;
    }

    .stats-card .stats-value {
        font-size: 2rem;
        font-weight: 700;
        color: #1f2937;
        margin: 0;
        line-height: 1.1;
    }

    .stats-card .stats-label {
        font-size: 0.9rem;
        color: #6b7280;
        margin: 5px 0;
        font-weight: 500;
    }

    .stats-card small {
        font-size: 0.75rem;
        color: #9ca3af;
        font-style: italic;
    }

    /* Override Bootstrap progress styling */
    .progress {
        background-color: #e5e7eb !important;
        border-radius: 10px !important;
        overflow: hidden;
    }

    .progress .progress-bar {
        border-radius: 10px !important;
        transition: width 1.2s ease !important;
    }

    /* Custom Progress Bar Styling for Technology Cards */
    .metric-card .progress {
        height: 12px !important;
        background-color: #e5e7eb !important;
        border-radius: 10px !important;
        overflow: hidden !important;
        box-shadow: none !important;
    }

    .metric-card .progress-bar {
        height: 100% !important;
        border-radius: 10px !important;
        transition: width 1.2s ease !important;
        font-weight: normal !important;
        text-align: left !important;
        /* Colors will be set inline via style attribute */
    }

    /* Chart Styles */
    .chart-container {
        background: white;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .chart-legend {
        padding: 20px;
        background: #f8f9fa;
        border-radius: 10px;
        height: 400px;
        overflow-y: auto;
    }

    .legend-item {
        display: flex;
        align-items: center;
        margin-bottom: 12px;
        padding: 8px;
        background: white;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .legend-color {
        width: 20px;
        height: 20px;
        border-radius: 4px;
        margin-right: 12px;
        flex-shrink: 0;
    }

    .legend-text {
        flex: 1;
        font-size: 14px;
        font-weight: 500;
    }

    .legend-value {
        font-size: 13px;
        color: #6c757d;
        margin-left: 8px;
    }

    .legend-percentage {
        font-size: 12px;
        color: #28a745;
        font-weight: 600;
    }

    /* Ensure chart visibility */
    #vungKinhTeChart {
        display: block !important;
        width: 100% !important;
        height: 100% !important;
        max-width: 100%;
        max-height: 380px;
    }

    .chart-container canvas {
        width: 100% !important;
        height: 100% !important;
    }
    </style>
</head>

<body>
    <!-- Top Navigation -->
    <nav class="top-nav">
        <div class="container-fluid">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <a href="#" class="nav-brand">
                        <i class="fas fa-building"></i>
                        CÔNG TY TNHH CI RESEARCH
                    </a>
                </div>
                <div class="col-md-4 text-end">
                    <div class="user-info">
                        @if (Context.Session.GetString("Username") != null)
                        {
                                        <span>Xin chào @Context.Session.GetString("Username")!</span>
                        }
                        else
                        {
                                        <span>Khách</span>
                        }
                    </div>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Container -->
    <div class="main-container">
        <div class="content-wrapper">
    <!-- Modern Dashboard Header -->
    @* <div class="card shadow mb-4" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border: none;">
        <div class="card-body text-white">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h1 class="display-6 fw-bold mb-2">
                        <i class="fas fa-building me-3"></i>
                        Dashboard Doanh Nghiệp
                    </h1>
                    <p class="lead mb-0 opacity-75">
                        Phân tích và báo cáo tổng hợp dữ liệu doanh nghiệp Việt Nam
                    </p>
                </div>
                <div class="col-md-4 text-end">
                    <div class="d-flex flex-column align-items-end">
                        <div class="mb-2">
                            <i class="fas fa-calendar-alt me-2"></i>
                            <span class="fw-semibold">@DateTime.Now.ToString("dd/MM/yyyy")</span>
                        </div>
                        <div class="small opacity-75">
                            <i class="fas fa-clock me-1"></i>
                            Cập nhật: @ViewBag.LastImportTime?.ToString("HH:mm")
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div> *@

    <div class="container-fluid px-3">
        <!-- Advanced Filters Section (Similar to Admin) -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h5 class="m-0 font-weight-bold text-primary">
                <i class="fas fa-filter me-2"></i>
                    Bộ lọc dữ liệu doanh nghiệp
            </h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                        <form method="get" action="@Url.Action("Index", "DN")" class="filter-form">
                            <div style="display: flex; flex-wrap: wrap; gap: 10px;">

                                <!-- Năm Multi-select -->
                                <div class="custom-multi-select">
                                    <div class="select-box" onclick="toggleDropdown(this)">
                                        <span class="selected-options" data-placeholder="Năm">Năm</span>
                                        <i class="arrow"></i>
                                    </div>
                                    <div class="dropdown-options">
                                        <input type="text" class="search-box" placeholder="Tìm kiếm năm" oninput="filterOptions(this)">
                                        @foreach (var year in new List<string> { "2018", "2019", "2020", "2021", "2022", "2023", "2024" })
                                        {
                                                        <label>
                                                            <input type="checkbox" name="Nam" value="@year" @(ViewBag.Nam?.Contains(year) == true ? "checked" : "") /> @year
                                                        </label>
                                        }
                                    </div>
                    </div>

                                <!-- Tỉnh/Thành phố Multi-select -->
                                <div class="custom-multi-select">
                                    <div class="select-box" onclick="toggleDropdown(this)">
                                        <span class="selected-options" data-placeholder="Tỉnh/Thành phố">Tỉnh/Thành phố</span>
                                        <i class="arrow"></i>
                                    </div>
                                    <div class="dropdown-options">
                                        <input type="text" class="search-box" placeholder="Tìm kiếm tỉnh thành" oninput="filterOptions(this)">
                                        @foreach (var province in new List<string>
                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                "An Giang", "Bà Rịa-Vũng Tàu", "Bắc Giang", "Bắc Kạn", "Bạc Liêu", "Bắc Ninh", "Bến Tre", "Bình Định",
                                                                                                                                                                                                                                                                                                                                                                "Bình Dương", "Bình Phước", "Bình Thuận", "Cà Mau", "Cao Bằng", "Đắk Lắk", "Đắk Nông", "Điện Biên",
                                                                                                                                                                                                                                                                                                                                                                "Đồng Nai", "Đồng Tháp", "Gia Lai", "Hà Giang", "Hà Nam", "Hà Tĩnh", "Hải Dương", "Hậu Giang",
                                                                                                                                                                                                                                                                                                                                                                "Hòa Bình", "Hưng Yên", "Khánh Hòa", "Kiên Giang", "Kon Tum", "Lai Châu", "Lâm Đồng", "Lạng Sơn",
                                                                                                                                                                                                                                                                                                                                                                "Lào Cai", "Long An", "Nam Định", "Nghệ An", "Ninh Bình", "Ninh Thuận", "Phú Thọ", "Phú Yên",
                                                                                                                                                                                                                                                                                                                                                                "Quảng Bình", "Quảng Nam", "Quảng Ngãi", "Quảng Ninh", "Quảng Trị", "Sóc Trăng", "Sơn La",
                                                                                                                                                                                                                                                                                                                                                                "Tây Ninh", "Thái Bình", "Thái Nguyên", "Thanh Hóa", "Thừa Thiên Huế", "Tiền Giang", "Trà Vinh",
                                                                                                                                                                                                                                                                                                                                                                "Tuyên Quang", "Vĩnh Long", "Vĩnh Phúc", "Yên Bái", "Hà Nội", "Hồ Chí Minh", "Đà Nẵng", "Hải Phòng", "Cần Thơ"
                                                                                                                                                                                                                                                                                                                                })
                                        {
                                                        <label>
                                                            <input type="checkbox" name="MaTinh_Dieutra" value="@province" @(ViewBag.MaTinh_Dieutra?.Contains(province) == true ? "checked" : "") /> @province
                                                        </label>
                                        }
                                    </div>
                    </div>

                                <!-- Loại hình kinh tế Multi-select -->
                                <div class="custom-multi-select">
                                    <div class="select-box" onclick="toggleDropdown(this)">
                                        <span class="selected-options" data-placeholder="Loại hình kinh tế">Loại hình kinh tế</span>
                                        <i class="arrow"></i>
                                    </div>
                                    <div class="dropdown-options">
                                        <input type="text" class="search-box" placeholder="Tìm kiếm loại hình" oninput="filterOptions(this)">
                                        @foreach (var type in new List<string>
                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                "Công ty TNHH", "Công ty cổ phần", "Doanh nghiệp tư nhân", "Doanh nghiệp nhà nước",
                                                                                                                                                                                                                                                                                                                                                                "Công ty hợp danh", "Hợp tác xã", "Liên doanh", "Chi nhánh công ty", "Văn phòng đại diện"
                                                                                                                                                                                                                                                                                                                                })
                                        {
                                                        <label>
                                                            <input type="checkbox" name="Loaihinhkte" value="@type" @(ViewBag.Loaihinhkte?.Contains(type) == true ? "checked" : "") /> @type
                                                        </label>
                                        }
                                    </div>
                    </div>

                                <!-- Vùng kinh tế Multi-select -->
                                <div class="custom-multi-select">
                                    <div class="select-box" onclick="toggleDropdown(this)">
                                        <span class="selected-options" data-placeholder="Vùng kinh tế">Vùng kinh tế</span>
                                        <i class="arrow"></i>
                                    </div>
                                    <div class="dropdown-options">
                                        <input type="text" class="search-box" placeholder="Tìm kiếm vùng kinh tế" oninput="filterOptions(this)">
                                        @foreach (var vungkinhte in new List<string> {
                                                                                                                                                                                                                                                                                                                                                                "Bắc Trung Bộ",
                                                                                                                                                                                                                                                                                                                                                                "Duyên hải Nam Trung Bộ",
                                                                                                                                                                                                                                                                                                                                                                "Đồng bằng Sông Cửu Long",
                                                                                                                                                                                                                                                                                                                                                                "Đồng bằng Sông Hồng",
                                                                                                                                                                                                                                                                                                                                                                "Đông Nam Bộ",
                                                                                                                                                                                                                                                                                                                                                                "Tây Nguyên",
                                                                                                                                                                                                                                                                                                                                                                "Trung du và Miền núi Bắc Bộ"
                                                                                                                                                                                                                                                                                                                                })
                                        {
                                                        <label>
                                                            <input type="checkbox" name="Vungkinhte" value="@vungkinhte" @(ViewBag.Vungkinhte?.Contains(vungkinhte) == true ? "checked" : "") /> @vungkinhte
                                                        </label>
                                        }
                    </div>
                </div>

                                <!-- Quy mô doanh nghiệp -->
                                <div class="custom-multi-select">
                                    <div class="select-box" onclick="toggleDropdown(this)">
                                        <span class="selected-options" data-placeholder="Quy mô">Quy mô</span>
                                        <i class="arrow"></i>
                                    </div>
                                    <div class="dropdown-options">
                                        <input type="text" class="search-box" placeholder="Tìm kiếm quy mô" oninput="filterOptions(this)">
                                        @foreach (var size in new List<string> { "Siêu nhỏ", "Nhỏ", "Vừa", "Lớn" })
                                        {
                                                        <label>
                                                            <input type="checkbox" name="QuyMo" value="@size" @(ViewBag.QuyMo?.Contains(size) == true ? "checked" : "") /> @size
                                                        </label>
                                        }
                                    </div>
                                </div>

                            </div>

                            <!-- Action Buttons -->
                            <div style="margin-top: 15px; display: flex; gap: 10px; flex-wrap: wrap;">
                                <button type="submit" class="btn btn-primary">
                        <i class="fas fa-search me-1"></i>
                        Áp dụng bộ lọc
                    </button>
                                <button type="button" class="btn btn-outline-secondary" onclick="clearAllFilters()">
                                    <i class="fas fa-times me-1"></i>
                        Xóa bộ lọc
                    </button>
                                <!-- ViewRawData link removed - action no longer exists -->
                                @* <a href="@Url.Action("ViewRawData", "DN")" class="btn btn-outline-info">
                        <i class="fas fa-table me-1"></i>
                        Xem dữ liệu chi tiết
                    </a> *@
                </div>
            </form>
                    </div>
                </div>
            </div>
        </div>

         <!-- Main Statistics Summary Cards (Similar to Admin) -->
        <div class="row mb-4">
             <!-- Tổng số doanh nghiệp -->
             <div class="col-xl-3 col-md-6 mb-4">
                 <div class="card border-left shadow h-100 py-2" style="background-color:rgb(136,146,214); padding: 20px;">
                     <div class="card-body" style="padding: 20px;">
                         <div class="row no-gutters align-items-center">
                             <div class="col mr-2 ">
                                 <h5 class="m-0 font-weight-bold text-white">Tổng doanh nghiệp</h5>
                                 <div class="h3 mb-0 font-weight text-white">
                                     <span style="font-size: 0.55em;">Số DN</span> @ViewBag.TotalCompanies
                </div>
            </div>
                             <div class="col-auto">
                                 <i class="fas fa-building fa-2x text-white"></i>
        </div>
                </div>
                 </div>
            </div>
        </div>

         <!-- Tổng số lao động -->
         <div class="col-xl-3 col-md-6 mb-4">
             <div class="card border-left shadow h-100 py-2" style="background-color:rgb(69,187,224);padding: 20px;">
                 <div class="card-body" style="padding: 20px;">
                     <div class="row no-gutters align-items-center">
                         <div class="col mr-2">
                             <h5 class="m-0 font-weight-bold text-white">Tổng lao động</h5>
                             <div class="h3 mb-0 font-weight text-white">
                                 <span style="font-size: 0.55em;">Người</span> @String.Format("{0:N0}", ViewBag.TotalLabor ?? 0)
                </div>
            </div>
                         <div class="col-auto">
                             <i class="fas fa-users fa-2x text-white"></i>
        </div>
                </div>
            </div>
        </div>
    </div>

         <!-- Phân bố vùng kinh tế -->
         <div class="col-xl-3 col-md-6 mb-4">
             <div class="card border-left shadow h-100 py-2" style="background-color:rgb(240,98,146);padding: 20px;">
                 <div class="card-body" style="padding: 20px;">
                     <div class="row no-gutters align-items-center">
                         <div class="col mr-2">
                             <h5 class="m-0 font-weight-bold text-white">DN theo vùng KT</h5>
                             <div class="h3 mb-0 font-weight text-white">
                                 <span style="font-size: 0.55em;">Miền Bắc</span> @ViewBag.MienBacCount <span style="font-size: 0.55em;"></span>
                </div>
                             <div class="h3 mb-0 font-weight text-white">
                                 <span style="font-size: 0.55em;">Miền Trung</span> @ViewBag.MienTrungCount <span style="font-size: 0.55em;"></span>
            </div>
                             <div class="h3 mb-0 font-weight text-white">
                                 <span style="font-size: 0.55em;">Miền Nam</span> @ViewBag.MienNamCount <span style="font-size: 0.55em;"></span>
        </div>
                </div>
                         <div class="col-auto">
                             <i class="fas fa-map-marked-alt fa-2x text-white" style="vertical-align: 60px;"></i>
            </div>
        </div>
                </div>
            </div>
        </div>

         <!-- Phân loại doanh nghiệp - Top 3 từ database thực tế -->
         <div class="col-xl-3 col-md-6 mb-4">
             <div class="card border-left shadow h-100 py-2" style="background-color:rgb(120,195,80);padding: 20px;">
                 <div class="card-body" style="padding: 20px;">
                     <div class="row no-gutters align-items-center">
                         <div class="col mr-2">
                             <h5 class="m-0 font-weight-bold text-white">Phân loại DN (top 3)</h5>
                             <div class="h3 mb-0 font-weight text-white">
                                 <span style="font-size: 0.45em;">@(ViewBag.TopBusinessType1Name?.ToString().Length > 25 ? ViewBag.TopBusinessType1Name?.ToString().Substring(0, 22) + "..." : ViewBag.TopBusinessType1Name)</span> @String.Format("{0:N0}", ViewBag.TopBusinessType1Count)
                             </div>
                             <div class="h3 mb-0 font-weight text-white">
                                 <span style="font-size: 0.45em;">@(ViewBag.TopBusinessType2Name?.ToString().Length > 25 ? ViewBag.TopBusinessType2Name?.ToString().Substring(0, 22) + "..." : ViewBag.TopBusinessType2Name)</span> @String.Format("{0:N0}", ViewBag.TopBusinessType2Count)
                             </div>
                             <div class="h3 mb-0 font-weight text-white">
                                 <span style="font-size: 0.45em;">@(ViewBag.TopBusinessType3Name?.ToString().Length > 25 ? ViewBag.TopBusinessType3Name?.ToString().Substring(0, 22) + "..." : ViewBag.TopBusinessType3Name)</span> @String.Format("{0:N0}", ViewBag.TopBusinessType3Count)
                             </div>
                         </div>
                         <div class="col-auto">
                             <i class="fas fa-building fa-2x text-white" style="vertical-align: 60px;"></i>
                         </div>
                     </div>
                 </div>
            </div>
        </div>
    </div>

    <!-- Financial Summary Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card-body border-0 shadow-sm">
                <div class="card-header bg-gradient text-white text-center"
                    style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-line me-2"></i>
                        Tóm tắt tài chính doanh nghiệp
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                         <div class="col-xl-3 col-lg-6 col-md-6 col-sm-6">
                            <div class="border-end py-3">
                                 <h4 class="text-primary mb-1">@String.Format("{0:N0}", ViewBag.CompaniesWithRevenue ?? 0)</h4>
                                    <small class="text-muted">DN có doanh thu</small>
                            </div>
                        </div>
                         <div class="col-xl-3 col-lg-6 col-md-6 col-sm-6">
                            <div class="border-end py-3">
                                 <h4 class="text-success mb-1">@String.Format("{0:N0}", ViewBag.CompaniesWithAssets ?? 0)</h4>
                                <small class="text-muted">DN có tài sản</small>
                            </div>
                        </div>
                         <div class="col-xl-3 col-lg-6 col-md-6 col-sm-6">
                            <div class="border-end py-3">
                                 <h4 class="text-warning mb-1">@String.Format("{0:N0}", ViewBag.CompaniesWithProfit ?? 0)</h4>
                                <small class="text-muted">DN có lợi nhuận</small>
                            </div>
                        </div>
                         <div class="col-xl-3 col-lg-6 col-md-6 col-sm-6">
                             <div class="py-3">
                                <h4 class="text-info mb-1">@String.Format("{0:N2}", (ViewBag.TotalAssetsCK ?? 0m) / 1000000000m) tỷ</h4>
                                <small class="text-muted">Tổng tài sản cuối kỳ</small>
                             </div>
                         </div>
                     </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Technology Adoption Section -->
    <div class="mt-5">
        <div class="technology-section">
            <h5 class="section-title text-center mb-4">
                <i class="fas fa-microchip text-primary me-2"></i>
                Mức độ ứng dụng Công nghệ số
            </h5>
            <div class="row">
                 <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12 mb-3">
                    <div class="metric-card">
                        <div class="metric-value text-primary">@ViewBag.CoInternet</div>
                        <div class="metric-label">
                            <i class="fas fa-wifi me-2"></i>Sử dụng Internet
                        </div>
                        <div class="progress mt-2" style="height: 12px;">
                            <div class="progress-bar" role="progressbar" 
                                 style="width: @(ViewBag.TotalCompanies > 0 ? Math.Round((double)ViewBag.CoInternet / ViewBag.TotalCompanies * 100, 1) : 0)%; background-color: #2563eb;"
                                 aria-valuenow="@(ViewBag.TotalCompanies > 0 ? Math.Round((double)ViewBag.CoInternet / ViewBag.TotalCompanies * 100, 1) : 0)" 
                                 aria-valuemin="0" aria-valuemax="100">
                            </div>
                        </div>
                        <div class="metric-percentage">
                            <span>@(ViewBag.TotalCompanies > 0 ? Math.Round((double)ViewBag.CoInternet / ViewBag.TotalCompanies * 100, 1) : 0)%</span>
                            <span class="metric-ratio">@ViewBag.CoInternet/@ViewBag.TotalCompanies</span>
                        </div>
                    </div>
                </div>
                 <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12 mb-3">
                    <div class="metric-card">
                        <div class="metric-value text-success">@ViewBag.CoWebsite</div>
                        <div class="metric-label">
                            <i class="fas fa-globe me-2"></i>Có Website
                        </div>
                        <div class="progress mt-2" style="height: 12px;">
                            <div class="progress-bar" role="progressbar" 
                                 style="width: @(ViewBag.TotalCompanies > 0 ? Math.Round((double)ViewBag.CoWebsite / ViewBag.TotalCompanies * 100, 1) : 0)%; background-color: #10b981;"
                                 aria-valuenow="@(ViewBag.TotalCompanies > 0 ? Math.Round((double)ViewBag.CoWebsite / ViewBag.TotalCompanies * 100, 1) : 0)" 
                                 aria-valuemin="0" aria-valuemax="100">
                            </div>
                        </div>
                        <div class="metric-percentage">
                            <span>@(ViewBag.TotalCompanies > 0 ? Math.Round((double)ViewBag.CoWebsite / ViewBag.TotalCompanies * 100, 1) : 0)%</span>
                            <span class="metric-ratio">@ViewBag.CoWebsite/@ViewBag.TotalCompanies</span>
                        </div>
                    </div>
                </div>
                 <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12 mb-3">
                    <div class="metric-card">
                        <div class="metric-value text-warning">@ViewBag.CoPhanmem</div>
                        <div class="metric-label">
                            <i class="fas fa-laptop-code me-2"></i>Sử dụng phần mềm
                        </div>
                        <div class="progress mt-2" style="height: 12px;">
                            <div class="progress-bar" role="progressbar" 
                                 style="width: @(ViewBag.TotalCompanies > 0 ? Math.Round((double)ViewBag.CoPhanmem / ViewBag.TotalCompanies * 100, 1) : 0)%; background-color: #f59e0b;"
                                 aria-valuenow="@(ViewBag.TotalCompanies > 0 ? Math.Round((double)ViewBag.CoPhanmem / ViewBag.TotalCompanies * 100, 1) : 0)" 
                                 aria-valuemin="0" aria-valuemax="100">
                            </div>
                        </div>
                        <div class="metric-percentage">
                            <span>@(ViewBag.TotalCompanies > 0 ? Math.Round((double)ViewBag.CoPhanmem / ViewBag.TotalCompanies * 100, 1) : 0)%</span>
                            <span class="metric-ratio">@ViewBag.CoPhanmem/@ViewBag.TotalCompanies</span>
                        </div>
                    </div>
                </div>
                 <div class="col-xl-3 col-lg-12 col-md-6 col-sm-12 mb-3">
                     <div class="metric-card">
                         <div class="metric-value text-info">@ViewBag.CoTudonghoa</div>
                         <div class="metric-label">
                             <i class="fas fa-robot me-2"></i>Tự động hóa
                         </div>
                         <div class="progress mt-2" style="height: 12px;">
                             <div class="progress-bar" role="progressbar" 
                                  style="width: @(ViewBag.TotalCompanies > 0 ? Math.Round((double)ViewBag.CoTudonghoa / ViewBag.TotalCompanies * 100, 1) : 0)%; background-color: #06b6d4;"
                                  aria-valuenow="@(ViewBag.TotalCompanies > 0 ? Math.Round((double)ViewBag.CoTudonghoa / ViewBag.TotalCompanies * 100, 1) : 0)" 
                                  aria-valuemin="0" aria-valuemax="100">
                             </div>
                         </div>
                         <div class="metric-percentage">
                             <span>@(ViewBag.TotalCompanies > 0 ? Math.Round((double)ViewBag.CoTudonghoa / ViewBag.TotalCompanies * 100, 1) : 0)%</span>
                             <span class="metric-ratio">@ViewBag.CoTudonghoa/@ViewBag.TotalCompanies</span>
                         </div>
                     </div>
                 </div>
            </div>
        </div>
    </div>

        <!-- Charts Section -->
    <div class="mt-5">
        <div class="row">
            <!-- Vùng Kinh Tế Chart -->
            <div class="col-lg-6 mb-4">
                <div class="card shadow h-100">
                    <div class="card-header py-3 text-center" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                        <h6 class="m-0 font-weight-bold text-white">
                            <i class="fas fa-map-marked-alt me-2"></i>
                            Phân bố theo Vùng Kinh tế
                        </h6>
                        <!-- Debug buttons -->
                        <div class="mt-2">
                            <button onclick="testVungKinhTeData()" class="btn btn-sm btn-warning me-1" style="font-size: 0.7rem;">
                                <i class="fas fa-bug"></i> Test
                            </button>
                            <button onclick="createTestChart()" class="btn btn-sm btn-success me-1" style="font-size: 0.7rem;">
                                <i class="fas fa-chart-pie"></i> Force
                            </button>
                        </div>
                    </div>
                    <div class="card-body p-2">
                        <div class="row">
                            <div class="col-md-7">
                                <div class="chart-container" style="position: relative; height: 300px;">
                                    <canvas id="vungKinhTeChart"></canvas>
                                </div>
                            </div>
                            <div class="col-md-5">
                                <div class="chart-legend" style="height: 300px; overflow-y: auto; padding: 10px;">
                                    <h6 class="text-muted mb-2" style="font-size: 0.9rem;">Chi tiết:</h6>
                                    <div id="chartLegendDetails">
                                        <!-- Legend details will be populated by JavaScript -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Quy mô Doanh nghiệp Chart -->
            <div class="col-lg-6 mb-4">
                <div class="card shadow h-100">
                    <div class="card-header py-3 text-center" style="background: linear-gradient(135deg, #28a745 0%, #20c997 100%);">
                        <h6 class="m-0 font-weight-bold text-white">
                            <i class="fas fa-building me-2"></i>
                            Phân bố theo Quy mô Doanh nghiệp
                        </h6>
                        <!-- Debug buttons -->
                        <div class="mt-2">
                            <button onclick="testQuyMoData()" class="btn btn-sm btn-warning me-1" style="font-size: 0.7rem;">
                                <i class="fas fa-bug"></i> Test
                            </button>
                            <button onclick="createQuyMoChart()" class="btn btn-sm btn-success me-1" style="font-size: 0.7rem;">
                                <i class="fas fa-chart-bar"></i> Force
                            </button>
                        </div>
                    </div>
                    <div class="card-body p-2">
                        <div class="row">
                            <div class="col-md-7">
                                <div class="chart-container" style="position: relative; height: 300px;">
                                    <canvas id="quyMoChart"></canvas>
                                </div>
                            </div>
                            <div class="col-md-5">
                                <div class="chart-legend" style="height: 300px; overflow-y: auto; padding: 10px;">
                                    <h6 class="text-muted mb-2" style="font-size: 0.9rem;">Chi tiết:</h6>
                                    <div id="quyMoLegendDetails">
                                        <!-- Legend details will be populated by JavaScript -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics Summary -->
    <div class="mt-4 text-center">
        <p class="text-muted">
            <i class="fas fa-info-circle me-1"></i>
            Tổng số doanh nghiệp được phân tích: <strong>@ViewBag.TotalCompanies</strong>
        </p>
    </div>
</div>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<!-- Simple Chart Test Script -->
<script>
console.log('🔍 Page loaded, testing Chart.js...');

// Test if Chart.js is available
if (typeof Chart === 'undefined') {
    console.error('❌ Chart.js NOT loaded!');
} else {
    console.log('✅ Chart.js loaded:', Chart.version);
}

// Test canvas element
window.addEventListener('load', function() {
    const canvas = document.getElementById('vungKinhTeChart');
    if (canvas) {
        console.log('✅ Canvas element found');
        
        // Try to create a simple chart immediately
        try {
            const simpleChart = new Chart(canvas, {
                type: 'doughnut',
                data: {
                    labels: ['Test 1', 'Test 2', 'Test 3'],
                    datasets: [{
                        data: [10, 20, 30],
                        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
            console.log('✅ Simple chart created successfully!');
        } catch (error) {
            console.error('❌ Error creating simple chart:', error);
        }
    } else {
        console.error('❌ Canvas element NOT found!');
    }
});
</script>

<!-- Vùng Kinh Tế Chart Script -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    console.log('🎯 Initializing Vùng Kinh Tế Chart...');
    
    // Check if Chart.js is loaded
    if (typeof Chart === 'undefined') {
        console.error('❌ Chart.js is not loaded!');
        return;
    }
    
    // Debug: Show all ViewBag data safely
    const totalCompanies = @(ViewBag.TotalCompanies ?? 0);
    console.log('🔍 DEBUG - All ViewBag data:');
    console.log('  TotalCompanies:', totalCompanies);
    
    // Get data from ViewBag - từ cột Vungkinhte - safely
    let vungKinhTeData = [];
    try {
        const rawDataString = '@Html.Raw(Json.Serialize(ViewBag.VungKinhTeData ?? new List<object>()))';
        console.log('📊 Raw data string:', rawDataString);
        
        if (rawDataString && rawDataString !== '[]' && rawDataString !== '') {
            vungKinhTeData = JSON.parse(rawDataString);
        }
        
        console.log('📊 Vùng Kinh Tế data from ViewBag:', vungKinhTeData);
        console.log('📊 Data type:', typeof vungKinhTeData);
        console.log('📊 Data length:', vungKinhTeData ? vungKinhTeData.length : 'null/undefined');
    } catch (error) {
        console.warn('⚠️ Error loading ViewBag data:', error);
        console.log('⚠️ Using sample data instead');
    }
    
    // Fallback sample data nếu không có dữ liệu từ ViewBag
    if (!vungKinhTeData || vungKinhTeData.length === 0) {
        console.log('⚠️ No data from ViewBag, using sample data');
        vungKinhTeData = [
            { region: 'Đông Nam Bộ', soLuong: 120 },
            { region: 'Đồng bằng Sông Hồng', soLuong: 95 },
            { region: 'Duyên hải Nam Trung Bộ', soLuong: 80 },
            { region: 'Bắc Trung Bộ', soLuong: 65 },
            { region: 'Đồng bằng Sông Cửu Long', soLuong: 75 },
            { region: 'Tây Nguyên', soLuong: 45 },
            { region: 'Trung du và Miền núi Bắc Bộ', soLuong: 55 }
        ];
        console.log('📊 Using sample data:', vungKinhTeData);
    }
    
    // Prepare chart data
    let labels = vungKinhTeData.map(item => item.Vungkinhte || item.region || item.Region || 'N/A');
    let data = vungKinhTeData.map(item => item.SoLuong || item.soLuong || item.Count || 0);
    let total = data.reduce((sum, value) => sum + value, 0);
    
    console.log('📊 Processed chart data:');
    console.log('  Labels:', labels);
    console.log('  Data:', data);
    console.log('  Total:', total);
    
    // If total is 0, there's no data to display
    if (total === 0) {
        console.log('⚠️ Total is 0, using sample data for testing');
        vungKinhTeData = [
            { region: 'Đông Nam Bộ', soLuong: 120 },
            { region: 'Đồng bằng Sông Hồng', soLuong: 95 },
            { region: 'Duyên hải Nam Trung Bộ', soLuong: 80 },
            { region: 'Bắc Trung Bộ', soLuong: 65 },
            { region: 'Đồng bằng Sông Cửu Long', soLuong: 75 },
            { region: 'Tây Nguyên', soLuong: 45 },
            { region: 'Trung du và Miền núi Bắc Bộ', soLuong: 55 }
        ];
        
        // Recalculate with sample data
        labels = vungKinhTeData.map(item => item.region);
        data = vungKinhTeData.map(item => item.soLuong);
        total = data.reduce((sum, value) => sum + value, 0);
        
        console.log('📊 Using sample data instead:');
        console.log('  Labels:', labels);
        console.log('  Data:', data);
        console.log('  Total:', total);
    }
    
    // Chart colors - tương ứng với 7 vùng kinh tế
    const colors = [
        '#FF6384', // Đông Nam Bộ - Hồng
        '#36A2EB', // Đồng bằng Sông Hồng - Xanh dương
        '#FFCE56', // Duyên hải Nam Trung Bộ - Vàng
        '#4BC0C0', // Bắc Trung Bộ - Xanh lá
        '#9966FF', // Đồng bằng Sông Cửu Long - Tím
        '#FF9F40', // Tây Nguyên - Cam
        '#FF6384'  // Trung du và Miền núi Bắc Bộ - Đỏ nhạt
    ];
    
    // Get canvas context
    const ctx = document.getElementById('vungKinhTeChart');
    if (!ctx) {
        console.error('❌ Canvas element vungKinhTeChart not found!');
        return;
    }
    console.log('✅ Canvas element found:', ctx);
    
    // Create chart
    try {
        // Destroy existing chart if any
        Chart.getChart(ctx)?.destroy();
        
        const vungKinhTeChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: colors,
                    borderColor: '#ffffff',
                    borderWidth: 3,
                    hoverBorderWidth: 4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false // Tắt legend mặc định, dùng custom legend
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const percentage = ((context.raw / total) * 100).toFixed(1);
                                return context.label + ': ' + context.raw.toLocaleString() + ' DN (' + percentage + '%)';
                            }
                        },
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: 'white',
                        bodyColor: 'white',
                        borderColor: 'rgba(255, 255, 255, 0.2)',
                        borderWidth: 1
                    }
                },
                animation: {
                    animateScale: true,
                    animateRotate: true,
                    duration: 1000
                }
            }
        });
        
        console.log('✅ Chart created successfully!', vungKinhTeChart);
        
        // Create custom legend
        createCustomLegend(labels, data, colors, total);
        
        console.log('✅ Vùng Kinh Tế Chart completed successfully!');
        
        // Show success message
        setTimeout(() => {
            console.log('🎉 Chart should be visible now!');
            // Optional: Show alert for debugging
            // alert('✅ Chart created successfully!\\n' + total + ' total companies\\n' + labels.length + ' regions');
        }, 1000);
    } catch (error) {
        console.error('❌ Error creating chart:', error);
        console.error('❌ Error stack:', error.stack);
    }
});

// Function to create custom legend
function createCustomLegend(labels, data, colors, total) {
    const legendContainer = document.getElementById('chartLegendDetails');
    if (!legendContainer) return;
    
    let legendHTML = '';
    
    labels.forEach((label, index) => {
        const value = data[index];
        const percentage = ((value / total) * 100).toFixed(1);
        
        legendHTML += `
            <div class="legend-item">
                <div class="legend-color" style="background-color: ${colors[index]}"></div>
                <div class="legend-text">${label}</div>
                <div class="legend-value">
                    ${value.toLocaleString()} DN
                    <div class="legend-percentage">${percentage}%</div>
                </div>
            </div>
        `;
    });
    
    // Thêm tổng số
    legendHTML += `
        <div class="legend-item" style="border-top: 2px solid #dee2e6; margin-top: 15px; padding-top: 15px;">
            <div class="legend-color" style="background: linear-gradient(45deg, #667eea, #764ba2)"></div>
            <div class="legend-text"><strong>Tổng cộng</strong></div>
            <div class="legend-value">
                <strong>${total.toLocaleString()} DN</strong>
                <div class="legend-percentage">100%</div>
            </div>
        </div>
    `;
    
    legendContainer.innerHTML = legendHTML;
}
</script>

<!-- Advanced Filter JavaScript Functions -->
<script>
    // Toggle dropdown visibility
    function toggleDropdown(element) {
        const dropdown = element.nextElementSibling;
        dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
        
        // Update selected display
        updateSelectedDisplay(element);
    }

    // Filter options based on search input
    function filterOptions(searchInput) {
        const filter = searchInput.value.toLowerCase();
        const dropdown = searchInput.parentElement;
        const labels = dropdown.querySelectorAll('label');
        
        labels.forEach(label => {
            const text = label.textContent.toLowerCase();
            if (text.includes(filter)) {
                label.style.display = 'block';
            } else {
                label.style.display = 'none';
            }
        });
    }

    // Update selected options display
    function updateSelectedDisplay(selectBox) {
        const dropdown = selectBox.nextElementSibling;
        const selectedSpan = selectBox.querySelector('.selected-options');
        const checkedInputs = dropdown.querySelectorAll('input[type="checkbox"]:checked');
        const placeholder = selectedSpan.getAttribute('data-placeholder');
        
        if (checkedInputs.length === 0) {
            selectedSpan.textContent = placeholder;
        } else if (checkedInputs.length === 1) {
            selectedSpan.textContent = checkedInputs[0].nextSibling.textContent.trim();
        } else {
            selectedSpan.textContent = `${checkedInputs.length} mục đã chọn`;
        }
    }

    // Clear all filters
    function clearAllFilters() {
        // Uncheck all checkboxes
        document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
            checkbox.checked = false;
        });
        
        // Reset all select displays
        document.querySelectorAll('.select-box').forEach(selectBox => {
            updateSelectedDisplay(selectBox);
        });
        
        // Reload page without filters
        window.location.href = '@Url.Action("Index", "DN")';
    }

    // Close dropdowns when clicking outside
    document.addEventListener('click', function(event) {
        if (!event.target.closest('.custom-multi-select')) {
            document.querySelectorAll('.dropdown-options').forEach(dropdown => {
                dropdown.style.display = 'none';
            });
        }
    });

    // Initialize filter UI only
    document.addEventListener('DOMContentLoaded', function() {
        console.log('🔧 Initializing filter UI...');
        
        document.querySelectorAll('.select-box').forEach(selectBox => {
            updateSelectedDisplay(selectBox);
        });
        
        // Add change event listeners to checkboxes
        document.querySelectorAll('.dropdown-options input[type="checkbox"]').forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const selectBox = this.closest('.custom-multi-select').querySelector('.select-box');
                updateSelectedDisplay(selectBox);
            });
        });
    });
</script>

<!-- Global test function to debug ViewBag data -->
<script>
function testVungKinhTeData() {
    console.log('🧪 TESTING ViewBag Data...');
    
    // Test ViewBag values safely
    const totalCompanies = @(ViewBag.TotalCompanies ?? 0);
    console.log('📊 ViewBag.TotalCompanies:', totalCompanies);
    
    // Test if data is available
    try {
        const rawData = '@Html.Raw(Json.Serialize(ViewBag.VungKinhTeData ?? new List<object>()))';
        console.log('📊 Raw data string:', rawData);
        
        let testData = [];
        if (rawData && rawData !== '[]' && rawData !== '') {
            testData = JSON.parse(rawData);
        }
        
        console.log('📊 Test data parsed:', testData);
        console.log('📊 Test data type:', typeof testData);
        console.log('📊 Test data length:', testData ? testData.length : 'null');
        
        if (testData && testData.length > 0) {
            console.log('✅ Data is available!');
            alert('✅ Data available: ' + testData.length + ' regions found.\\nTotal companies: ' + totalCompanies + '\\nCheck console for details.');
        } else {
            console.log('❌ No data available!');
            alert('❌ No data available from ViewBag.VungKinhTeData\\nData might be empty or null from database.');
        }
    } catch (error) {
        console.error('❌ Error testing data:', error);
        alert('❌ Error testing data: ' + error.message);
    }
    
    // Test Chart.js
    if (typeof Chart !== 'undefined') {
        console.log('✅ Chart.js is loaded:', Chart.version);
    } else {
        console.log('❌ Chart.js is NOT loaded!');
        alert('❌ Chart.js library is not loaded!');
    }
    
    // Test canvas element
    const canvas = document.getElementById('vungKinhTeChart');
    if (canvas) {
        console.log('✅ Canvas element found:', canvas);
    } else {
        console.log('❌ Canvas element NOT found!');
        alert('❌ Canvas element vungKinhTeChart not found!');
    }
}
</script>

<!-- Global function to force create test chart -->
<script>
function createTestChart() {
    console.log('🧪 Creating test chart...');
    
    // Check if canvas exists
    const canvas = document.getElementById('vungKinhTeChart');
    if (!canvas) {
        alert('❌ Canvas element not found!');
        return;
    }
    
    // Check if Chart.js is available
    if (typeof Chart === 'undefined') {
        alert('❌ Chart.js is not loaded!');
        return;
    }
    
    try {
        // Destroy existing chart if any
        const existingChart = Chart.getChart(canvas);
        if (existingChart) {
            existingChart.destroy();
        }
        
        // Test data for all 7 Vietnamese economic regions
        const testData = [
            { region: 'Đông Nam Bộ', count: 15 },
            { region: 'Đồng bằng Sông Hồng', count: 12 },
            { region: 'Duyên hải Nam Trung Bộ', count: 8 },
            { region: 'Bắc Trung Bộ', count: 6 },
            { region: 'Đồng bằng Sông Cửu Long', count: 10 },
            { region: 'Tây Nguyên', count: 4 },
            { region: 'Trung du và Miền núi Bắc Bộ', count: 5 }
        ];
        
        const labels = testData.map(item => item.region);
        const data = testData.map(item => item.count);
        const colors = [
            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', 
            '#9966FF', '#FF9F40', '#C9CBCF'
        ];
        
        console.log('📊 Creating chart with test data:', { labels, data });
        
        const testChart = new Chart(canvas, {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: colors,
                    borderColor: '#ffffff',
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const total = data.reduce((a, b) => a + b, 0);
                                const percentage = ((context.raw / total) * 100).toFixed(1);
                                return context.label + ': ' + context.raw + ' DN (' + percentage + '%)';
                            }
                        }
                    }
                }
            }
        });
        
        console.log('✅ Test chart created successfully!', testChart);
        
        // Update legend
        const total = data.reduce((a, b) => a + b, 0);
        createCustomLegend(labels, data, colors, total);
        
        alert('✅ Test chart created successfully!\\nCheck the chart display above.');
        
    } catch (error) {
        console.error('❌ Error creating test chart:', error);
        alert('❌ Error creating test chart: ' + error.message);
    }
}
</script>

<!-- Quy mô Doanh nghiệp Chart Script -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    console.log('🎯 Initializing Quy mô Doanh nghiệp Chart...');
    
    // Check if Chart.js is loaded
    if (typeof Chart === 'undefined') {
        console.error('❌ Chart.js is not loaded!');
        return;
    }
    
    // Get data from ViewBag - sẽ cần thêm ViewBag.QuyMoData từ Controller
    let quyMoData = [];
    try {
        const rawDataString = '@Html.Raw(Json.Serialize(ViewBag.QuyMoData ?? new List<object>()))';
        console.log('📊 Raw Quy Mo data string:', rawDataString);
        
        if (rawDataString && rawDataString !== '[]' && rawDataString !== '') {
            quyMoData = JSON.parse(rawDataString);
        }
        
        console.log('📊 Quy mô data from ViewBag:', quyMoData);
    } catch (error) {
        console.warn('⚠️ Error loading Quy mô ViewBag data:', error);
    }
    
    // Fallback sample data nếu không có dữ liệu từ ViewBag
    if (!quyMoData || quyMoData.length === 0) {
        console.log('⚠️ No Quy mô data from ViewBag, using sample data');
        quyMoData = [
            { category: 'Siêu nhỏ', count: 25, description: 'DT ≤ 3 tỷ' },
            { category: 'Nhỏ', count: 12, description: '3 tỷ < DT ≤ 50 tỷ' },
            { category: 'Vừa', count: 8, description: '50 tỷ < DT ≤ 300 tỷ' },
            { category: 'Lớn', count: 5, description: 'DT > 300 tỷ & TS > 100 tỷ' }
        ];
        console.log('📊 Using sample Quy mô data:', quyMoData);
    }
    
    // Prepare chart data
    let labels = quyMoData.map(item => item.QuyMo || item.category || item.Category || 'N/A');
    let data = quyMoData.map(item => item.SoLuong || item.count || item.Count || 0);
    let descriptions = quyMoData.map(item => item.MoTa || item.description || item.Description || '');
    let total = data.reduce((sum, value) => sum + value, 0);
    
    console.log('📊 Processed Quy mô chart data:');
    console.log('  Labels:', labels);
    console.log('  Data:', data);
    console.log('  Descriptions:', descriptions);
    console.log('  Total:', total);
    
    // If total is 0, use sample data for testing
    if (total === 0) {
        console.log('⚠️ Total is 0, using sample data for testing');
        quyMoData = [
            { category: 'Siêu nhỏ', count: 25, description: 'DT ≤ 3 tỷ' },
            { category: 'Nhỏ', count: 12, description: '3 tỷ < DT ≤ 50 tỷ' },
            { category: 'Vừa', count: 8, description: '50 tỷ < DT ≤ 300 tỷ' },
            { category: 'Lớn', count: 5, description: 'DT > 300 tỷ & TS > 100 tỷ' }
        ];
        
        // Recalculate with sample data
        labels = quyMoData.map(item => item.category);
        data = quyMoData.map(item => item.count);
        descriptions = quyMoData.map(item => item.description);
        total = data.reduce((sum, value) => sum + value, 0);
        
        console.log('📊 Using sample Quy mô data instead:');
        console.log('  Labels:', labels);
        console.log('  Data:', data);
        console.log('  Total:', total);
    }
    
    // Chart colors - 4 màu cho 4 quy mô
    const colors = [
        '#FF6B6B', // Siêu nhỏ - Đỏ nhạt
        '#4ECDC4', // Nhỏ - Xanh lục
        '#45B7D1', // Vừa - Xanh dương
        '#96CEB4'  // Lớn - Xanh lá nhạt
    ];
    
    // Get canvas context
    const ctx = document.getElementById('quyMoChart');
    if (!ctx) {
        console.error('❌ Canvas element quyMoChart not found!');
        return;
    }
    console.log('✅ Quy mô Canvas element found:', ctx);
    
    // Create chart
    try {
        // Destroy existing chart if any
        Chart.getChart(ctx)?.destroy();
        
        const quyMoChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Số lượng DN',
                    data: data,
                    backgroundColor: colors,
                    borderColor: colors.map(color => color + 'CC'),
                    borderWidth: 2,
                    borderRadius: 8,
                    borderSkipped: false
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const percentage = ((context.raw / total) * 100).toFixed(1);
                                const desc = descriptions[context.dataIndex] || '';
                                return [
                                    context.label + ': ' + context.raw.toLocaleString() + ' DN (' + percentage + '%)',
                                    desc
                                ];
                            }
                        },
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: 'white',
                        bodyColor: 'white',
                        borderColor: 'rgba(255, 255, 255, 0.2)',
                        borderWidth: 1
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            precision: 0
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.1)'
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        }
                    }
                },
                animation: {
                    duration: 1000,
                    easing: 'easeOutBounce'
                }
            }
        });
        
        console.log('✅ Quy mô Chart created successfully!', quyMoChart);
        
        // Create custom legend for Quy mô
        createQuyMoLegend(labels, data, descriptions, colors, total);
        
        console.log('✅ Quy mô Doanh nghiệp Chart completed successfully!');
        
    } catch (error) {
        console.error('❌ Error creating Quy mô chart:', error);
        console.error('❌ Error stack:', error.stack);
    }
});

// Function to create custom legend for Quy mô chart
function createQuyMoLegend(labels, data, descriptions, colors, total) {
    const legendContainer = document.getElementById('quyMoLegendDetails');
    if (!legendContainer) return;
    
    let legendHTML = '';
    
    labels.forEach((label, index) => {
        const value = data[index];
        const percentage = ((value / total) * 100).toFixed(1);
        const description = descriptions[index] || '';
        
        legendHTML += `
            <div class="legend-item" style="margin-bottom: 8px;">
                <div class="legend-color" style="background-color: ${colors[index]}; width: 16px; height: 16px;"></div>
                <div class="legend-text" style="font-size: 0.85rem;">
                    <strong>${label}</strong><br>
                    <small class="text-muted">${description}</small>
                </div>
                <div class="legend-value" style="font-size: 0.8rem;">
                    ${value.toLocaleString()} DN
                    <div class="legend-percentage" style="font-size: 0.75rem;">${percentage}%</div>
                </div>
            </div>
        `;
    });
    
    // Thêm tổng số
    legendHTML += `
        <div class="legend-item" style="border-top: 2px solid #dee2e6; margin-top: 15px; padding-top: 10px;">
            <div class="legend-color" style="background: linear-gradient(45deg, #28a745, #20c997); width: 16px; height: 16px;"></div>
            <div class="legend-text" style="font-size: 0.85rem;"><strong>Tổng cộng</strong></div>
            <div class="legend-value" style="font-size: 0.8rem;">
                <strong>${total.toLocaleString()} DN</strong>
                <div class="legend-percentage" style="font-size: 0.75rem;">100%</div>
            </div>
        </div>
    `;
    
    legendContainer.innerHTML = legendHTML;
}
</script>

<!-- Test functions for Quy mô chart -->
<script>
// Global test function for Quy mô data
function testQuyMoData() {
    console.log('🧪 TESTING Quy mô Data...');
    
    // Test ViewBag values safely
    const totalCompanies = @(ViewBag.TotalCompanies ?? 0);
    console.log('📊 ViewBag.TotalCompanies:', totalCompanies);
    
    // Test if data is available
    try {
        const rawData = '@Html.Raw(Json.Serialize(ViewBag.QuyMoData ?? new List<object>()))';
        console.log('📊 Raw Quy mô data string:', rawData);
        
        let testData = [];
        if (rawData && rawData !== '[]' && rawData !== '') {
            testData = JSON.parse(rawData);
        }
        
        console.log('📊 Test Quy mô data parsed:', testData);
        console.log('📊 Test data type:', typeof testData);
        console.log('📊 Test data length:', testData ? testData.length : 'null');
        
        if (testData && testData.length > 0) {
            console.log('✅ Quy mô Data is available!');
            alert('✅ Quy mô Data available: ' + testData.length + ' categories found.\\nTotal companies: ' + totalCompanies + '\\nCheck console for details.');
        } else {
            console.log('❌ No Quy mô data available!');
            alert('❌ No data available from ViewBag.QuyMoData\\nData might be empty or null from database.');
        }
    } catch (error) {
        console.error('❌ Error testing Quy mô data:', error);
        alert('❌ Error testing Quy mô data: ' + error.message);
    }
    
    // Test canvas element
    const canvas = document.getElementById('quyMoChart');
    if (canvas) {
        console.log('✅ Quy mô Canvas element found:', canvas);
    } else {
        console.log('❌ Quy mô Canvas element NOT found!');
        alert('❌ Canvas element quyMoChart not found!');
    }
}

// Global function to force create Quy mô test chart
function createQuyMoChart() {
    console.log('🧪 Creating Quy mô test chart...');
    
    // Check if canvas exists
    const canvas = document.getElementById('quyMoChart');
    if (!canvas) {
        alert('❌ Canvas element quyMoChart not found!');
        return;
    }
    
    // Check if Chart.js is available
    if (typeof Chart === 'undefined') {
        alert('❌ Chart.js is not loaded!');
        return;
    }
    
    try {
        // Destroy existing chart if any
        const existingChart = Chart.getChart(canvas);
        if (existingChart) {
            existingChart.destroy();
        }
        
        // Test data for company sizes based on revenue (in million VND)
        const testData = [
            { category: 'Siêu nhỏ', count: 18, description: 'DT ≤ 3 tỷ' },
            { category: 'Nhỏ', count: 15, description: '3 tỷ < DT ≤ 50 tỷ' },
            { category: 'Vừa', count: 8, description: '50 tỷ < DT ≤ 300 tỷ' },
            { category: 'Lớn', count: 2, description: 'DT > 300 tỷ & TS > 100 tỷ' }
        ];
        
        const labels = testData.map(item => item.category);
        const data = testData.map(item => item.count);
        const descriptions = testData.map(item => item.description);
        const colors = [
            '#FF6B6B', // Siêu nhỏ - Đỏ nhạt
            '#4ECDC4', // Nhỏ - Xanh lục
            '#45B7D1', // Vừa - Xanh dương
            '#96CEB4'  // Lớn - Xanh lá nhạt
        ];
        
        console.log('📊 Creating Quy mô chart with test data:', { labels, data, descriptions });
        
        const testChart = new Chart(canvas, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Số lượng DN',
                    data: data,
                    backgroundColor: colors,
                    borderColor: colors.map(color => color + 'CC'),
                    borderWidth: 2,
                    borderRadius: 8,
                    borderSkipped: false
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const total = data.reduce((a, b) => a + b, 0);
                                const percentage = ((context.raw / total) * 100).toFixed(1);
                                const desc = descriptions[context.dataIndex] || '';
                                return [
                                    context.label + ': ' + context.raw + ' DN (' + percentage + '%)',
                                    desc
                                ];
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            precision: 0
                        }
                    }
                },
                animation: {
                    duration: 1000,
                    easing: 'easeOutBounce'
                }
            }
        });
        
        console.log('✅ Quy mô Test chart created successfully!', testChart);
        
        // Update legend
        const total = data.reduce((a, b) => a + b, 0);
        createQuyMoLegend(labels, data, descriptions, colors, total);
        
        alert('✅ Quy mô Test chart created successfully!\\nCheck the chart display above.');
        
    } catch (error) {
        console.error('❌ Error creating Quy mô test chart:', error);
        alert('❌ Error creating Quy mô test chart: ' + error.message);
    }
}
</script>
</body>
</html>
